#include "tests.h"
#include "common.h"
#include "hal/linux/linux.h"
#include "networking/dns_message.h"

using namespace fk;

FK_DECLARE_LOGGER("dns");

class DnsSuite : public ::testing::Test {
protected:
    void SetUp() override {
    }

    void TearDown() override {
    }

};

uint8_t packet_1[] = {
    0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03, 0x5f, 0x66,
    0x6b, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c,
    0x00, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x08, 0x05, 0x4a, 0x41, 0x43, 0x4f, 0x42, 0xc0,
    0x0c, 0xc0, 0x26, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00, 0x01, 0x00, 0xc0,
    0x26, 0x00, 0x21, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x50, 0x0a, 0x4a, 0x41, 0x43, 0x4f, 0x42, 0x2d, 0x48, 0x4f, 0x4d, 0x45, 0xc0, 0x15,
    0xc0, 0x4d, 0x00, 0x1c, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x10, 0xfe, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x98, 0x01, 0x25, 0x6e, 0xd8, 0xc7, 0x6a, 0xc0, 0x4d,
    0x00, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0x64 };


uint8_t packet_2[] = {
    0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x10, 0x5f, 0x73,
    0x70, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x04,
    0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x3c, 0x00, 0x24, 0x21, 0x39, 0x33, 0x39, 0x37, 0x66, 0x34, 0x33, 0x66,
    0x2d, 0x62, 0x36, 0x35, 0x32, 0x2d, 0x35, 0x33, 0x34, 0x36, 0x2d, 0x39, 0x65, 0x33, 0x64,
    0x2d, 0x32, 0x35, 0x36, 0x64, 0x36, 0x38, 0x39, 0x2d, 0x30, 0xc0, 0x0c, 0xc0, 0x33, 0x00,
    0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x9d,
    0x21, 0x39, 0x33, 0x39, 0x37, 0x66, 0x34, 0x33, 0x66, 0x2d, 0x62, 0x36, 0x35, 0x32, 0x2d,
    0x35, 0x33, 0x34, 0x36, 0x2d, 0x39, 0x65, 0x33, 0x64, 0x2d, 0x32, 0x35, 0x36, 0x64, 0x36,
    0x38, 0x39, 0x2d, 0x30, 0xc0, 0x22, 0xc0, 0x33, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x3c, 0x00, 0x21, 0x0b, 0x43, 0x50, 0x61, 0x74, 0x68, 0x3d, 0x2f, 0x7a, 0x63, 0x2f, 0x30,
    0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x3d, 0x31, 0x2e, 0x30, 0x08, 0x53, 0x74,
    0x61, 0x63, 0x6b, 0x3d, 0x53, 0x50, 0xc0, 0x69, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x3c, 0x00, 0x04, 0xc0, 0xa8, 0x00, 0xc0  };


TEST_F(DnsSuite, Parse1) {
    StandardPool pool{ "dns" };
    DnsMessage message{ packet_1, sizeof(packet_1) };
    message.parse(&pool);
}

TEST_F(DnsSuite, Parse2) {
    StandardPool pool{ "dns" };
    DnsMessage message{ packet_2, sizeof(packet_2) };
    message.parse(&pool);
}
