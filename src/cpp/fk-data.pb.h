// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fk-data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fk_2ddata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fk_2ddata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fk_2ddata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fk_2ddata_2eproto;
namespace fk_data {
class Condition;
class ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
class DataRecord;
class DataRecordDefaultTypeInternal;
extern DataRecordDefaultTypeInternal _DataRecord_default_instance_;
class DeviceLocation;
class DeviceLocationDefaultTypeInternal;
extern DeviceLocationDefaultTypeInternal _DeviceLocation_default_instance_;
class Firmware;
class FirmwareDefaultTypeInternal;
extern FirmwareDefaultTypeInternal _Firmware_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class JobSchedule;
class JobScheduleDefaultTypeInternal;
extern JobScheduleDefaultTypeInternal _JobSchedule_default_instance_;
class LogMessage;
class LogMessageDefaultTypeInternal;
extern LogMessageDefaultTypeInternal _LogMessage_default_instance_;
class LoggedReading;
class LoggedReadingDefaultTypeInternal;
extern LoggedReadingDefaultTypeInternal _LoggedReading_default_instance_;
class LoraRecord;
class LoraRecordDefaultTypeInternal;
extern LoraRecordDefaultTypeInternal _LoraRecord_default_instance_;
class LoraSettings;
class LoraSettingsDefaultTypeInternal;
extern LoraSettingsDefaultTypeInternal _LoraSettings_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class ModuleHeader;
class ModuleHeaderDefaultTypeInternal;
extern ModuleHeaderDefaultTypeInternal _ModuleHeader_default_instance_;
class ModuleInfo;
class ModuleInfoDefaultTypeInternal;
extern ModuleInfoDefaultTypeInternal _ModuleInfo_default_instance_;
class NetworkInfo;
class NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
class NetworkSettings;
class NetworkSettingsDefaultTypeInternal;
extern NetworkSettingsDefaultTypeInternal _NetworkSettings_default_instance_;
class Readings;
class ReadingsDefaultTypeInternal;
extern ReadingsDefaultTypeInternal _Readings_default_instance_;
class Schedule;
class ScheduleDefaultTypeInternal;
extern ScheduleDefaultTypeInternal _Schedule_default_instance_;
class SensorAndValue;
class SensorAndValueDefaultTypeInternal;
extern SensorAndValueDefaultTypeInternal _SensorAndValue_default_instance_;
class SensorGroup;
class SensorGroupDefaultTypeInternal;
extern SensorGroupDefaultTypeInternal _SensorGroup_default_instance_;
class SensorInfo;
class SensorInfoDefaultTypeInternal;
extern SensorInfoDefaultTypeInternal _SensorInfo_default_instance_;
class SensorReading;
class SensorReadingDefaultTypeInternal;
extern SensorReadingDefaultTypeInternal _SensorReading_default_instance_;
class SignedRecord;
class SignedRecordDefaultTypeInternal;
extern SignedRecordDefaultTypeInternal _SignedRecord_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace fk_data
PROTOBUF_NAMESPACE_OPEN
template<> ::fk_data::Condition* Arena::CreateMaybeMessage<::fk_data::Condition>(Arena*);
template<> ::fk_data::DataRecord* Arena::CreateMaybeMessage<::fk_data::DataRecord>(Arena*);
template<> ::fk_data::DeviceLocation* Arena::CreateMaybeMessage<::fk_data::DeviceLocation>(Arena*);
template<> ::fk_data::Firmware* Arena::CreateMaybeMessage<::fk_data::Firmware>(Arena*);
template<> ::fk_data::Identity* Arena::CreateMaybeMessage<::fk_data::Identity>(Arena*);
template<> ::fk_data::JobSchedule* Arena::CreateMaybeMessage<::fk_data::JobSchedule>(Arena*);
template<> ::fk_data::LogMessage* Arena::CreateMaybeMessage<::fk_data::LogMessage>(Arena*);
template<> ::fk_data::LoggedReading* Arena::CreateMaybeMessage<::fk_data::LoggedReading>(Arena*);
template<> ::fk_data::LoraRecord* Arena::CreateMaybeMessage<::fk_data::LoraRecord>(Arena*);
template<> ::fk_data::LoraSettings* Arena::CreateMaybeMessage<::fk_data::LoraSettings>(Arena*);
template<> ::fk_data::Metadata* Arena::CreateMaybeMessage<::fk_data::Metadata>(Arena*);
template<> ::fk_data::ModuleHeader* Arena::CreateMaybeMessage<::fk_data::ModuleHeader>(Arena*);
template<> ::fk_data::ModuleInfo* Arena::CreateMaybeMessage<::fk_data::ModuleInfo>(Arena*);
template<> ::fk_data::NetworkInfo* Arena::CreateMaybeMessage<::fk_data::NetworkInfo>(Arena*);
template<> ::fk_data::NetworkSettings* Arena::CreateMaybeMessage<::fk_data::NetworkSettings>(Arena*);
template<> ::fk_data::Readings* Arena::CreateMaybeMessage<::fk_data::Readings>(Arena*);
template<> ::fk_data::Schedule* Arena::CreateMaybeMessage<::fk_data::Schedule>(Arena*);
template<> ::fk_data::SensorAndValue* Arena::CreateMaybeMessage<::fk_data::SensorAndValue>(Arena*);
template<> ::fk_data::SensorGroup* Arena::CreateMaybeMessage<::fk_data::SensorGroup>(Arena*);
template<> ::fk_data::SensorInfo* Arena::CreateMaybeMessage<::fk_data::SensorInfo>(Arena*);
template<> ::fk_data::SensorReading* Arena::CreateMaybeMessage<::fk_data::SensorReading>(Arena*);
template<> ::fk_data::SignedRecord* Arena::CreateMaybeMessage<::fk_data::SignedRecord>(Arena*);
template<> ::fk_data::Status* Arena::CreateMaybeMessage<::fk_data::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fk_data {

enum DownloadFlags : int {
  READING_FLAGS_NONE = 0,
  READING_FLAGS_NOT_RECORDING = 1,
  READING_FLAGS_MANUAL = 2,
  DownloadFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DownloadFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DownloadFlags_IsValid(int value);
constexpr DownloadFlags DownloadFlags_MIN = READING_FLAGS_NONE;
constexpr DownloadFlags DownloadFlags_MAX = READING_FLAGS_MANUAL;
constexpr int DownloadFlags_ARRAYSIZE = DownloadFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadFlags_descriptor();
template<typename T>
inline const std::string& DownloadFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DownloadFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DownloadFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DownloadFlags_descriptor(), enum_t_value);
}
inline bool DownloadFlags_Parse(
    const std::string& name, DownloadFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DownloadFlags>(
    DownloadFlags_descriptor(), name, value);
}
enum ConditionFlags : int {
  CONDITION_FLAGS_NONE = 0,
  CONDITION_FLAGS_RECORDING = 1,
  ConditionFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConditionFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConditionFlags_IsValid(int value);
constexpr ConditionFlags ConditionFlags_MIN = CONDITION_FLAGS_NONE;
constexpr ConditionFlags ConditionFlags_MAX = CONDITION_FLAGS_RECORDING;
constexpr int ConditionFlags_ARRAYSIZE = ConditionFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionFlags_descriptor();
template<typename T>
inline const std::string& ConditionFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConditionFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConditionFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConditionFlags_descriptor(), enum_t_value);
}
inline bool ConditionFlags_Parse(
    const std::string& name, ConditionFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConditionFlags>(
    ConditionFlags_descriptor(), name, value);
}
enum SignedRecordKind : int {
  SIGNED_RECORD_KIND_NONE = 0,
  SIGNED_RECORD_KIND_MODULES = 1,
  SIGNED_RECORD_KIND_SCHEDULE = 2,
  SIGNED_RECORD_KIND_STATE = 3,
  SIGNED_RECORD_KIND_RAW_STATE = 4,
  SIGNED_RECORD_KIND_OTHER = 255,
  SignedRecordKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SignedRecordKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SignedRecordKind_IsValid(int value);
constexpr SignedRecordKind SignedRecordKind_MIN = SIGNED_RECORD_KIND_NONE;
constexpr SignedRecordKind SignedRecordKind_MAX = SIGNED_RECORD_KIND_OTHER;
constexpr int SignedRecordKind_ARRAYSIZE = SignedRecordKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignedRecordKind_descriptor();
template<typename T>
inline const std::string& SignedRecordKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SignedRecordKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SignedRecordKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SignedRecordKind_descriptor(), enum_t_value);
}
inline bool SignedRecordKind_Parse(
    const std::string& name, SignedRecordKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignedRecordKind>(
    SignedRecordKind_descriptor(), name, value);
}
// ===================================================================

class DeviceLocation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.DeviceLocation) */ {
 public:
  DeviceLocation();
  virtual ~DeviceLocation();

  DeviceLocation(const DeviceLocation& from);
  DeviceLocation(DeviceLocation&& from) noexcept
    : DeviceLocation() {
    *this = ::std::move(from);
  }

  inline DeviceLocation& operator=(const DeviceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceLocation& operator=(DeviceLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLocation* internal_default_instance() {
    return reinterpret_cast<const DeviceLocation*>(
               &_DeviceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceLocation& a, DeviceLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceLocation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceLocation* New() const final {
    return CreateMaybeMessage<DeviceLocation>(nullptr);
  }

  DeviceLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceLocation& from);
  void MergeFrom(const DeviceLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.DeviceLocation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 6,
    kTimeFieldNumber = 2,
    kFixFieldNumber = 1,
    kLongitudeFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kAltitudeFieldNumber = 5,
    kEnabledFieldNumber = 7,
    kSatellitesFieldNumber = 8,
    kHdopFieldNumber = 9,
  };
  // repeated float coordinates = 6;
  int coordinates_size() const;
  private:
  int _internal_coordinates_size() const;
  public:
  void clear_coordinates();
  private:
  float _internal_coordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_coordinates() const;
  void _internal_add_coordinates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_coordinates();
  public:
  float coordinates(int index) const;
  void set_coordinates(int index, float value);
  void add_coordinates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      coordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_coordinates();

  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 fix = 1;
  void clear_fix();
  ::PROTOBUF_NAMESPACE_ID::uint32 fix() const;
  void set_fix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fix() const;
  void _internal_set_fix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float longitude = 3;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 4;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float altitude = 5;
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);
  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);
  public:

  // uint32 enabled = 7;
  void clear_enabled();
  ::PROTOBUF_NAMESPACE_ID::uint32 enabled() const;
  void set_enabled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enabled() const;
  void _internal_set_enabled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 satellites = 8;
  void clear_satellites();
  ::PROTOBUF_NAMESPACE_ID::uint32 satellites() const;
  void set_satellites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_satellites() const;
  void _internal_set_satellites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hdop = 9;
  void clear_hdop();
  ::PROTOBUF_NAMESPACE_ID::uint32 hdop() const;
  void set_hdop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hdop() const;
  void _internal_set_hdop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.DeviceLocation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > coordinates_;
  mutable std::atomic<int> _coordinates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fix_;
  float longitude_;
  float latitude_;
  float altitude_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 satellites_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hdop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class SensorReading :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.SensorReading) */ {
 public:
  SensorReading();
  virtual ~SensorReading();

  SensorReading(const SensorReading& from);
  SensorReading(SensorReading&& from) noexcept
    : SensorReading() {
    *this = ::std::move(from);
  }

  inline SensorReading& operator=(const SensorReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorReading& operator=(SensorReading&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorReading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorReading* internal_default_instance() {
    return reinterpret_cast<const SensorReading*>(
               &_SensorReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorReading& a, SensorReading& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorReading* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorReading* New() const final {
    return CreateMaybeMessage<SensorReading>(nullptr);
  }

  SensorReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorReading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorReading& from);
  void MergeFrom(const SensorReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorReading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.SensorReading";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kReadingFieldNumber = 1,
    kSensorFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 reading = 1;
  void clear_reading();
  ::PROTOBUF_NAMESPACE_ID::uint32 reading() const;
  void set_reading(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reading() const;
  void _internal_set_reading(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sensor = 3;
  void clear_sensor();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor() const;
  void set_sensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor() const;
  void _internal_set_sensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float value = 4;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.SensorReading)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reading_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class LoggedReading :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.LoggedReading) */ {
 public:
  LoggedReading();
  virtual ~LoggedReading();

  LoggedReading(const LoggedReading& from);
  LoggedReading(LoggedReading&& from) noexcept
    : LoggedReading() {
    *this = ::std::move(from);
  }

  inline LoggedReading& operator=(const LoggedReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggedReading& operator=(LoggedReading&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggedReading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggedReading* internal_default_instance() {
    return reinterpret_cast<const LoggedReading*>(
               &_LoggedReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoggedReading& a, LoggedReading& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggedReading* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggedReading* New() const final {
    return CreateMaybeMessage<LoggedReading>(nullptr);
  }

  LoggedReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggedReading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggedReading& from);
  void MergeFrom(const LoggedReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggedReading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.LoggedReading";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kReadingFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // .fk_data.DeviceLocation location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::fk_data::DeviceLocation& location() const;
  ::fk_data::DeviceLocation* release_location();
  ::fk_data::DeviceLocation* mutable_location();
  void set_allocated_location(::fk_data::DeviceLocation* location);
  private:
  const ::fk_data::DeviceLocation& _internal_location() const;
  ::fk_data::DeviceLocation* _internal_mutable_location();
  public:

  // .fk_data.SensorReading reading = 3;
  bool has_reading() const;
  private:
  bool _internal_has_reading() const;
  public:
  void clear_reading();
  const ::fk_data::SensorReading& reading() const;
  ::fk_data::SensorReading* release_reading();
  ::fk_data::SensorReading* mutable_reading();
  void set_allocated_reading(::fk_data::SensorReading* reading);
  private:
  const ::fk_data::SensorReading& _internal_reading() const;
  ::fk_data::SensorReading* _internal_mutable_reading();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.LoggedReading)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::fk_data::DeviceLocation* location_;
  ::fk_data::SensorReading* reading_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class SensorAndValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.SensorAndValue) */ {
 public:
  SensorAndValue();
  virtual ~SensorAndValue();

  SensorAndValue(const SensorAndValue& from);
  SensorAndValue(SensorAndValue&& from) noexcept
    : SensorAndValue() {
    *this = ::std::move(from);
  }

  inline SensorAndValue& operator=(const SensorAndValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorAndValue& operator=(SensorAndValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorAndValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorAndValue* internal_default_instance() {
    return reinterpret_cast<const SensorAndValue*>(
               &_SensorAndValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SensorAndValue& a, SensorAndValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorAndValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorAndValue* New() const final {
    return CreateMaybeMessage<SensorAndValue>(nullptr);
  }

  SensorAndValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorAndValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorAndValue& from);
  void MergeFrom(const SensorAndValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorAndValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.SensorAndValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 sensor = 1;
  void clear_sensor();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor() const;
  void set_sensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor() const;
  void _internal_set_sensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.SensorAndValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class ModuleHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.ModuleHeader) */ {
 public:
  ModuleHeader();
  virtual ~ModuleHeader();

  ModuleHeader(const ModuleHeader& from);
  ModuleHeader(ModuleHeader&& from) noexcept
    : ModuleHeader() {
    *this = ::std::move(from);
  }

  inline ModuleHeader& operator=(const ModuleHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleHeader& operator=(ModuleHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModuleHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModuleHeader* internal_default_instance() {
    return reinterpret_cast<const ModuleHeader*>(
               &_ModuleHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModuleHeader& a, ModuleHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModuleHeader* New() const final {
    return CreateMaybeMessage<ModuleHeader>(nullptr);
  }

  ModuleHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModuleHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModuleHeader& from);
  void MergeFrom(const ModuleHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.ModuleHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerFieldNumber = 1,
    kKindFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // uint32 manufacturer = 1;
  void clear_manufacturer();
  ::PROTOBUF_NAMESPACE_ID::uint32 manufacturer() const;
  void set_manufacturer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_manufacturer() const;
  void _internal_set_manufacturer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 kind = 2;
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.ModuleHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class ModuleInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.ModuleInfo) */ {
 public:
  ModuleInfo();
  virtual ~ModuleInfo();

  ModuleInfo(const ModuleInfo& from);
  ModuleInfo(ModuleInfo&& from) noexcept
    : ModuleInfo() {
    *this = ::std::move(from);
  }

  inline ModuleInfo& operator=(const ModuleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleInfo& operator=(ModuleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModuleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModuleInfo* internal_default_instance() {
    return reinterpret_cast<const ModuleInfo*>(
               &_ModuleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModuleInfo& a, ModuleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModuleInfo* New() const final {
    return CreateMaybeMessage<ModuleInfo>(nullptr);
  }

  ModuleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModuleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModuleInfo& from);
  void MergeFrom(const ModuleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.ModuleInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorsFieldNumber = 6,
    kNameFieldNumber = 3,
    kIdFieldNumber = 7,
    kHeaderFieldNumber = 4,
    kFirmwareFieldNumber = 5,
    kPositionFieldNumber = 1,
    kAddressFieldNumber = 2,
    kFlagsFieldNumber = 8,
  };
  // repeated .fk_data.SensorInfo sensors = 6;
  int sensors_size() const;
  private:
  int _internal_sensors_size() const;
  public:
  void clear_sensors();
  ::fk_data::SensorInfo* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo >*
      mutable_sensors();
  private:
  const ::fk_data::SensorInfo& _internal_sensors(int index) const;
  ::fk_data::SensorInfo* _internal_add_sensors();
  public:
  const ::fk_data::SensorInfo& sensors(int index) const;
  ::fk_data::SensorInfo* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo >&
      sensors() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes id = 7;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .fk_data.ModuleHeader header = 4;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::fk_data::ModuleHeader& header() const;
  ::fk_data::ModuleHeader* release_header();
  ::fk_data::ModuleHeader* mutable_header();
  void set_allocated_header(::fk_data::ModuleHeader* header);
  private:
  const ::fk_data::ModuleHeader& _internal_header() const;
  ::fk_data::ModuleHeader* _internal_mutable_header();
  public:

  // .fk_data.Firmware firmware = 5;
  bool has_firmware() const;
  private:
  bool _internal_has_firmware() const;
  public:
  void clear_firmware();
  const ::fk_data::Firmware& firmware() const;
  ::fk_data::Firmware* release_firmware();
  ::fk_data::Firmware* mutable_firmware();
  void set_allocated_firmware(::fk_data::Firmware* firmware);
  private:
  const ::fk_data::Firmware& _internal_firmware() const;
  ::fk_data::Firmware* _internal_mutable_firmware();
  public:

  // uint32 position = 1;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 flags = 8;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.ModuleInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo > sensors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::fk_data::ModuleHeader* header_;
  ::fk_data::Firmware* firmware_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class SensorInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.SensorInfo) */ {
 public:
  SensorInfo();
  virtual ~SensorInfo();

  SensorInfo(const SensorInfo& from);
  SensorInfo(SensorInfo&& from) noexcept
    : SensorInfo() {
    *this = ::std::move(from);
  }

  inline SensorInfo& operator=(const SensorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorInfo& operator=(SensorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorInfo* internal_default_instance() {
    return reinterpret_cast<const SensorInfo*>(
               &_SensorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SensorInfo& a, SensorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorInfo* New() const final {
    return CreateMaybeMessage<SensorInfo>(nullptr);
  }

  SensorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorInfo& from);
  void MergeFrom(const SensorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.SensorInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUnitOfMeasureFieldNumber = 3,
    kNumberFieldNumber = 1,
    kFlagsFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string unitOfMeasure = 3;
  void clear_unitofmeasure();
  const std::string& unitofmeasure() const;
  void set_unitofmeasure(const std::string& value);
  void set_unitofmeasure(std::string&& value);
  void set_unitofmeasure(const char* value);
  void set_unitofmeasure(const char* value, size_t size);
  std::string* mutable_unitofmeasure();
  std::string* release_unitofmeasure();
  void set_allocated_unitofmeasure(std::string* unitofmeasure);
  private:
  const std::string& _internal_unitofmeasure() const;
  void _internal_set_unitofmeasure(const std::string& value);
  std::string* _internal_mutable_unitofmeasure();
  public:

  // uint32 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 flags = 4;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.SensorInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unitofmeasure_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class Firmware :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.Firmware) */ {
 public:
  Firmware();
  virtual ~Firmware();

  Firmware(const Firmware& from);
  Firmware(Firmware&& from) noexcept
    : Firmware() {
    *this = ::std::move(from);
  }

  inline Firmware& operator=(const Firmware& from) {
    CopyFrom(from);
    return *this;
  }
  inline Firmware& operator=(Firmware&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Firmware& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Firmware* internal_default_instance() {
    return reinterpret_cast<const Firmware*>(
               &_Firmware_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Firmware& a, Firmware& b) {
    a.Swap(&b);
  }
  inline void Swap(Firmware* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Firmware* New() const final {
    return CreateMaybeMessage<Firmware>(nullptr);
  }

  Firmware* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Firmware>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Firmware& from);
  void MergeFrom(const Firmware& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Firmware* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.Firmware";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kBuildFieldNumber = 2,
    kNumberFieldNumber = 3,
    kHashFieldNumber = 5,
    kTimestampFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string build = 2;
  void clear_build();
  const std::string& build() const;
  void set_build(const std::string& value);
  void set_build(std::string&& value);
  void set_build(const char* value);
  void set_build(const char* value, size_t size);
  std::string* mutable_build();
  std::string* release_build();
  void set_allocated_build(std::string* build);
  private:
  const std::string& _internal_build() const;
  void _internal_set_build(const std::string& value);
  std::string* _internal_mutable_build();
  public:

  // string number = 3;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string hash = 5;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.Firmware)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class Metadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.Metadata) */ {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return CreateMaybeMessage<Metadata>(nullptr);
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.Metadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorsFieldNumber = 5,
    kModulesFieldNumber = 6,
    kDeviceIdFieldNumber = 1,
    kGitFieldNumber = 3,
    kBuildFieldNumber = 7,
    kGenerationFieldNumber = 9,
    kFirmwareFieldNumber = 8,
    kTimeFieldNumber = 2,
    kResetCauseFieldNumber = 4,
  };
  // repeated .fk_data.SensorInfo sensors = 5;
  int sensors_size() const;
  private:
  int _internal_sensors_size() const;
  public:
  void clear_sensors();
  ::fk_data::SensorInfo* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo >*
      mutable_sensors();
  private:
  const ::fk_data::SensorInfo& _internal_sensors(int index) const;
  ::fk_data::SensorInfo* _internal_add_sensors();
  public:
  const ::fk_data::SensorInfo& sensors(int index) const;
  ::fk_data::SensorInfo* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo >&
      sensors() const;

  // repeated .fk_data.ModuleInfo modules = 6;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  ::fk_data::ModuleInfo* mutable_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo >*
      mutable_modules();
  private:
  const ::fk_data::ModuleInfo& _internal_modules(int index) const;
  ::fk_data::ModuleInfo* _internal_add_modules();
  public:
  const ::fk_data::ModuleInfo& modules(int index) const;
  ::fk_data::ModuleInfo* add_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo >&
      modules() const;

  // bytes deviceId = 1;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string git = 3;
  void clear_git();
  const std::string& git() const;
  void set_git(const std::string& value);
  void set_git(std::string&& value);
  void set_git(const char* value);
  void set_git(const char* value, size_t size);
  std::string* mutable_git();
  std::string* release_git();
  void set_allocated_git(std::string* git);
  private:
  const std::string& _internal_git() const;
  void _internal_set_git(const std::string& value);
  std::string* _internal_mutable_git();
  public:

  // string build = 7;
  void clear_build();
  const std::string& build() const;
  void set_build(const std::string& value);
  void set_build(std::string&& value);
  void set_build(const char* value);
  void set_build(const char* value, size_t size);
  std::string* mutable_build();
  std::string* release_build();
  void set_allocated_build(std::string* build);
  private:
  const std::string& _internal_build() const;
  void _internal_set_build(const std::string& value);
  std::string* _internal_mutable_build();
  public:

  // bytes generation = 9;
  void clear_generation();
  const std::string& generation() const;
  void set_generation(const std::string& value);
  void set_generation(std::string&& value);
  void set_generation(const char* value);
  void set_generation(const void* value, size_t size);
  std::string* mutable_generation();
  std::string* release_generation();
  void set_allocated_generation(std::string* generation);
  private:
  const std::string& _internal_generation() const;
  void _internal_set_generation(const std::string& value);
  std::string* _internal_mutable_generation();
  public:

  // .fk_data.Firmware firmware = 8;
  bool has_firmware() const;
  private:
  bool _internal_has_firmware() const;
  public:
  void clear_firmware();
  const ::fk_data::Firmware& firmware() const;
  ::fk_data::Firmware* release_firmware();
  ::fk_data::Firmware* mutable_firmware();
  void set_allocated_firmware(::fk_data::Firmware* firmware);
  private:
  const ::fk_data::Firmware& _internal_firmware() const;
  ::fk_data::Firmware* _internal_mutable_firmware();
  public:

  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 resetCause = 4;
  void clear_resetcause();
  ::PROTOBUF_NAMESPACE_ID::uint32 resetcause() const;
  void set_resetcause(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_resetcause() const;
  void _internal_set_resetcause(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.Metadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo > sensors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo > modules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr generation_;
  ::fk_data::Firmware* firmware_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resetcause_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class Status :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.Status";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kUptimeFieldNumber = 2,
    kBatteryFieldNumber = 3,
    kBusyFieldNumber = 5,
    kMemoryFieldNumber = 4,
  };
  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uptime = 2;
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::uint32 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float battery = 3;
  void clear_battery();
  float battery() const;
  void set_battery(float value);
  private:
  float _internal_battery() const;
  void _internal_set_battery(float value);
  public:

  // uint64 busy = 5;
  void clear_busy();
  ::PROTOBUF_NAMESPACE_ID::uint64 busy() const;
  void set_busy(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_busy() const;
  void _internal_set_busy(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 memory = 4;
  void clear_memory();
  ::PROTOBUF_NAMESPACE_ID::uint32 memory() const;
  void set_memory(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_memory() const;
  void _internal_set_memory(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.Status)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uptime_;
  float battery_;
  ::PROTOBUF_NAMESPACE_ID::uint64 busy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 memory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class LogMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.LogMessage) */ {
 public:
  LogMessage();
  virtual ~LogMessage();

  LogMessage(const LogMessage& from);
  LogMessage(LogMessage&& from) noexcept
    : LogMessage() {
    *this = ::std::move(from);
  }

  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMessage& operator=(LogMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMessage* internal_default_instance() {
    return reinterpret_cast<const LogMessage*>(
               &_LogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LogMessage& a, LogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMessage* New() const final {
    return CreateMaybeMessage<LogMessage>(nullptr);
  }

  LogMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogMessage& from);
  void MergeFrom(const LogMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.LogMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacilityFieldNumber = 4,
    kMessageFieldNumber = 5,
    kTimeFieldNumber = 1,
    kUptimeFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // string facility = 4;
  void clear_facility();
  const std::string& facility() const;
  void set_facility(const std::string& value);
  void set_facility(std::string&& value);
  void set_facility(const char* value);
  void set_facility(const char* value, size_t size);
  std::string* mutable_facility();
  std::string* release_facility();
  void set_allocated_facility(std::string* facility);
  private:
  const std::string& _internal_facility() const;
  void _internal_set_facility(const std::string& value);
  std::string* _internal_mutable_facility();
  public:

  // string message = 5;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uptime = 2;
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::uint32 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.LogMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facility_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uptime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class SensorGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.SensorGroup) */ {
 public:
  SensorGroup();
  virtual ~SensorGroup();

  SensorGroup(const SensorGroup& from);
  SensorGroup(SensorGroup&& from) noexcept
    : SensorGroup() {
    *this = ::std::move(from);
  }

  inline SensorGroup& operator=(const SensorGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorGroup& operator=(SensorGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorGroup* internal_default_instance() {
    return reinterpret_cast<const SensorGroup*>(
               &_SensorGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SensorGroup& a, SensorGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorGroup* New() const final {
    return CreateMaybeMessage<SensorGroup>(nullptr);
  }

  SensorGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorGroup& from);
  void MergeFrom(const SensorGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.SensorGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadingsFieldNumber = 2,
    kModuleFieldNumber = 1,
  };
  // repeated .fk_data.SensorAndValue readings = 2;
  int readings_size() const;
  private:
  int _internal_readings_size() const;
  public:
  void clear_readings();
  ::fk_data::SensorAndValue* mutable_readings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorAndValue >*
      mutable_readings();
  private:
  const ::fk_data::SensorAndValue& _internal_readings(int index) const;
  ::fk_data::SensorAndValue* _internal_add_readings();
  public:
  const ::fk_data::SensorAndValue& readings(int index) const;
  ::fk_data::SensorAndValue* add_readings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorAndValue >&
      readings() const;

  // uint32 module = 1;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.SensorGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorAndValue > readings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class Readings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.Readings) */ {
 public:
  Readings();
  virtual ~Readings();

  Readings(const Readings& from);
  Readings(Readings&& from) noexcept
    : Readings() {
    *this = ::std::move(from);
  }

  inline Readings& operator=(const Readings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Readings& operator=(Readings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Readings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Readings* internal_default_instance() {
    return reinterpret_cast<const Readings*>(
               &_Readings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Readings& a, Readings& b) {
    a.Swap(&b);
  }
  inline void Swap(Readings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Readings* New() const final {
    return CreateMaybeMessage<Readings>(nullptr);
  }

  Readings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Readings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Readings& from);
  void MergeFrom(const Readings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Readings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.Readings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorGroupsFieldNumber = 5,
    kLocationFieldNumber = 4,
    kTimeFieldNumber = 1,
    kReadingFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kMetaFieldNumber = 6,
    kUptimeFieldNumber = 7,
  };
  // repeated .fk_data.SensorGroup sensorGroups = 5;
  int sensorgroups_size() const;
  private:
  int _internal_sensorgroups_size() const;
  public:
  void clear_sensorgroups();
  ::fk_data::SensorGroup* mutable_sensorgroups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorGroup >*
      mutable_sensorgroups();
  private:
  const ::fk_data::SensorGroup& _internal_sensorgroups(int index) const;
  ::fk_data::SensorGroup* _internal_add_sensorgroups();
  public:
  const ::fk_data::SensorGroup& sensorgroups(int index) const;
  ::fk_data::SensorGroup* add_sensorgroups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorGroup >&
      sensorgroups() const;

  // .fk_data.DeviceLocation location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::fk_data::DeviceLocation& location() const;
  ::fk_data::DeviceLocation* release_location();
  ::fk_data::DeviceLocation* mutable_location();
  void set_allocated_location(::fk_data::DeviceLocation* location);
  private:
  const ::fk_data::DeviceLocation& _internal_location() const;
  ::fk_data::DeviceLocation* _internal_mutable_location();
  public:

  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 reading = 2;
  void clear_reading();
  ::PROTOBUF_NAMESPACE_ID::uint32 reading() const;
  void set_reading(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reading() const;
  void _internal_set_reading(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 meta = 6;
  void clear_meta();
  ::PROTOBUF_NAMESPACE_ID::uint32 meta() const;
  void set_meta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meta() const;
  void _internal_set_meta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uptime = 7;
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::uint32 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.Readings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorGroup > sensorgroups_;
  ::fk_data::DeviceLocation* location_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reading_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class JobSchedule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.JobSchedule) */ {
 public:
  JobSchedule();
  virtual ~JobSchedule();

  JobSchedule(const JobSchedule& from);
  JobSchedule(JobSchedule&& from) noexcept
    : JobSchedule() {
    *this = ::std::move(from);
  }

  inline JobSchedule& operator=(const JobSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobSchedule& operator=(JobSchedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobSchedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobSchedule* internal_default_instance() {
    return reinterpret_cast<const JobSchedule*>(
               &_JobSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(JobSchedule& a, JobSchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(JobSchedule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobSchedule* New() const final {
    return CreateMaybeMessage<JobSchedule>(nullptr);
  }

  JobSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobSchedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobSchedule& from);
  void MergeFrom(const JobSchedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobSchedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.JobSchedule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCronFieldNumber = 1,
    kIntervalFieldNumber = 2,
    kRepeatedFieldNumber = 3,
  };
  // bytes cron = 1;
  void clear_cron();
  const std::string& cron() const;
  void set_cron(const std::string& value);
  void set_cron(std::string&& value);
  void set_cron(const char* value);
  void set_cron(const void* value, size_t size);
  std::string* mutable_cron();
  std::string* release_cron();
  void set_allocated_cron(std::string* cron);
  private:
  const std::string& _internal_cron() const;
  void _internal_set_cron(const std::string& value);
  std::string* _internal_mutable_cron();
  public:

  // uint32 interval = 2;
  void clear_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 interval() const;
  void set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interval() const;
  void _internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 repeated = 3;
  void clear_repeated();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated() const;
  void set_repeated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeated() const;
  void _internal_set_repeated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.JobSchedule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cron_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class Schedule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.Schedule) */ {
 public:
  Schedule();
  virtual ~Schedule();

  Schedule(const Schedule& from);
  Schedule(Schedule&& from) noexcept
    : Schedule() {
    *this = ::std::move(from);
  }

  inline Schedule& operator=(const Schedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Schedule& operator=(Schedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Schedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Schedule* internal_default_instance() {
    return reinterpret_cast<const Schedule*>(
               &_Schedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Schedule& a, Schedule& b) {
    a.Swap(&b);
  }
  inline void Swap(Schedule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Schedule* New() const final {
    return CreateMaybeMessage<Schedule>(nullptr);
  }

  Schedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Schedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Schedule& from);
  void MergeFrom(const Schedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.Schedule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadingsFieldNumber = 1,
    kNetworkFieldNumber = 2,
    kLoraFieldNumber = 3,
    kGpsFieldNumber = 4,
  };
  // .fk_data.JobSchedule readings = 1;
  bool has_readings() const;
  private:
  bool _internal_has_readings() const;
  public:
  void clear_readings();
  const ::fk_data::JobSchedule& readings() const;
  ::fk_data::JobSchedule* release_readings();
  ::fk_data::JobSchedule* mutable_readings();
  void set_allocated_readings(::fk_data::JobSchedule* readings);
  private:
  const ::fk_data::JobSchedule& _internal_readings() const;
  ::fk_data::JobSchedule* _internal_mutable_readings();
  public:

  // .fk_data.JobSchedule network = 2;
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::fk_data::JobSchedule& network() const;
  ::fk_data::JobSchedule* release_network();
  ::fk_data::JobSchedule* mutable_network();
  void set_allocated_network(::fk_data::JobSchedule* network);
  private:
  const ::fk_data::JobSchedule& _internal_network() const;
  ::fk_data::JobSchedule* _internal_mutable_network();
  public:

  // .fk_data.JobSchedule lora = 3;
  bool has_lora() const;
  private:
  bool _internal_has_lora() const;
  public:
  void clear_lora();
  const ::fk_data::JobSchedule& lora() const;
  ::fk_data::JobSchedule* release_lora();
  ::fk_data::JobSchedule* mutable_lora();
  void set_allocated_lora(::fk_data::JobSchedule* lora);
  private:
  const ::fk_data::JobSchedule& _internal_lora() const;
  ::fk_data::JobSchedule* _internal_mutable_lora();
  public:

  // .fk_data.JobSchedule gps = 4;
  bool has_gps() const;
  private:
  bool _internal_has_gps() const;
  public:
  void clear_gps();
  const ::fk_data::JobSchedule& gps() const;
  ::fk_data::JobSchedule* release_gps();
  ::fk_data::JobSchedule* mutable_gps();
  void set_allocated_gps(::fk_data::JobSchedule* gps);
  private:
  const ::fk_data::JobSchedule& _internal_gps() const;
  ::fk_data::JobSchedule* _internal_mutable_gps();
  public:

  // @@protoc_insertion_point(class_scope:fk_data.Schedule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::fk_data::JobSchedule* readings_;
  ::fk_data::JobSchedule* network_;
  ::fk_data::JobSchedule* lora_;
  ::fk_data::JobSchedule* gps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class Identity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }
  inline void Swap(Identity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(nullptr);
  }

  Identity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.Identity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:fk_data.Identity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class Condition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.Condition) */ {
 public:
  Condition();
  virtual ~Condition();

  Condition(const Condition& from);
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Condition& operator=(Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Condition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Condition* New() const final {
    return CreateMaybeMessage<Condition>(nullptr);
  }

  Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.Condition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kRecordingFieldNumber = 2,
  };
  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 recording = 2;
  void clear_recording();
  ::PROTOBUF_NAMESPACE_ID::uint32 recording() const;
  void set_recording(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recording() const;
  void _internal_set_recording(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.Condition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recording_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class NetworkInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.NetworkInfo) */ {
 public:
  NetworkInfo();
  virtual ~NetworkInfo();

  NetworkInfo(const NetworkInfo& from);
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfo* New() const final {
    return CreateMaybeMessage<NetworkInfo>(nullptr);
  }

  NetworkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.NetworkInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:fk_data.NetworkInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class NetworkSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.NetworkSettings) */ {
 public:
  NetworkSettings();
  virtual ~NetworkSettings();

  NetworkSettings(const NetworkSettings& from);
  NetworkSettings(NetworkSettings&& from) noexcept
    : NetworkSettings() {
    *this = ::std::move(from);
  }

  inline NetworkSettings& operator=(const NetworkSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkSettings& operator=(NetworkSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkSettings* internal_default_instance() {
    return reinterpret_cast<const NetworkSettings*>(
               &_NetworkSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(NetworkSettings& a, NetworkSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkSettings* New() const final {
    return CreateMaybeMessage<NetworkSettings>(nullptr);
  }

  NetworkSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkSettings& from);
  void MergeFrom(const NetworkSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.NetworkSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworksFieldNumber = 1,
  };
  // repeated .fk_data.NetworkInfo networks = 1;
  int networks_size() const;
  private:
  int _internal_networks_size() const;
  public:
  void clear_networks();
  ::fk_data::NetworkInfo* mutable_networks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::NetworkInfo >*
      mutable_networks();
  private:
  const ::fk_data::NetworkInfo& _internal_networks(int index) const;
  ::fk_data::NetworkInfo* _internal_add_networks();
  public:
  const ::fk_data::NetworkInfo& networks(int index) const;
  ::fk_data::NetworkInfo* add_networks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::NetworkInfo >&
      networks() const;

  // @@protoc_insertion_point(class_scope:fk_data.NetworkSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::NetworkInfo > networks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class LoraSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.LoraSettings) */ {
 public:
  LoraSettings();
  virtual ~LoraSettings();

  LoraSettings(const LoraSettings& from);
  LoraSettings(LoraSettings&& from) noexcept
    : LoraSettings() {
    *this = ::std::move(from);
  }

  inline LoraSettings& operator=(const LoraSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoraSettings& operator=(LoraSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoraSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoraSettings* internal_default_instance() {
    return reinterpret_cast<const LoraSettings*>(
               &_LoraSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LoraSettings& a, LoraSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(LoraSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoraSettings* New() const final {
    return CreateMaybeMessage<LoraSettings>(nullptr);
  }

  LoraSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoraSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoraSettings& from);
  void MergeFrom(const LoraSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoraSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.LoraSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceEuiFieldNumber = 1,
    kAppKeyFieldNumber = 2,
    kAppEuiFieldNumber = 3,
    kDeviceAddressFieldNumber = 5,
    kNetworkSessionKeyFieldNumber = 6,
    kAppSessionKeyFieldNumber = 7,
    kFrequencyBandFieldNumber = 4,
    kUplinkCounterFieldNumber = 8,
    kDownlinkCounterFieldNumber = 9,
  };
  // bytes deviceEui = 1;
  void clear_deviceeui();
  const std::string& deviceeui() const;
  void set_deviceeui(const std::string& value);
  void set_deviceeui(std::string&& value);
  void set_deviceeui(const char* value);
  void set_deviceeui(const void* value, size_t size);
  std::string* mutable_deviceeui();
  std::string* release_deviceeui();
  void set_allocated_deviceeui(std::string* deviceeui);
  private:
  const std::string& _internal_deviceeui() const;
  void _internal_set_deviceeui(const std::string& value);
  std::string* _internal_mutable_deviceeui();
  public:

  // bytes appKey = 2;
  void clear_appkey();
  const std::string& appkey() const;
  void set_appkey(const std::string& value);
  void set_appkey(std::string&& value);
  void set_appkey(const char* value);
  void set_appkey(const void* value, size_t size);
  std::string* mutable_appkey();
  std::string* release_appkey();
  void set_allocated_appkey(std::string* appkey);
  private:
  const std::string& _internal_appkey() const;
  void _internal_set_appkey(const std::string& value);
  std::string* _internal_mutable_appkey();
  public:

  // bytes appEui = 3;
  void clear_appeui();
  const std::string& appeui() const;
  void set_appeui(const std::string& value);
  void set_appeui(std::string&& value);
  void set_appeui(const char* value);
  void set_appeui(const void* value, size_t size);
  std::string* mutable_appeui();
  std::string* release_appeui();
  void set_allocated_appeui(std::string* appeui);
  private:
  const std::string& _internal_appeui() const;
  void _internal_set_appeui(const std::string& value);
  std::string* _internal_mutable_appeui();
  public:

  // bytes deviceAddress = 5;
  void clear_deviceaddress();
  const std::string& deviceaddress() const;
  void set_deviceaddress(const std::string& value);
  void set_deviceaddress(std::string&& value);
  void set_deviceaddress(const char* value);
  void set_deviceaddress(const void* value, size_t size);
  std::string* mutable_deviceaddress();
  std::string* release_deviceaddress();
  void set_allocated_deviceaddress(std::string* deviceaddress);
  private:
  const std::string& _internal_deviceaddress() const;
  void _internal_set_deviceaddress(const std::string& value);
  std::string* _internal_mutable_deviceaddress();
  public:

  // bytes networkSessionKey = 6;
  void clear_networksessionkey();
  const std::string& networksessionkey() const;
  void set_networksessionkey(const std::string& value);
  void set_networksessionkey(std::string&& value);
  void set_networksessionkey(const char* value);
  void set_networksessionkey(const void* value, size_t size);
  std::string* mutable_networksessionkey();
  std::string* release_networksessionkey();
  void set_allocated_networksessionkey(std::string* networksessionkey);
  private:
  const std::string& _internal_networksessionkey() const;
  void _internal_set_networksessionkey(const std::string& value);
  std::string* _internal_mutable_networksessionkey();
  public:

  // bytes appSessionKey = 7;
  void clear_appsessionkey();
  const std::string& appsessionkey() const;
  void set_appsessionkey(const std::string& value);
  void set_appsessionkey(std::string&& value);
  void set_appsessionkey(const char* value);
  void set_appsessionkey(const void* value, size_t size);
  std::string* mutable_appsessionkey();
  std::string* release_appsessionkey();
  void set_allocated_appsessionkey(std::string* appsessionkey);
  private:
  const std::string& _internal_appsessionkey() const;
  void _internal_set_appsessionkey(const std::string& value);
  std::string* _internal_mutable_appsessionkey();
  public:

  // uint32 frequencyBand = 4;
  void clear_frequencyband();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequencyband() const;
  void set_frequencyband(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequencyband() const;
  void _internal_set_frequencyband(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uplinkCounter = 8;
  void clear_uplinkcounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplinkcounter() const;
  void set_uplinkcounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplinkcounter() const;
  void _internal_set_uplinkcounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 downlinkCounter = 9;
  void clear_downlinkcounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 downlinkcounter() const;
  void set_downlinkcounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_downlinkcounter() const;
  void _internal_set_downlinkcounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.LoraSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceeui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appeui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networksessionkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appsessionkey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequencyband_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplinkcounter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 downlinkcounter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class DataRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.DataRecord) */ {
 public:
  DataRecord();
  virtual ~DataRecord();

  DataRecord(const DataRecord& from);
  DataRecord(DataRecord&& from) noexcept
    : DataRecord() {
    *this = ::std::move(from);
  }

  inline DataRecord& operator=(const DataRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRecord& operator=(DataRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRecord* internal_default_instance() {
    return reinterpret_cast<const DataRecord*>(
               &_DataRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DataRecord& a, DataRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRecord* New() const final {
    return CreateMaybeMessage<DataRecord>(nullptr);
  }

  DataRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRecord& from);
  void MergeFrom(const DataRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.DataRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 6,
    kLogsFieldNumber = 13,
    kLoggedReadingFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kLogFieldNumber = 3,
    kStatusFieldNumber = 4,
    kReadingsFieldNumber = 5,
    kScheduleFieldNumber = 7,
    kIdentityFieldNumber = 9,
    kConditionFieldNumber = 10,
    kLoraFieldNumber = 11,
    kNetworkFieldNumber = 12,
    kMetaFieldNumber = 8,
  };
  // repeated .fk_data.ModuleInfo modules = 6;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  ::fk_data::ModuleInfo* mutable_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo >*
      mutable_modules();
  private:
  const ::fk_data::ModuleInfo& _internal_modules(int index) const;
  ::fk_data::ModuleInfo* _internal_add_modules();
  public:
  const ::fk_data::ModuleInfo& modules(int index) const;
  ::fk_data::ModuleInfo* add_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo >&
      modules() const;

  // repeated .fk_data.LogMessage logs = 13;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::fk_data::LogMessage* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::LogMessage >*
      mutable_logs();
  private:
  const ::fk_data::LogMessage& _internal_logs(int index) const;
  ::fk_data::LogMessage* _internal_add_logs();
  public:
  const ::fk_data::LogMessage& logs(int index) const;
  ::fk_data::LogMessage* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::LogMessage >&
      logs() const;

  // .fk_data.LoggedReading loggedReading = 1;
  bool has_loggedreading() const;
  private:
  bool _internal_has_loggedreading() const;
  public:
  void clear_loggedreading();
  const ::fk_data::LoggedReading& loggedreading() const;
  ::fk_data::LoggedReading* release_loggedreading();
  ::fk_data::LoggedReading* mutable_loggedreading();
  void set_allocated_loggedreading(::fk_data::LoggedReading* loggedreading);
  private:
  const ::fk_data::LoggedReading& _internal_loggedreading() const;
  ::fk_data::LoggedReading* _internal_mutable_loggedreading();
  public:

  // .fk_data.Metadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::fk_data::Metadata& metadata() const;
  ::fk_data::Metadata* release_metadata();
  ::fk_data::Metadata* mutable_metadata();
  void set_allocated_metadata(::fk_data::Metadata* metadata);
  private:
  const ::fk_data::Metadata& _internal_metadata() const;
  ::fk_data::Metadata* _internal_mutable_metadata();
  public:

  // .fk_data.LogMessage log = 3;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::fk_data::LogMessage& log() const;
  ::fk_data::LogMessage* release_log();
  ::fk_data::LogMessage* mutable_log();
  void set_allocated_log(::fk_data::LogMessage* log);
  private:
  const ::fk_data::LogMessage& _internal_log() const;
  ::fk_data::LogMessage* _internal_mutable_log();
  public:

  // .fk_data.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::fk_data::Status& status() const;
  ::fk_data::Status* release_status();
  ::fk_data::Status* mutable_status();
  void set_allocated_status(::fk_data::Status* status);
  private:
  const ::fk_data::Status& _internal_status() const;
  ::fk_data::Status* _internal_mutable_status();
  public:

  // .fk_data.Readings readings = 5;
  bool has_readings() const;
  private:
  bool _internal_has_readings() const;
  public:
  void clear_readings();
  const ::fk_data::Readings& readings() const;
  ::fk_data::Readings* release_readings();
  ::fk_data::Readings* mutable_readings();
  void set_allocated_readings(::fk_data::Readings* readings);
  private:
  const ::fk_data::Readings& _internal_readings() const;
  ::fk_data::Readings* _internal_mutable_readings();
  public:

  // .fk_data.Schedule schedule = 7;
  bool has_schedule() const;
  private:
  bool _internal_has_schedule() const;
  public:
  void clear_schedule();
  const ::fk_data::Schedule& schedule() const;
  ::fk_data::Schedule* release_schedule();
  ::fk_data::Schedule* mutable_schedule();
  void set_allocated_schedule(::fk_data::Schedule* schedule);
  private:
  const ::fk_data::Schedule& _internal_schedule() const;
  ::fk_data::Schedule* _internal_mutable_schedule();
  public:

  // .fk_data.Identity identity = 9;
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;
  public:
  void clear_identity();
  const ::fk_data::Identity& identity() const;
  ::fk_data::Identity* release_identity();
  ::fk_data::Identity* mutable_identity();
  void set_allocated_identity(::fk_data::Identity* identity);
  private:
  const ::fk_data::Identity& _internal_identity() const;
  ::fk_data::Identity* _internal_mutable_identity();
  public:

  // .fk_data.Condition condition = 10;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::fk_data::Condition& condition() const;
  ::fk_data::Condition* release_condition();
  ::fk_data::Condition* mutable_condition();
  void set_allocated_condition(::fk_data::Condition* condition);
  private:
  const ::fk_data::Condition& _internal_condition() const;
  ::fk_data::Condition* _internal_mutable_condition();
  public:

  // .fk_data.LoraSettings lora = 11;
  bool has_lora() const;
  private:
  bool _internal_has_lora() const;
  public:
  void clear_lora();
  const ::fk_data::LoraSettings& lora() const;
  ::fk_data::LoraSettings* release_lora();
  ::fk_data::LoraSettings* mutable_lora();
  void set_allocated_lora(::fk_data::LoraSettings* lora);
  private:
  const ::fk_data::LoraSettings& _internal_lora() const;
  ::fk_data::LoraSettings* _internal_mutable_lora();
  public:

  // .fk_data.NetworkSettings network = 12;
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::fk_data::NetworkSettings& network() const;
  ::fk_data::NetworkSettings* release_network();
  ::fk_data::NetworkSettings* mutable_network();
  void set_allocated_network(::fk_data::NetworkSettings* network);
  private:
  const ::fk_data::NetworkSettings& _internal_network() const;
  ::fk_data::NetworkSettings* _internal_mutable_network();
  public:

  // uint64 meta = 8;
  void clear_meta();
  ::PROTOBUF_NAMESPACE_ID::uint64 meta() const;
  void set_meta(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_meta() const;
  void _internal_set_meta(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.DataRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo > modules_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::LogMessage > logs_;
  ::fk_data::LoggedReading* loggedreading_;
  ::fk_data::Metadata* metadata_;
  ::fk_data::LogMessage* log_;
  ::fk_data::Status* status_;
  ::fk_data::Readings* readings_;
  ::fk_data::Schedule* schedule_;
  ::fk_data::Identity* identity_;
  ::fk_data::Condition* condition_;
  ::fk_data::LoraSettings* lora_;
  ::fk_data::NetworkSettings* network_;
  ::PROTOBUF_NAMESPACE_ID::uint64 meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class SignedRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.SignedRecord) */ {
 public:
  SignedRecord();
  virtual ~SignedRecord();

  SignedRecord(const SignedRecord& from);
  SignedRecord(SignedRecord&& from) noexcept
    : SignedRecord() {
    *this = ::std::move(from);
  }

  inline SignedRecord& operator=(const SignedRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedRecord& operator=(SignedRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedRecord* internal_default_instance() {
    return reinterpret_cast<const SignedRecord*>(
               &_SignedRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SignedRecord& a, SignedRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedRecord* New() const final {
    return CreateMaybeMessage<SignedRecord>(nullptr);
  }

  SignedRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedRecord& from);
  void MergeFrom(const SignedRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.SignedRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kHashFieldNumber = 4,
    kTimeFieldNumber = 2,
    kRecordFieldNumber = 5,
    kKindFieldNumber = 1,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes hash = 4;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 record = 5;
  void clear_record();
  ::PROTOBUF_NAMESPACE_ID::uint64 record() const;
  void set_record(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_record() const;
  void _internal_set_record(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .fk_data.SignedRecordKind kind = 1;
  void clear_kind();
  ::fk_data::SignedRecordKind kind() const;
  void set_kind(::fk_data::SignedRecordKind value);
  private:
  ::fk_data::SignedRecordKind _internal_kind() const;
  void _internal_set_kind(::fk_data::SignedRecordKind value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.SignedRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 record_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// -------------------------------------------------------------------

class LoraRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fk_data.LoraRecord) */ {
 public:
  LoraRecord();
  virtual ~LoraRecord();

  LoraRecord(const LoraRecord& from);
  LoraRecord(LoraRecord&& from) noexcept
    : LoraRecord() {
    *this = ::std::move(from);
  }

  inline LoraRecord& operator=(const LoraRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoraRecord& operator=(LoraRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoraRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoraRecord* internal_default_instance() {
    return reinterpret_cast<const LoraRecord*>(
               &_LoraRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(LoraRecord& a, LoraRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LoraRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoraRecord* New() const final {
    return CreateMaybeMessage<LoraRecord>(nullptr);
  }

  LoraRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoraRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoraRecord& from);
  void MergeFrom(const LoraRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoraRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fk_data.LoraRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fk_2ddata_2eproto);
    return ::descriptor_table_fk_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 6,
    kDeviceIdFieldNumber = 1,
    kDataFieldNumber = 7,
    kTimeFieldNumber = 2,
    kNumberFieldNumber = 3,
    kSensorFieldNumber = 5,
    kModuleFieldNumber = 4,
  };
  // repeated float values = 6;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // bytes deviceId = 1;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 number = 3;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sensor = 5;
  void clear_sensor();
  ::PROTOBUF_NAMESPACE_ID::uint64 sensor() const;
  void set_sensor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sensor() const;
  void _internal_set_sensor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 module = 4;
  void clear_module();
  ::PROTOBUF_NAMESPACE_ID::uint32 module() const;
  void set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module() const;
  void _internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fk_data.LoraRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sensor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fk_2ddata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceLocation

// uint32 enabled = 7;
inline void DeviceLocation::clear_enabled() {
  enabled_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceLocation::_internal_enabled() const {
  return enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceLocation::enabled() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.enabled)
  return _internal_enabled();
}
inline void DeviceLocation::_internal_set_enabled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  enabled_ = value;
}
inline void DeviceLocation::set_enabled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.enabled)
}

// uint32 fix = 1;
inline void DeviceLocation::clear_fix() {
  fix_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceLocation::_internal_fix() const {
  return fix_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceLocation::fix() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.fix)
  return _internal_fix();
}
inline void DeviceLocation::_internal_set_fix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fix_ = value;
}
inline void DeviceLocation::set_fix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fix(value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.fix)
}

// int64 time = 2;
inline void DeviceLocation::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceLocation::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceLocation::time() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.time)
  return _internal_time();
}
inline void DeviceLocation::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void DeviceLocation::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.time)
}

// float longitude = 3;
inline void DeviceLocation::clear_longitude() {
  longitude_ = 0;
}
inline float DeviceLocation::_internal_longitude() const {
  return longitude_;
}
inline float DeviceLocation::longitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.longitude)
  return _internal_longitude();
}
inline void DeviceLocation::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void DeviceLocation::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.longitude)
}

// float latitude = 4;
inline void DeviceLocation::clear_latitude() {
  latitude_ = 0;
}
inline float DeviceLocation::_internal_latitude() const {
  return latitude_;
}
inline float DeviceLocation::latitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.latitude)
  return _internal_latitude();
}
inline void DeviceLocation::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void DeviceLocation::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.latitude)
}

// float altitude = 5;
inline void DeviceLocation::clear_altitude() {
  altitude_ = 0;
}
inline float DeviceLocation::_internal_altitude() const {
  return altitude_;
}
inline float DeviceLocation::altitude() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.altitude)
  return _internal_altitude();
}
inline void DeviceLocation::_internal_set_altitude(float value) {
  
  altitude_ = value;
}
inline void DeviceLocation::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.altitude)
}

// repeated float coordinates = 6;
inline int DeviceLocation::_internal_coordinates_size() const {
  return coordinates_.size();
}
inline int DeviceLocation::coordinates_size() const {
  return _internal_coordinates_size();
}
inline void DeviceLocation::clear_coordinates() {
  coordinates_.Clear();
}
inline float DeviceLocation::_internal_coordinates(int index) const {
  return coordinates_.Get(index);
}
inline float DeviceLocation::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.coordinates)
  return _internal_coordinates(index);
}
inline void DeviceLocation::set_coordinates(int index, float value) {
  coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.coordinates)
}
inline void DeviceLocation::_internal_add_coordinates(float value) {
  coordinates_.Add(value);
}
inline void DeviceLocation::add_coordinates(float value) {
  _internal_add_coordinates(value);
  // @@protoc_insertion_point(field_add:fk_data.DeviceLocation.coordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeviceLocation::_internal_coordinates() const {
  return coordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeviceLocation::coordinates() const {
  // @@protoc_insertion_point(field_list:fk_data.DeviceLocation.coordinates)
  return _internal_coordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeviceLocation::_internal_mutable_coordinates() {
  return &coordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeviceLocation::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.DeviceLocation.coordinates)
  return _internal_mutable_coordinates();
}

// uint32 satellites = 8;
inline void DeviceLocation::clear_satellites() {
  satellites_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceLocation::_internal_satellites() const {
  return satellites_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceLocation::satellites() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.satellites)
  return _internal_satellites();
}
inline void DeviceLocation::_internal_set_satellites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  satellites_ = value;
}
inline void DeviceLocation::set_satellites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_satellites(value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.satellites)
}

// uint32 hdop = 9;
inline void DeviceLocation::clear_hdop() {
  hdop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceLocation::_internal_hdop() const {
  return hdop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceLocation::hdop() const {
  // @@protoc_insertion_point(field_get:fk_data.DeviceLocation.hdop)
  return _internal_hdop();
}
inline void DeviceLocation::_internal_set_hdop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hdop_ = value;
}
inline void DeviceLocation::set_hdop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hdop(value);
  // @@protoc_insertion_point(field_set:fk_data.DeviceLocation.hdop)
}

// -------------------------------------------------------------------

// SensorReading

// uint32 reading = 1;
inline void SensorReading::clear_reading() {
  reading_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorReading::_internal_reading() const {
  return reading_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorReading::reading() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.reading)
  return _internal_reading();
}
inline void SensorReading::_internal_set_reading(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reading_ = value;
}
inline void SensorReading::set_reading(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reading(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.reading)
}

// int64 time = 2;
inline void SensorReading::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorReading::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorReading::time() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.time)
  return _internal_time();
}
inline void SensorReading::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void SensorReading::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.time)
}

// uint32 sensor = 3;
inline void SensorReading::clear_sensor() {
  sensor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorReading::_internal_sensor() const {
  return sensor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorReading::sensor() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.sensor)
  return _internal_sensor();
}
inline void SensorReading::_internal_set_sensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sensor_ = value;
}
inline void SensorReading::set_sensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.sensor)
}

// float value = 4;
inline void SensorReading::clear_value() {
  value_ = 0;
}
inline float SensorReading::_internal_value() const {
  return value_;
}
inline float SensorReading::value() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorReading.value)
  return _internal_value();
}
inline void SensorReading::_internal_set_value(float value) {
  
  value_ = value;
}
inline void SensorReading::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorReading.value)
}

// -------------------------------------------------------------------

// LoggedReading

// uint32 version = 1;
inline void LoggedReading::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggedReading::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggedReading::version() const {
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.version)
  return _internal_version();
}
inline void LoggedReading::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void LoggedReading::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:fk_data.LoggedReading.version)
}

// .fk_data.DeviceLocation location = 2;
inline bool LoggedReading::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool LoggedReading::has_location() const {
  return _internal_has_location();
}
inline void LoggedReading::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::fk_data::DeviceLocation& LoggedReading::_internal_location() const {
  const ::fk_data::DeviceLocation* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::DeviceLocation*>(
      &::fk_data::_DeviceLocation_default_instance_);
}
inline const ::fk_data::DeviceLocation& LoggedReading::location() const {
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.location)
  return _internal_location();
}
inline ::fk_data::DeviceLocation* LoggedReading::release_location() {
  // @@protoc_insertion_point(field_release:fk_data.LoggedReading.location)
  
  ::fk_data::DeviceLocation* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::fk_data::DeviceLocation* LoggedReading::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::DeviceLocation>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::fk_data::DeviceLocation* LoggedReading::mutable_location() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoggedReading.location)
  return _internal_mutable_location();
}
inline void LoggedReading::set_allocated_location(::fk_data::DeviceLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoggedReading.location)
}

// .fk_data.SensorReading reading = 3;
inline bool LoggedReading::_internal_has_reading() const {
  return this != internal_default_instance() && reading_ != nullptr;
}
inline bool LoggedReading::has_reading() const {
  return _internal_has_reading();
}
inline void LoggedReading::clear_reading() {
  if (GetArenaNoVirtual() == nullptr && reading_ != nullptr) {
    delete reading_;
  }
  reading_ = nullptr;
}
inline const ::fk_data::SensorReading& LoggedReading::_internal_reading() const {
  const ::fk_data::SensorReading* p = reading_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::SensorReading*>(
      &::fk_data::_SensorReading_default_instance_);
}
inline const ::fk_data::SensorReading& LoggedReading::reading() const {
  // @@protoc_insertion_point(field_get:fk_data.LoggedReading.reading)
  return _internal_reading();
}
inline ::fk_data::SensorReading* LoggedReading::release_reading() {
  // @@protoc_insertion_point(field_release:fk_data.LoggedReading.reading)
  
  ::fk_data::SensorReading* temp = reading_;
  reading_ = nullptr;
  return temp;
}
inline ::fk_data::SensorReading* LoggedReading::_internal_mutable_reading() {
  
  if (reading_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::SensorReading>(GetArenaNoVirtual());
    reading_ = p;
  }
  return reading_;
}
inline ::fk_data::SensorReading* LoggedReading::mutable_reading() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoggedReading.reading)
  return _internal_mutable_reading();
}
inline void LoggedReading::set_allocated_reading(::fk_data::SensorReading* reading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reading_;
  }
  if (reading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reading, submessage_arena);
    }
    
  } else {
    
  }
  reading_ = reading;
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoggedReading.reading)
}

// -------------------------------------------------------------------

// SensorAndValue

// uint32 sensor = 1;
inline void SensorAndValue::clear_sensor() {
  sensor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorAndValue::_internal_sensor() const {
  return sensor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorAndValue::sensor() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorAndValue.sensor)
  return _internal_sensor();
}
inline void SensorAndValue::_internal_set_sensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sensor_ = value;
}
inline void SensorAndValue::set_sensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorAndValue.sensor)
}

// float value = 2;
inline void SensorAndValue::clear_value() {
  value_ = 0;
}
inline float SensorAndValue::_internal_value() const {
  return value_;
}
inline float SensorAndValue::value() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorAndValue.value)
  return _internal_value();
}
inline void SensorAndValue::_internal_set_value(float value) {
  
  value_ = value;
}
inline void SensorAndValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorAndValue.value)
}

// -------------------------------------------------------------------

// ModuleHeader

// uint32 manufacturer = 1;
inline void ModuleHeader::clear_manufacturer() {
  manufacturer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleHeader::_internal_manufacturer() const {
  return manufacturer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleHeader::manufacturer() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleHeader.manufacturer)
  return _internal_manufacturer();
}
inline void ModuleHeader::_internal_set_manufacturer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  manufacturer_ = value;
}
inline void ModuleHeader::set_manufacturer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_manufacturer(value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleHeader.manufacturer)
}

// uint32 kind = 2;
inline void ModuleHeader::clear_kind() {
  kind_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleHeader::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleHeader::kind() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleHeader.kind)
  return _internal_kind();
}
inline void ModuleHeader::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  kind_ = value;
}
inline void ModuleHeader::set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleHeader.kind)
}

// uint32 version = 3;
inline void ModuleHeader::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleHeader::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleHeader::version() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleHeader.version)
  return _internal_version();
}
inline void ModuleHeader::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void ModuleHeader::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleHeader.version)
}

// -------------------------------------------------------------------

// ModuleInfo

// uint32 position = 1;
inline void ModuleInfo::clear_position() {
  position_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleInfo::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleInfo::position() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.position)
  return _internal_position();
}
inline void ModuleInfo::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_ = value;
}
inline void ModuleInfo::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.position)
}

// uint32 address = 2;
inline void ModuleInfo::clear_address() {
  address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleInfo::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleInfo::address() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.address)
  return _internal_address();
}
inline void ModuleInfo::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  address_ = value;
}
inline void ModuleInfo::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.address)
}

// string name = 3;
inline void ModuleInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleInfo::name() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.name)
  return _internal_name();
}
inline void ModuleInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.name)
}
inline std::string* ModuleInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ModuleInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void ModuleInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.ModuleInfo.name)
}
inline void ModuleInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.ModuleInfo.name)
}
inline void ModuleInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.ModuleInfo.name)
}
inline std::string* ModuleInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleInfo::release_name() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.name)
}

// .fk_data.ModuleHeader header = 4;
inline bool ModuleInfo::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ModuleInfo::has_header() const {
  return _internal_has_header();
}
inline void ModuleInfo::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::fk_data::ModuleHeader& ModuleInfo::_internal_header() const {
  const ::fk_data::ModuleHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::ModuleHeader*>(
      &::fk_data::_ModuleHeader_default_instance_);
}
inline const ::fk_data::ModuleHeader& ModuleInfo::header() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.header)
  return _internal_header();
}
inline ::fk_data::ModuleHeader* ModuleInfo::release_header() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.header)
  
  ::fk_data::ModuleHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::fk_data::ModuleHeader* ModuleInfo::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::ModuleHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::fk_data::ModuleHeader* ModuleInfo::mutable_header() {
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.header)
  return _internal_mutable_header();
}
inline void ModuleInfo::set_allocated_header(::fk_data::ModuleHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.header)
}

// .fk_data.Firmware firmware = 5;
inline bool ModuleInfo::_internal_has_firmware() const {
  return this != internal_default_instance() && firmware_ != nullptr;
}
inline bool ModuleInfo::has_firmware() const {
  return _internal_has_firmware();
}
inline void ModuleInfo::clear_firmware() {
  if (GetArenaNoVirtual() == nullptr && firmware_ != nullptr) {
    delete firmware_;
  }
  firmware_ = nullptr;
}
inline const ::fk_data::Firmware& ModuleInfo::_internal_firmware() const {
  const ::fk_data::Firmware* p = firmware_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::Firmware*>(
      &::fk_data::_Firmware_default_instance_);
}
inline const ::fk_data::Firmware& ModuleInfo::firmware() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.firmware)
  return _internal_firmware();
}
inline ::fk_data::Firmware* ModuleInfo::release_firmware() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.firmware)
  
  ::fk_data::Firmware* temp = firmware_;
  firmware_ = nullptr;
  return temp;
}
inline ::fk_data::Firmware* ModuleInfo::_internal_mutable_firmware() {
  
  if (firmware_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::Firmware>(GetArenaNoVirtual());
    firmware_ = p;
  }
  return firmware_;
}
inline ::fk_data::Firmware* ModuleInfo::mutable_firmware() {
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.firmware)
  return _internal_mutable_firmware();
}
inline void ModuleInfo::set_allocated_firmware(::fk_data::Firmware* firmware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete firmware_;
  }
  if (firmware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      firmware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firmware, submessage_arena);
    }
    
  } else {
    
  }
  firmware_ = firmware;
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.firmware)
}

// repeated .fk_data.SensorInfo sensors = 6;
inline int ModuleInfo::_internal_sensors_size() const {
  return sensors_.size();
}
inline int ModuleInfo::sensors_size() const {
  return _internal_sensors_size();
}
inline void ModuleInfo::clear_sensors() {
  sensors_.Clear();
}
inline ::fk_data::SensorInfo* ModuleInfo::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.sensors)
  return sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo >*
ModuleInfo::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.ModuleInfo.sensors)
  return &sensors_;
}
inline const ::fk_data::SensorInfo& ModuleInfo::_internal_sensors(int index) const {
  return sensors_.Get(index);
}
inline const ::fk_data::SensorInfo& ModuleInfo::sensors(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.sensors)
  return _internal_sensors(index);
}
inline ::fk_data::SensorInfo* ModuleInfo::_internal_add_sensors() {
  return sensors_.Add();
}
inline ::fk_data::SensorInfo* ModuleInfo::add_sensors() {
  // @@protoc_insertion_point(field_add:fk_data.ModuleInfo.sensors)
  return _internal_add_sensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo >&
ModuleInfo::sensors() const {
  // @@protoc_insertion_point(field_list:fk_data.ModuleInfo.sensors)
  return sensors_;
}

// bytes id = 7;
inline void ModuleInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleInfo::id() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.id)
  return _internal_id();
}
inline void ModuleInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.id)
}
inline std::string* ModuleInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:fk_data.ModuleInfo.id)
  return _internal_mutable_id();
}
inline const std::string& ModuleInfo::_internal_id() const {
  return id_.GetNoArena();
}
inline void ModuleInfo::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.ModuleInfo.id)
}
inline void ModuleInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.ModuleInfo.id)
}
inline void ModuleInfo::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.ModuleInfo.id)
}
inline std::string* ModuleInfo::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleInfo::release_id() {
  // @@protoc_insertion_point(field_release:fk_data.ModuleInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fk_data.ModuleInfo.id)
}

// uint32 flags = 8;
inline void ModuleInfo::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleInfo::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModuleInfo::flags() const {
  // @@protoc_insertion_point(field_get:fk_data.ModuleInfo.flags)
  return _internal_flags();
}
inline void ModuleInfo::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void ModuleInfo::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:fk_data.ModuleInfo.flags)
}

// -------------------------------------------------------------------

// SensorInfo

// uint32 number = 1;
inline void SensorInfo::clear_number() {
  number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorInfo::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorInfo::number() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.number)
  return _internal_number();
}
inline void SensorInfo::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_ = value;
}
inline void SensorInfo::set_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.number)
}

// string name = 2;
inline void SensorInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorInfo::name() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.name)
  return _internal_name();
}
inline void SensorInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.name)
}
inline std::string* SensorInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fk_data.SensorInfo.name)
  return _internal_mutable_name();
}
inline const std::string& SensorInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void SensorInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SensorInfo.name)
}
inline void SensorInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SensorInfo.name)
}
inline void SensorInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SensorInfo.name)
}
inline std::string* SensorInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorInfo::release_name() {
  // @@protoc_insertion_point(field_release:fk_data.SensorInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SensorInfo.name)
}

// string unitOfMeasure = 3;
inline void SensorInfo::clear_unitofmeasure() {
  unitofmeasure_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorInfo::unitofmeasure() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.unitOfMeasure)
  return _internal_unitofmeasure();
}
inline void SensorInfo::set_unitofmeasure(const std::string& value) {
  _internal_set_unitofmeasure(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.unitOfMeasure)
}
inline std::string* SensorInfo::mutable_unitofmeasure() {
  // @@protoc_insertion_point(field_mutable:fk_data.SensorInfo.unitOfMeasure)
  return _internal_mutable_unitofmeasure();
}
inline const std::string& SensorInfo::_internal_unitofmeasure() const {
  return unitofmeasure_.GetNoArena();
}
inline void SensorInfo::_internal_set_unitofmeasure(const std::string& value) {
  
  unitofmeasure_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorInfo::set_unitofmeasure(std::string&& value) {
  
  unitofmeasure_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SensorInfo.unitOfMeasure)
}
inline void SensorInfo::set_unitofmeasure(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unitofmeasure_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SensorInfo.unitOfMeasure)
}
inline void SensorInfo::set_unitofmeasure(const char* value, size_t size) {
  
  unitofmeasure_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SensorInfo.unitOfMeasure)
}
inline std::string* SensorInfo::_internal_mutable_unitofmeasure() {
  
  return unitofmeasure_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorInfo::release_unitofmeasure() {
  // @@protoc_insertion_point(field_release:fk_data.SensorInfo.unitOfMeasure)
  
  return unitofmeasure_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInfo::set_allocated_unitofmeasure(std::string* unitofmeasure) {
  if (unitofmeasure != nullptr) {
    
  } else {
    
  }
  unitofmeasure_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unitofmeasure);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SensorInfo.unitOfMeasure)
}

// uint32 flags = 4;
inline void SensorInfo::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorInfo::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorInfo::flags() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorInfo.flags)
  return _internal_flags();
}
inline void SensorInfo::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void SensorInfo::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorInfo.flags)
}

// -------------------------------------------------------------------

// Firmware

// string version = 1;
inline void Firmware::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Firmware::version() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.version)
  return _internal_version();
}
inline void Firmware::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.version)
}
inline std::string* Firmware::mutable_version() {
  // @@protoc_insertion_point(field_mutable:fk_data.Firmware.version)
  return _internal_mutable_version();
}
inline const std::string& Firmware::_internal_version() const {
  return version_.GetNoArena();
}
inline void Firmware::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Firmware::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Firmware.version)
}
inline void Firmware::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Firmware.version)
}
inline void Firmware::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Firmware.version)
}
inline std::string* Firmware::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Firmware::release_version() {
  // @@protoc_insertion_point(field_release:fk_data.Firmware.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Firmware::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Firmware.version)
}

// string build = 2;
inline void Firmware::clear_build() {
  build_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Firmware::build() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.build)
  return _internal_build();
}
inline void Firmware::set_build(const std::string& value) {
  _internal_set_build(value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.build)
}
inline std::string* Firmware::mutable_build() {
  // @@protoc_insertion_point(field_mutable:fk_data.Firmware.build)
  return _internal_mutable_build();
}
inline const std::string& Firmware::_internal_build() const {
  return build_.GetNoArena();
}
inline void Firmware::_internal_set_build(const std::string& value) {
  
  build_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Firmware::set_build(std::string&& value) {
  
  build_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Firmware.build)
}
inline void Firmware::set_build(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Firmware.build)
}
inline void Firmware::set_build(const char* value, size_t size) {
  
  build_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Firmware.build)
}
inline std::string* Firmware::_internal_mutable_build() {
  
  return build_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Firmware::release_build() {
  // @@protoc_insertion_point(field_release:fk_data.Firmware.build)
  
  return build_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Firmware::set_allocated_build(std::string* build) {
  if (build != nullptr) {
    
  } else {
    
  }
  build_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Firmware.build)
}

// string number = 3;
inline void Firmware::clear_number() {
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Firmware::number() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.number)
  return _internal_number();
}
inline void Firmware::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.number)
}
inline std::string* Firmware::mutable_number() {
  // @@protoc_insertion_point(field_mutable:fk_data.Firmware.number)
  return _internal_mutable_number();
}
inline const std::string& Firmware::_internal_number() const {
  return number_.GetNoArena();
}
inline void Firmware::_internal_set_number(const std::string& value) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Firmware::set_number(std::string&& value) {
  
  number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Firmware.number)
}
inline void Firmware::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Firmware.number)
}
inline void Firmware::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Firmware.number)
}
inline std::string* Firmware::_internal_mutable_number() {
  
  return number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Firmware::release_number() {
  // @@protoc_insertion_point(field_release:fk_data.Firmware.number)
  
  return number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Firmware::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Firmware.number)
}

// uint64 timestamp = 4;
inline void Firmware::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Firmware::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Firmware::timestamp() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.timestamp)
  return _internal_timestamp();
}
inline void Firmware::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Firmware::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.timestamp)
}

// string hash = 5;
inline void Firmware::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Firmware::hash() const {
  // @@protoc_insertion_point(field_get:fk_data.Firmware.hash)
  return _internal_hash();
}
inline void Firmware::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:fk_data.Firmware.hash)
}
inline std::string* Firmware::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:fk_data.Firmware.hash)
  return _internal_mutable_hash();
}
inline const std::string& Firmware::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void Firmware::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Firmware::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Firmware.hash)
}
inline void Firmware::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Firmware.hash)
}
inline void Firmware::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Firmware.hash)
}
inline std::string* Firmware::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Firmware::release_hash() {
  // @@protoc_insertion_point(field_release:fk_data.Firmware.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Firmware::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Firmware.hash)
}

// -------------------------------------------------------------------

// Metadata

// bytes deviceId = 1;
inline void Metadata::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::deviceid() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.deviceId)
  return _internal_deviceid();
}
inline void Metadata::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.deviceId)
}
inline std::string* Metadata::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& Metadata::_internal_deviceid() const {
  return deviceid_.GetNoArena();
}
inline void Metadata::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Metadata::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.deviceId)
}
inline void Metadata::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.deviceId)
}
inline void Metadata::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.deviceId)
}
inline std::string* Metadata::_internal_mutable_deviceid() {
  
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_deviceid() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.deviceId)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.deviceId)
}

// int64 time = 2;
inline void Metadata::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Metadata::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Metadata::time() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.time)
  return _internal_time();
}
inline void Metadata::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void Metadata::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.time)
}

// string git = 3;
inline void Metadata::clear_git() {
  git_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::git() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.git)
  return _internal_git();
}
inline void Metadata::set_git(const std::string& value) {
  _internal_set_git(value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.git)
}
inline std::string* Metadata::mutable_git() {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.git)
  return _internal_mutable_git();
}
inline const std::string& Metadata::_internal_git() const {
  return git_.GetNoArena();
}
inline void Metadata::_internal_set_git(const std::string& value) {
  
  git_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Metadata::set_git(std::string&& value) {
  
  git_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.git)
}
inline void Metadata::set_git(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  git_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.git)
}
inline void Metadata::set_git(const char* value, size_t size) {
  
  git_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.git)
}
inline std::string* Metadata::_internal_mutable_git() {
  
  return git_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_git() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.git)
  
  return git_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_git(std::string* git) {
  if (git != nullptr) {
    
  } else {
    
  }
  git_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), git);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.git)
}

// string build = 7;
inline void Metadata::clear_build() {
  build_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::build() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.build)
  return _internal_build();
}
inline void Metadata::set_build(const std::string& value) {
  _internal_set_build(value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.build)
}
inline std::string* Metadata::mutable_build() {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.build)
  return _internal_mutable_build();
}
inline const std::string& Metadata::_internal_build() const {
  return build_.GetNoArena();
}
inline void Metadata::_internal_set_build(const std::string& value) {
  
  build_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Metadata::set_build(std::string&& value) {
  
  build_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.build)
}
inline void Metadata::set_build(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.build)
}
inline void Metadata::set_build(const char* value, size_t size) {
  
  build_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.build)
}
inline std::string* Metadata::_internal_mutable_build() {
  
  return build_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_build() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.build)
  
  return build_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_build(std::string* build) {
  if (build != nullptr) {
    
  } else {
    
  }
  build_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.build)
}

// uint32 resetCause = 4;
inline void Metadata::clear_resetcause() {
  resetcause_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Metadata::_internal_resetcause() const {
  return resetcause_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Metadata::resetcause() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.resetCause)
  return _internal_resetcause();
}
inline void Metadata::_internal_set_resetcause(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  resetcause_ = value;
}
inline void Metadata::set_resetcause(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_resetcause(value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.resetCause)
}

// repeated .fk_data.SensorInfo sensors = 5;
inline int Metadata::_internal_sensors_size() const {
  return sensors_.size();
}
inline int Metadata::sensors_size() const {
  return _internal_sensors_size();
}
inline void Metadata::clear_sensors() {
  sensors_.Clear();
}
inline ::fk_data::SensorInfo* Metadata::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.sensors)
  return sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo >*
Metadata::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.Metadata.sensors)
  return &sensors_;
}
inline const ::fk_data::SensorInfo& Metadata::_internal_sensors(int index) const {
  return sensors_.Get(index);
}
inline const ::fk_data::SensorInfo& Metadata::sensors(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.sensors)
  return _internal_sensors(index);
}
inline ::fk_data::SensorInfo* Metadata::_internal_add_sensors() {
  return sensors_.Add();
}
inline ::fk_data::SensorInfo* Metadata::add_sensors() {
  // @@protoc_insertion_point(field_add:fk_data.Metadata.sensors)
  return _internal_add_sensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorInfo >&
Metadata::sensors() const {
  // @@protoc_insertion_point(field_list:fk_data.Metadata.sensors)
  return sensors_;
}

// repeated .fk_data.ModuleInfo modules = 6;
inline int Metadata::_internal_modules_size() const {
  return modules_.size();
}
inline int Metadata::modules_size() const {
  return _internal_modules_size();
}
inline void Metadata::clear_modules() {
  modules_.Clear();
}
inline ::fk_data::ModuleInfo* Metadata::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.modules)
  return modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo >*
Metadata::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.Metadata.modules)
  return &modules_;
}
inline const ::fk_data::ModuleInfo& Metadata::_internal_modules(int index) const {
  return modules_.Get(index);
}
inline const ::fk_data::ModuleInfo& Metadata::modules(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.modules)
  return _internal_modules(index);
}
inline ::fk_data::ModuleInfo* Metadata::_internal_add_modules() {
  return modules_.Add();
}
inline ::fk_data::ModuleInfo* Metadata::add_modules() {
  // @@protoc_insertion_point(field_add:fk_data.Metadata.modules)
  return _internal_add_modules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo >&
Metadata::modules() const {
  // @@protoc_insertion_point(field_list:fk_data.Metadata.modules)
  return modules_;
}

// .fk_data.Firmware firmware = 8;
inline bool Metadata::_internal_has_firmware() const {
  return this != internal_default_instance() && firmware_ != nullptr;
}
inline bool Metadata::has_firmware() const {
  return _internal_has_firmware();
}
inline void Metadata::clear_firmware() {
  if (GetArenaNoVirtual() == nullptr && firmware_ != nullptr) {
    delete firmware_;
  }
  firmware_ = nullptr;
}
inline const ::fk_data::Firmware& Metadata::_internal_firmware() const {
  const ::fk_data::Firmware* p = firmware_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::Firmware*>(
      &::fk_data::_Firmware_default_instance_);
}
inline const ::fk_data::Firmware& Metadata::firmware() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.firmware)
  return _internal_firmware();
}
inline ::fk_data::Firmware* Metadata::release_firmware() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.firmware)
  
  ::fk_data::Firmware* temp = firmware_;
  firmware_ = nullptr;
  return temp;
}
inline ::fk_data::Firmware* Metadata::_internal_mutable_firmware() {
  
  if (firmware_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::Firmware>(GetArenaNoVirtual());
    firmware_ = p;
  }
  return firmware_;
}
inline ::fk_data::Firmware* Metadata::mutable_firmware() {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.firmware)
  return _internal_mutable_firmware();
}
inline void Metadata::set_allocated_firmware(::fk_data::Firmware* firmware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete firmware_;
  }
  if (firmware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      firmware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firmware, submessage_arena);
    }
    
  } else {
    
  }
  firmware_ = firmware;
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.firmware)
}

// bytes generation = 9;
inline void Metadata::clear_generation() {
  generation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metadata::generation() const {
  // @@protoc_insertion_point(field_get:fk_data.Metadata.generation)
  return _internal_generation();
}
inline void Metadata::set_generation(const std::string& value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:fk_data.Metadata.generation)
}
inline std::string* Metadata::mutable_generation() {
  // @@protoc_insertion_point(field_mutable:fk_data.Metadata.generation)
  return _internal_mutable_generation();
}
inline const std::string& Metadata::_internal_generation() const {
  return generation_.GetNoArena();
}
inline void Metadata::_internal_set_generation(const std::string& value) {
  
  generation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Metadata::set_generation(std::string&& value) {
  
  generation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Metadata.generation)
}
inline void Metadata::set_generation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  generation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Metadata.generation)
}
inline void Metadata::set_generation(const void* value, size_t size) {
  
  generation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Metadata.generation)
}
inline std::string* Metadata::_internal_mutable_generation() {
  
  return generation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metadata::release_generation() {
  // @@protoc_insertion_point(field_release:fk_data.Metadata.generation)
  
  return generation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_generation(std::string* generation) {
  if (generation != nullptr) {
    
  } else {
    
  }
  generation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), generation);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Metadata.generation)
}

// -------------------------------------------------------------------

// Status

// int64 time = 1;
inline void Status::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Status::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Status::time() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.time)
  return _internal_time();
}
inline void Status::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void Status::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fk_data.Status.time)
}

// uint32 uptime = 2;
inline void Status::clear_uptime() {
  uptime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::uptime() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.uptime)
  return _internal_uptime();
}
inline void Status::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uptime_ = value;
}
inline void Status::set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:fk_data.Status.uptime)
}

// float battery = 3;
inline void Status::clear_battery() {
  battery_ = 0;
}
inline float Status::_internal_battery() const {
  return battery_;
}
inline float Status::battery() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.battery)
  return _internal_battery();
}
inline void Status::_internal_set_battery(float value) {
  
  battery_ = value;
}
inline void Status::set_battery(float value) {
  _internal_set_battery(value);
  // @@protoc_insertion_point(field_set:fk_data.Status.battery)
}

// uint32 memory = 4;
inline void Status::clear_memory() {
  memory_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_memory() const {
  return memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::memory() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.memory)
  return _internal_memory();
}
inline void Status::_internal_set_memory(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  memory_ = value;
}
inline void Status::set_memory(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:fk_data.Status.memory)
}

// uint64 busy = 5;
inline void Status::clear_busy() {
  busy_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Status::_internal_busy() const {
  return busy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Status::busy() const {
  // @@protoc_insertion_point(field_get:fk_data.Status.busy)
  return _internal_busy();
}
inline void Status::_internal_set_busy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  busy_ = value;
}
inline void Status::set_busy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_busy(value);
  // @@protoc_insertion_point(field_set:fk_data.Status.busy)
}

// -------------------------------------------------------------------

// LogMessage

// int64 time = 1;
inline void LogMessage::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogMessage::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogMessage::time() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.time)
  return _internal_time();
}
inline void LogMessage::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void LogMessage::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.time)
}

// uint32 uptime = 2;
inline void LogMessage::clear_uptime() {
  uptime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogMessage::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogMessage::uptime() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.uptime)
  return _internal_uptime();
}
inline void LogMessage::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uptime_ = value;
}
inline void LogMessage::set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.uptime)
}

// uint32 level = 3;
inline void LogMessage::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogMessage::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogMessage::level() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.level)
  return _internal_level();
}
inline void LogMessage::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void LogMessage::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.level)
}

// string facility = 4;
inline void LogMessage::clear_facility() {
  facility_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogMessage::facility() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.facility)
  return _internal_facility();
}
inline void LogMessage::set_facility(const std::string& value) {
  _internal_set_facility(value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.facility)
}
inline std::string* LogMessage::mutable_facility() {
  // @@protoc_insertion_point(field_mutable:fk_data.LogMessage.facility)
  return _internal_mutable_facility();
}
inline const std::string& LogMessage::_internal_facility() const {
  return facility_.GetNoArena();
}
inline void LogMessage::_internal_set_facility(const std::string& value) {
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogMessage::set_facility(std::string&& value) {
  
  facility_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LogMessage.facility)
}
inline void LogMessage::set_facility(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LogMessage.facility)
}
inline void LogMessage::set_facility(const char* value, size_t size) {
  
  facility_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LogMessage.facility)
}
inline std::string* LogMessage::_internal_mutable_facility() {
  
  return facility_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMessage::release_facility() {
  // @@protoc_insertion_point(field_release:fk_data.LogMessage.facility)
  
  return facility_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_facility(std::string* facility) {
  if (facility != nullptr) {
    
  } else {
    
  }
  facility_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facility);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LogMessage.facility)
}

// string message = 5;
inline void LogMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogMessage::message() const {
  // @@protoc_insertion_point(field_get:fk_data.LogMessage.message)
  return _internal_message();
}
inline void LogMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:fk_data.LogMessage.message)
}
inline std::string* LogMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:fk_data.LogMessage.message)
  return _internal_mutable_message();
}
inline const std::string& LogMessage::_internal_message() const {
  return message_.GetNoArena();
}
inline void LogMessage::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogMessage::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LogMessage.message)
}
inline void LogMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LogMessage.message)
}
inline void LogMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LogMessage.message)
}
inline std::string* LogMessage::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMessage::release_message() {
  // @@protoc_insertion_point(field_release:fk_data.LogMessage.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LogMessage.message)
}

// -------------------------------------------------------------------

// SensorGroup

// uint32 module = 1;
inline void SensorGroup::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorGroup::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorGroup::module() const {
  // @@protoc_insertion_point(field_get:fk_data.SensorGroup.module)
  return _internal_module();
}
inline void SensorGroup::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void SensorGroup::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:fk_data.SensorGroup.module)
}

// repeated .fk_data.SensorAndValue readings = 2;
inline int SensorGroup::_internal_readings_size() const {
  return readings_.size();
}
inline int SensorGroup::readings_size() const {
  return _internal_readings_size();
}
inline void SensorGroup::clear_readings() {
  readings_.Clear();
}
inline ::fk_data::SensorAndValue* SensorGroup::mutable_readings(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.SensorGroup.readings)
  return readings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorAndValue >*
SensorGroup::mutable_readings() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.SensorGroup.readings)
  return &readings_;
}
inline const ::fk_data::SensorAndValue& SensorGroup::_internal_readings(int index) const {
  return readings_.Get(index);
}
inline const ::fk_data::SensorAndValue& SensorGroup::readings(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.SensorGroup.readings)
  return _internal_readings(index);
}
inline ::fk_data::SensorAndValue* SensorGroup::_internal_add_readings() {
  return readings_.Add();
}
inline ::fk_data::SensorAndValue* SensorGroup::add_readings() {
  // @@protoc_insertion_point(field_add:fk_data.SensorGroup.readings)
  return _internal_add_readings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorAndValue >&
SensorGroup::readings() const {
  // @@protoc_insertion_point(field_list:fk_data.SensorGroup.readings)
  return readings_;
}

// -------------------------------------------------------------------

// Readings

// int64 time = 1;
inline void Readings::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Readings::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Readings::time() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.time)
  return _internal_time();
}
inline void Readings::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void Readings::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fk_data.Readings.time)
}

// uint32 reading = 2;
inline void Readings::clear_reading() {
  reading_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Readings::_internal_reading() const {
  return reading_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Readings::reading() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.reading)
  return _internal_reading();
}
inline void Readings::_internal_set_reading(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reading_ = value;
}
inline void Readings::set_reading(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reading(value);
  // @@protoc_insertion_point(field_set:fk_data.Readings.reading)
}

// uint32 flags = 3;
inline void Readings::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Readings::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Readings::flags() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.flags)
  return _internal_flags();
}
inline void Readings::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void Readings::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:fk_data.Readings.flags)
}

// uint32 meta = 6;
inline void Readings::clear_meta() {
  meta_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Readings::_internal_meta() const {
  return meta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Readings::meta() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.meta)
  return _internal_meta();
}
inline void Readings::_internal_set_meta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  meta_ = value;
}
inline void Readings::set_meta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meta(value);
  // @@protoc_insertion_point(field_set:fk_data.Readings.meta)
}

// uint32 uptime = 7;
inline void Readings::clear_uptime() {
  uptime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Readings::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Readings::uptime() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.uptime)
  return _internal_uptime();
}
inline void Readings::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uptime_ = value;
}
inline void Readings::set_uptime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:fk_data.Readings.uptime)
}

// .fk_data.DeviceLocation location = 4;
inline bool Readings::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Readings::has_location() const {
  return _internal_has_location();
}
inline void Readings::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::fk_data::DeviceLocation& Readings::_internal_location() const {
  const ::fk_data::DeviceLocation* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::DeviceLocation*>(
      &::fk_data::_DeviceLocation_default_instance_);
}
inline const ::fk_data::DeviceLocation& Readings::location() const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.location)
  return _internal_location();
}
inline ::fk_data::DeviceLocation* Readings::release_location() {
  // @@protoc_insertion_point(field_release:fk_data.Readings.location)
  
  ::fk_data::DeviceLocation* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::fk_data::DeviceLocation* Readings::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::DeviceLocation>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::fk_data::DeviceLocation* Readings::mutable_location() {
  // @@protoc_insertion_point(field_mutable:fk_data.Readings.location)
  return _internal_mutable_location();
}
inline void Readings::set_allocated_location(::fk_data::DeviceLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:fk_data.Readings.location)
}

// repeated .fk_data.SensorGroup sensorGroups = 5;
inline int Readings::_internal_sensorgroups_size() const {
  return sensorgroups_.size();
}
inline int Readings::sensorgroups_size() const {
  return _internal_sensorgroups_size();
}
inline void Readings::clear_sensorgroups() {
  sensorgroups_.Clear();
}
inline ::fk_data::SensorGroup* Readings::mutable_sensorgroups(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.Readings.sensorGroups)
  return sensorgroups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorGroup >*
Readings::mutable_sensorgroups() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.Readings.sensorGroups)
  return &sensorgroups_;
}
inline const ::fk_data::SensorGroup& Readings::_internal_sensorgroups(int index) const {
  return sensorgroups_.Get(index);
}
inline const ::fk_data::SensorGroup& Readings::sensorgroups(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.Readings.sensorGroups)
  return _internal_sensorgroups(index);
}
inline ::fk_data::SensorGroup* Readings::_internal_add_sensorgroups() {
  return sensorgroups_.Add();
}
inline ::fk_data::SensorGroup* Readings::add_sensorgroups() {
  // @@protoc_insertion_point(field_add:fk_data.Readings.sensorGroups)
  return _internal_add_sensorgroups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::SensorGroup >&
Readings::sensorgroups() const {
  // @@protoc_insertion_point(field_list:fk_data.Readings.sensorGroups)
  return sensorgroups_;
}

// -------------------------------------------------------------------

// JobSchedule

// bytes cron = 1;
inline void JobSchedule::clear_cron() {
  cron_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JobSchedule::cron() const {
  // @@protoc_insertion_point(field_get:fk_data.JobSchedule.cron)
  return _internal_cron();
}
inline void JobSchedule::set_cron(const std::string& value) {
  _internal_set_cron(value);
  // @@protoc_insertion_point(field_set:fk_data.JobSchedule.cron)
}
inline std::string* JobSchedule::mutable_cron() {
  // @@protoc_insertion_point(field_mutable:fk_data.JobSchedule.cron)
  return _internal_mutable_cron();
}
inline const std::string& JobSchedule::_internal_cron() const {
  return cron_.GetNoArena();
}
inline void JobSchedule::_internal_set_cron(const std::string& value) {
  
  cron_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JobSchedule::set_cron(std::string&& value) {
  
  cron_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.JobSchedule.cron)
}
inline void JobSchedule::set_cron(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cron_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.JobSchedule.cron)
}
inline void JobSchedule::set_cron(const void* value, size_t size) {
  
  cron_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.JobSchedule.cron)
}
inline std::string* JobSchedule::_internal_mutable_cron() {
  
  return cron_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JobSchedule::release_cron() {
  // @@protoc_insertion_point(field_release:fk_data.JobSchedule.cron)
  
  return cron_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JobSchedule::set_allocated_cron(std::string* cron) {
  if (cron != nullptr) {
    
  } else {
    
  }
  cron_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cron);
  // @@protoc_insertion_point(field_set_allocated:fk_data.JobSchedule.cron)
}

// uint32 interval = 2;
inline void JobSchedule::clear_interval() {
  interval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JobSchedule::_internal_interval() const {
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JobSchedule::interval() const {
  // @@protoc_insertion_point(field_get:fk_data.JobSchedule.interval)
  return _internal_interval();
}
inline void JobSchedule::_internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interval_ = value;
}
inline void JobSchedule::set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:fk_data.JobSchedule.interval)
}

// uint32 repeated = 3;
inline void JobSchedule::clear_repeated() {
  repeated_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JobSchedule::_internal_repeated() const {
  return repeated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JobSchedule::repeated() const {
  // @@protoc_insertion_point(field_get:fk_data.JobSchedule.repeated)
  return _internal_repeated();
}
inline void JobSchedule::_internal_set_repeated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  repeated_ = value;
}
inline void JobSchedule::set_repeated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeated(value);
  // @@protoc_insertion_point(field_set:fk_data.JobSchedule.repeated)
}

// -------------------------------------------------------------------

// Schedule

// .fk_data.JobSchedule readings = 1;
inline bool Schedule::_internal_has_readings() const {
  return this != internal_default_instance() && readings_ != nullptr;
}
inline bool Schedule::has_readings() const {
  return _internal_has_readings();
}
inline void Schedule::clear_readings() {
  if (GetArenaNoVirtual() == nullptr && readings_ != nullptr) {
    delete readings_;
  }
  readings_ = nullptr;
}
inline const ::fk_data::JobSchedule& Schedule::_internal_readings() const {
  const ::fk_data::JobSchedule* p = readings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::JobSchedule*>(
      &::fk_data::_JobSchedule_default_instance_);
}
inline const ::fk_data::JobSchedule& Schedule::readings() const {
  // @@protoc_insertion_point(field_get:fk_data.Schedule.readings)
  return _internal_readings();
}
inline ::fk_data::JobSchedule* Schedule::release_readings() {
  // @@protoc_insertion_point(field_release:fk_data.Schedule.readings)
  
  ::fk_data::JobSchedule* temp = readings_;
  readings_ = nullptr;
  return temp;
}
inline ::fk_data::JobSchedule* Schedule::_internal_mutable_readings() {
  
  if (readings_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::JobSchedule>(GetArenaNoVirtual());
    readings_ = p;
  }
  return readings_;
}
inline ::fk_data::JobSchedule* Schedule::mutable_readings() {
  // @@protoc_insertion_point(field_mutable:fk_data.Schedule.readings)
  return _internal_mutable_readings();
}
inline void Schedule::set_allocated_readings(::fk_data::JobSchedule* readings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete readings_;
  }
  if (readings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readings, submessage_arena);
    }
    
  } else {
    
  }
  readings_ = readings;
  // @@protoc_insertion_point(field_set_allocated:fk_data.Schedule.readings)
}

// .fk_data.JobSchedule network = 2;
inline bool Schedule::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool Schedule::has_network() const {
  return _internal_has_network();
}
inline void Schedule::clear_network() {
  if (GetArenaNoVirtual() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
inline const ::fk_data::JobSchedule& Schedule::_internal_network() const {
  const ::fk_data::JobSchedule* p = network_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::JobSchedule*>(
      &::fk_data::_JobSchedule_default_instance_);
}
inline const ::fk_data::JobSchedule& Schedule::network() const {
  // @@protoc_insertion_point(field_get:fk_data.Schedule.network)
  return _internal_network();
}
inline ::fk_data::JobSchedule* Schedule::release_network() {
  // @@protoc_insertion_point(field_release:fk_data.Schedule.network)
  
  ::fk_data::JobSchedule* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::fk_data::JobSchedule* Schedule::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::JobSchedule>(GetArenaNoVirtual());
    network_ = p;
  }
  return network_;
}
inline ::fk_data::JobSchedule* Schedule::mutable_network() {
  // @@protoc_insertion_point(field_mutable:fk_data.Schedule.network)
  return _internal_mutable_network();
}
inline void Schedule::set_allocated_network(::fk_data::JobSchedule* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:fk_data.Schedule.network)
}

// .fk_data.JobSchedule lora = 3;
inline bool Schedule::_internal_has_lora() const {
  return this != internal_default_instance() && lora_ != nullptr;
}
inline bool Schedule::has_lora() const {
  return _internal_has_lora();
}
inline void Schedule::clear_lora() {
  if (GetArenaNoVirtual() == nullptr && lora_ != nullptr) {
    delete lora_;
  }
  lora_ = nullptr;
}
inline const ::fk_data::JobSchedule& Schedule::_internal_lora() const {
  const ::fk_data::JobSchedule* p = lora_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::JobSchedule*>(
      &::fk_data::_JobSchedule_default_instance_);
}
inline const ::fk_data::JobSchedule& Schedule::lora() const {
  // @@protoc_insertion_point(field_get:fk_data.Schedule.lora)
  return _internal_lora();
}
inline ::fk_data::JobSchedule* Schedule::release_lora() {
  // @@protoc_insertion_point(field_release:fk_data.Schedule.lora)
  
  ::fk_data::JobSchedule* temp = lora_;
  lora_ = nullptr;
  return temp;
}
inline ::fk_data::JobSchedule* Schedule::_internal_mutable_lora() {
  
  if (lora_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::JobSchedule>(GetArenaNoVirtual());
    lora_ = p;
  }
  return lora_;
}
inline ::fk_data::JobSchedule* Schedule::mutable_lora() {
  // @@protoc_insertion_point(field_mutable:fk_data.Schedule.lora)
  return _internal_mutable_lora();
}
inline void Schedule::set_allocated_lora(::fk_data::JobSchedule* lora) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lora_;
  }
  if (lora) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lora = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lora, submessage_arena);
    }
    
  } else {
    
  }
  lora_ = lora;
  // @@protoc_insertion_point(field_set_allocated:fk_data.Schedule.lora)
}

// .fk_data.JobSchedule gps = 4;
inline bool Schedule::_internal_has_gps() const {
  return this != internal_default_instance() && gps_ != nullptr;
}
inline bool Schedule::has_gps() const {
  return _internal_has_gps();
}
inline void Schedule::clear_gps() {
  if (GetArenaNoVirtual() == nullptr && gps_ != nullptr) {
    delete gps_;
  }
  gps_ = nullptr;
}
inline const ::fk_data::JobSchedule& Schedule::_internal_gps() const {
  const ::fk_data::JobSchedule* p = gps_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::JobSchedule*>(
      &::fk_data::_JobSchedule_default_instance_);
}
inline const ::fk_data::JobSchedule& Schedule::gps() const {
  // @@protoc_insertion_point(field_get:fk_data.Schedule.gps)
  return _internal_gps();
}
inline ::fk_data::JobSchedule* Schedule::release_gps() {
  // @@protoc_insertion_point(field_release:fk_data.Schedule.gps)
  
  ::fk_data::JobSchedule* temp = gps_;
  gps_ = nullptr;
  return temp;
}
inline ::fk_data::JobSchedule* Schedule::_internal_mutable_gps() {
  
  if (gps_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::JobSchedule>(GetArenaNoVirtual());
    gps_ = p;
  }
  return gps_;
}
inline ::fk_data::JobSchedule* Schedule::mutable_gps() {
  // @@protoc_insertion_point(field_mutable:fk_data.Schedule.gps)
  return _internal_mutable_gps();
}
inline void Schedule::set_allocated_gps(::fk_data::JobSchedule* gps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gps_;
  }
  if (gps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    
  } else {
    
  }
  gps_ = gps;
  // @@protoc_insertion_point(field_set_allocated:fk_data.Schedule.gps)
}

// -------------------------------------------------------------------

// Identity

// string name = 1;
inline void Identity::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Identity::name() const {
  // @@protoc_insertion_point(field_get:fk_data.Identity.name)
  return _internal_name();
}
inline void Identity::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fk_data.Identity.name)
}
inline std::string* Identity::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fk_data.Identity.name)
  return _internal_mutable_name();
}
inline const std::string& Identity::_internal_name() const {
  return name_.GetNoArena();
}
inline void Identity::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Identity::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.Identity.name)
}
inline void Identity::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.Identity.name)
}
inline void Identity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.Identity.name)
}
inline std::string* Identity::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Identity::release_name() {
  // @@protoc_insertion_point(field_release:fk_data.Identity.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fk_data.Identity.name)
}

// -------------------------------------------------------------------

// Condition

// uint32 flags = 1;
inline void Condition::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::flags() const {
  // @@protoc_insertion_point(field_get:fk_data.Condition.flags)
  return _internal_flags();
}
inline void Condition::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void Condition::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:fk_data.Condition.flags)
}

// uint32 recording = 2;
inline void Condition::clear_recording() {
  recording_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::_internal_recording() const {
  return recording_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::recording() const {
  // @@protoc_insertion_point(field_get:fk_data.Condition.recording)
  return _internal_recording();
}
inline void Condition::_internal_set_recording(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  recording_ = value;
}
inline void Condition::set_recording(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recording(value);
  // @@protoc_insertion_point(field_set:fk_data.Condition.recording)
}

// -------------------------------------------------------------------

// NetworkInfo

// string ssid = 1;
inline void NetworkInfo::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkInfo::ssid() const {
  // @@protoc_insertion_point(field_get:fk_data.NetworkInfo.ssid)
  return _internal_ssid();
}
inline void NetworkInfo::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:fk_data.NetworkInfo.ssid)
}
inline std::string* NetworkInfo::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:fk_data.NetworkInfo.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& NetworkInfo::_internal_ssid() const {
  return ssid_.GetNoArena();
}
inline void NetworkInfo::_internal_set_ssid(const std::string& value) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkInfo::set_ssid(std::string&& value) {
  
  ssid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.NetworkInfo.ssid)
}
inline void NetworkInfo::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.NetworkInfo.ssid)
}
inline void NetworkInfo::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.NetworkInfo.ssid)
}
inline std::string* NetworkInfo::_internal_mutable_ssid() {
  
  return ssid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkInfo::release_ssid() {
  // @@protoc_insertion_point(field_release:fk_data.NetworkInfo.ssid)
  
  return ssid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:fk_data.NetworkInfo.ssid)
}

// string password = 2;
inline void NetworkInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkInfo::password() const {
  // @@protoc_insertion_point(field_get:fk_data.NetworkInfo.password)
  return _internal_password();
}
inline void NetworkInfo::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:fk_data.NetworkInfo.password)
}
inline std::string* NetworkInfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable:fk_data.NetworkInfo.password)
  return _internal_mutable_password();
}
inline const std::string& NetworkInfo::_internal_password() const {
  return password_.GetNoArena();
}
inline void NetworkInfo::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkInfo::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.NetworkInfo.password)
}
inline void NetworkInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.NetworkInfo.password)
}
inline void NetworkInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.NetworkInfo.password)
}
inline std::string* NetworkInfo::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkInfo::release_password() {
  // @@protoc_insertion_point(field_release:fk_data.NetworkInfo.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:fk_data.NetworkInfo.password)
}

// -------------------------------------------------------------------

// NetworkSettings

// repeated .fk_data.NetworkInfo networks = 1;
inline int NetworkSettings::_internal_networks_size() const {
  return networks_.size();
}
inline int NetworkSettings::networks_size() const {
  return _internal_networks_size();
}
inline void NetworkSettings::clear_networks() {
  networks_.Clear();
}
inline ::fk_data::NetworkInfo* NetworkSettings::mutable_networks(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.NetworkSettings.networks)
  return networks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::NetworkInfo >*
NetworkSettings::mutable_networks() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.NetworkSettings.networks)
  return &networks_;
}
inline const ::fk_data::NetworkInfo& NetworkSettings::_internal_networks(int index) const {
  return networks_.Get(index);
}
inline const ::fk_data::NetworkInfo& NetworkSettings::networks(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.NetworkSettings.networks)
  return _internal_networks(index);
}
inline ::fk_data::NetworkInfo* NetworkSettings::_internal_add_networks() {
  return networks_.Add();
}
inline ::fk_data::NetworkInfo* NetworkSettings::add_networks() {
  // @@protoc_insertion_point(field_add:fk_data.NetworkSettings.networks)
  return _internal_add_networks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::NetworkInfo >&
NetworkSettings::networks() const {
  // @@protoc_insertion_point(field_list:fk_data.NetworkSettings.networks)
  return networks_;
}

// -------------------------------------------------------------------

// LoraSettings

// bytes deviceEui = 1;
inline void LoraSettings::clear_deviceeui() {
  deviceeui_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoraSettings::deviceeui() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.deviceEui)
  return _internal_deviceeui();
}
inline void LoraSettings::set_deviceeui(const std::string& value) {
  _internal_set_deviceeui(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.deviceEui)
}
inline std::string* LoraSettings::mutable_deviceeui() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.deviceEui)
  return _internal_mutable_deviceeui();
}
inline const std::string& LoraSettings::_internal_deviceeui() const {
  return deviceeui_.GetNoArena();
}
inline void LoraSettings::_internal_set_deviceeui(const std::string& value) {
  
  deviceeui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoraSettings::set_deviceeui(std::string&& value) {
  
  deviceeui_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.deviceEui)
}
inline void LoraSettings::set_deviceeui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceeui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.deviceEui)
}
inline void LoraSettings::set_deviceeui(const void* value, size_t size) {
  
  deviceeui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.deviceEui)
}
inline std::string* LoraSettings::_internal_mutable_deviceeui() {
  
  return deviceeui_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoraSettings::release_deviceeui() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.deviceEui)
  
  return deviceeui_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoraSettings::set_allocated_deviceeui(std::string* deviceeui) {
  if (deviceeui != nullptr) {
    
  } else {
    
  }
  deviceeui_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceeui);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.deviceEui)
}

// bytes appKey = 2;
inline void LoraSettings::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoraSettings::appkey() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.appKey)
  return _internal_appkey();
}
inline void LoraSettings::set_appkey(const std::string& value) {
  _internal_set_appkey(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.appKey)
}
inline std::string* LoraSettings::mutable_appkey() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.appKey)
  return _internal_mutable_appkey();
}
inline const std::string& LoraSettings::_internal_appkey() const {
  return appkey_.GetNoArena();
}
inline void LoraSettings::_internal_set_appkey(const std::string& value) {
  
  appkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoraSettings::set_appkey(std::string&& value) {
  
  appkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.appKey)
}
inline void LoraSettings::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.appKey)
}
inline void LoraSettings::set_appkey(const void* value, size_t size) {
  
  appkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.appKey)
}
inline std::string* LoraSettings::_internal_mutable_appkey() {
  
  return appkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoraSettings::release_appkey() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.appKey)
  
  return appkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoraSettings::set_allocated_appkey(std::string* appkey) {
  if (appkey != nullptr) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.appKey)
}

// bytes appEui = 3;
inline void LoraSettings::clear_appeui() {
  appeui_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoraSettings::appeui() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.appEui)
  return _internal_appeui();
}
inline void LoraSettings::set_appeui(const std::string& value) {
  _internal_set_appeui(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.appEui)
}
inline std::string* LoraSettings::mutable_appeui() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.appEui)
  return _internal_mutable_appeui();
}
inline const std::string& LoraSettings::_internal_appeui() const {
  return appeui_.GetNoArena();
}
inline void LoraSettings::_internal_set_appeui(const std::string& value) {
  
  appeui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoraSettings::set_appeui(std::string&& value) {
  
  appeui_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.appEui)
}
inline void LoraSettings::set_appeui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appeui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.appEui)
}
inline void LoraSettings::set_appeui(const void* value, size_t size) {
  
  appeui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.appEui)
}
inline std::string* LoraSettings::_internal_mutable_appeui() {
  
  return appeui_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoraSettings::release_appeui() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.appEui)
  
  return appeui_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoraSettings::set_allocated_appeui(std::string* appeui) {
  if (appeui != nullptr) {
    
  } else {
    
  }
  appeui_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appeui);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.appEui)
}

// uint32 frequencyBand = 4;
inline void LoraSettings::clear_frequencyband() {
  frequencyband_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraSettings::_internal_frequencyband() const {
  return frequencyband_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraSettings::frequencyband() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.frequencyBand)
  return _internal_frequencyband();
}
inline void LoraSettings::_internal_set_frequencyband(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frequencyband_ = value;
}
inline void LoraSettings::set_frequencyband(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequencyband(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.frequencyBand)
}

// bytes deviceAddress = 5;
inline void LoraSettings::clear_deviceaddress() {
  deviceaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoraSettings::deviceaddress() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.deviceAddress)
  return _internal_deviceaddress();
}
inline void LoraSettings::set_deviceaddress(const std::string& value) {
  _internal_set_deviceaddress(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.deviceAddress)
}
inline std::string* LoraSettings::mutable_deviceaddress() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.deviceAddress)
  return _internal_mutable_deviceaddress();
}
inline const std::string& LoraSettings::_internal_deviceaddress() const {
  return deviceaddress_.GetNoArena();
}
inline void LoraSettings::_internal_set_deviceaddress(const std::string& value) {
  
  deviceaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoraSettings::set_deviceaddress(std::string&& value) {
  
  deviceaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.deviceAddress)
}
inline void LoraSettings::set_deviceaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.deviceAddress)
}
inline void LoraSettings::set_deviceaddress(const void* value, size_t size) {
  
  deviceaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.deviceAddress)
}
inline std::string* LoraSettings::_internal_mutable_deviceaddress() {
  
  return deviceaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoraSettings::release_deviceaddress() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.deviceAddress)
  
  return deviceaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoraSettings::set_allocated_deviceaddress(std::string* deviceaddress) {
  if (deviceaddress != nullptr) {
    
  } else {
    
  }
  deviceaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceaddress);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.deviceAddress)
}

// bytes networkSessionKey = 6;
inline void LoraSettings::clear_networksessionkey() {
  networksessionkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoraSettings::networksessionkey() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.networkSessionKey)
  return _internal_networksessionkey();
}
inline void LoraSettings::set_networksessionkey(const std::string& value) {
  _internal_set_networksessionkey(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.networkSessionKey)
}
inline std::string* LoraSettings::mutable_networksessionkey() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.networkSessionKey)
  return _internal_mutable_networksessionkey();
}
inline const std::string& LoraSettings::_internal_networksessionkey() const {
  return networksessionkey_.GetNoArena();
}
inline void LoraSettings::_internal_set_networksessionkey(const std::string& value) {
  
  networksessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoraSettings::set_networksessionkey(std::string&& value) {
  
  networksessionkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.networkSessionKey)
}
inline void LoraSettings::set_networksessionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  networksessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.networkSessionKey)
}
inline void LoraSettings::set_networksessionkey(const void* value, size_t size) {
  
  networksessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.networkSessionKey)
}
inline std::string* LoraSettings::_internal_mutable_networksessionkey() {
  
  return networksessionkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoraSettings::release_networksessionkey() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.networkSessionKey)
  
  return networksessionkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoraSettings::set_allocated_networksessionkey(std::string* networksessionkey) {
  if (networksessionkey != nullptr) {
    
  } else {
    
  }
  networksessionkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networksessionkey);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.networkSessionKey)
}

// bytes appSessionKey = 7;
inline void LoraSettings::clear_appsessionkey() {
  appsessionkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoraSettings::appsessionkey() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.appSessionKey)
  return _internal_appsessionkey();
}
inline void LoraSettings::set_appsessionkey(const std::string& value) {
  _internal_set_appsessionkey(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.appSessionKey)
}
inline std::string* LoraSettings::mutable_appsessionkey() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoraSettings.appSessionKey)
  return _internal_mutable_appsessionkey();
}
inline const std::string& LoraSettings::_internal_appsessionkey() const {
  return appsessionkey_.GetNoArena();
}
inline void LoraSettings::_internal_set_appsessionkey(const std::string& value) {
  
  appsessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoraSettings::set_appsessionkey(std::string&& value) {
  
  appsessionkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraSettings.appSessionKey)
}
inline void LoraSettings::set_appsessionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appsessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraSettings.appSessionKey)
}
inline void LoraSettings::set_appsessionkey(const void* value, size_t size) {
  
  appsessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraSettings.appSessionKey)
}
inline std::string* LoraSettings::_internal_mutable_appsessionkey() {
  
  return appsessionkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoraSettings::release_appsessionkey() {
  // @@protoc_insertion_point(field_release:fk_data.LoraSettings.appSessionKey)
  
  return appsessionkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoraSettings::set_allocated_appsessionkey(std::string* appsessionkey) {
  if (appsessionkey != nullptr) {
    
  } else {
    
  }
  appsessionkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appsessionkey);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraSettings.appSessionKey)
}

// uint32 uplinkCounter = 8;
inline void LoraSettings::clear_uplinkcounter() {
  uplinkcounter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraSettings::_internal_uplinkcounter() const {
  return uplinkcounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraSettings::uplinkcounter() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.uplinkCounter)
  return _internal_uplinkcounter();
}
inline void LoraSettings::_internal_set_uplinkcounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uplinkcounter_ = value;
}
inline void LoraSettings::set_uplinkcounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplinkcounter(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.uplinkCounter)
}

// uint32 downlinkCounter = 9;
inline void LoraSettings::clear_downlinkcounter() {
  downlinkcounter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraSettings::_internal_downlinkcounter() const {
  return downlinkcounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraSettings::downlinkcounter() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraSettings.downlinkCounter)
  return _internal_downlinkcounter();
}
inline void LoraSettings::_internal_set_downlinkcounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  downlinkcounter_ = value;
}
inline void LoraSettings::set_downlinkcounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_downlinkcounter(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraSettings.downlinkCounter)
}

// -------------------------------------------------------------------

// DataRecord

// .fk_data.LoggedReading loggedReading = 1;
inline bool DataRecord::_internal_has_loggedreading() const {
  return this != internal_default_instance() && loggedreading_ != nullptr;
}
inline bool DataRecord::has_loggedreading() const {
  return _internal_has_loggedreading();
}
inline void DataRecord::clear_loggedreading() {
  if (GetArenaNoVirtual() == nullptr && loggedreading_ != nullptr) {
    delete loggedreading_;
  }
  loggedreading_ = nullptr;
}
inline const ::fk_data::LoggedReading& DataRecord::_internal_loggedreading() const {
  const ::fk_data::LoggedReading* p = loggedreading_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::LoggedReading*>(
      &::fk_data::_LoggedReading_default_instance_);
}
inline const ::fk_data::LoggedReading& DataRecord::loggedreading() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.loggedReading)
  return _internal_loggedreading();
}
inline ::fk_data::LoggedReading* DataRecord::release_loggedreading() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.loggedReading)
  
  ::fk_data::LoggedReading* temp = loggedreading_;
  loggedreading_ = nullptr;
  return temp;
}
inline ::fk_data::LoggedReading* DataRecord::_internal_mutable_loggedreading() {
  
  if (loggedreading_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::LoggedReading>(GetArenaNoVirtual());
    loggedreading_ = p;
  }
  return loggedreading_;
}
inline ::fk_data::LoggedReading* DataRecord::mutable_loggedreading() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.loggedReading)
  return _internal_mutable_loggedreading();
}
inline void DataRecord::set_allocated_loggedreading(::fk_data::LoggedReading* loggedreading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loggedreading_;
  }
  if (loggedreading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loggedreading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loggedreading, submessage_arena);
    }
    
  } else {
    
  }
  loggedreading_ = loggedreading;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.loggedReading)
}

// .fk_data.Metadata metadata = 2;
inline bool DataRecord::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool DataRecord::has_metadata() const {
  return _internal_has_metadata();
}
inline void DataRecord::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::fk_data::Metadata& DataRecord::_internal_metadata() const {
  const ::fk_data::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::Metadata*>(
      &::fk_data::_Metadata_default_instance_);
}
inline const ::fk_data::Metadata& DataRecord::metadata() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.metadata)
  return _internal_metadata();
}
inline ::fk_data::Metadata* DataRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.metadata)
  
  ::fk_data::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::fk_data::Metadata* DataRecord::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::Metadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::fk_data::Metadata* DataRecord::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.metadata)
  return _internal_mutable_metadata();
}
inline void DataRecord::set_allocated_metadata(::fk_data::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.metadata)
}

// .fk_data.LogMessage log = 3;
inline bool DataRecord::_internal_has_log() const {
  return this != internal_default_instance() && log_ != nullptr;
}
inline bool DataRecord::has_log() const {
  return _internal_has_log();
}
inline void DataRecord::clear_log() {
  if (GetArenaNoVirtual() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
}
inline const ::fk_data::LogMessage& DataRecord::_internal_log() const {
  const ::fk_data::LogMessage* p = log_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::LogMessage*>(
      &::fk_data::_LogMessage_default_instance_);
}
inline const ::fk_data::LogMessage& DataRecord::log() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.log)
  return _internal_log();
}
inline ::fk_data::LogMessage* DataRecord::release_log() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.log)
  
  ::fk_data::LogMessage* temp = log_;
  log_ = nullptr;
  return temp;
}
inline ::fk_data::LogMessage* DataRecord::_internal_mutable_log() {
  
  if (log_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::LogMessage>(GetArenaNoVirtual());
    log_ = p;
  }
  return log_;
}
inline ::fk_data::LogMessage* DataRecord::mutable_log() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.log)
  return _internal_mutable_log();
}
inline void DataRecord::set_allocated_log(::fk_data::LogMessage* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete log_;
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.log)
}

// repeated .fk_data.LogMessage logs = 13;
inline int DataRecord::_internal_logs_size() const {
  return logs_.size();
}
inline int DataRecord::logs_size() const {
  return _internal_logs_size();
}
inline void DataRecord::clear_logs() {
  logs_.Clear();
}
inline ::fk_data::LogMessage* DataRecord::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::LogMessage >*
DataRecord::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.DataRecord.logs)
  return &logs_;
}
inline const ::fk_data::LogMessage& DataRecord::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::fk_data::LogMessage& DataRecord::logs(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.logs)
  return _internal_logs(index);
}
inline ::fk_data::LogMessage* DataRecord::_internal_add_logs() {
  return logs_.Add();
}
inline ::fk_data::LogMessage* DataRecord::add_logs() {
  // @@protoc_insertion_point(field_add:fk_data.DataRecord.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::LogMessage >&
DataRecord::logs() const {
  // @@protoc_insertion_point(field_list:fk_data.DataRecord.logs)
  return logs_;
}

// .fk_data.Status status = 4;
inline bool DataRecord::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DataRecord::has_status() const {
  return _internal_has_status();
}
inline void DataRecord::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::fk_data::Status& DataRecord::_internal_status() const {
  const ::fk_data::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::Status*>(
      &::fk_data::_Status_default_instance_);
}
inline const ::fk_data::Status& DataRecord::status() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.status)
  return _internal_status();
}
inline ::fk_data::Status* DataRecord::release_status() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.status)
  
  ::fk_data::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::fk_data::Status* DataRecord::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::fk_data::Status* DataRecord::mutable_status() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.status)
  return _internal_mutable_status();
}
inline void DataRecord::set_allocated_status(::fk_data::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.status)
}

// .fk_data.Readings readings = 5;
inline bool DataRecord::_internal_has_readings() const {
  return this != internal_default_instance() && readings_ != nullptr;
}
inline bool DataRecord::has_readings() const {
  return _internal_has_readings();
}
inline void DataRecord::clear_readings() {
  if (GetArenaNoVirtual() == nullptr && readings_ != nullptr) {
    delete readings_;
  }
  readings_ = nullptr;
}
inline const ::fk_data::Readings& DataRecord::_internal_readings() const {
  const ::fk_data::Readings* p = readings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::Readings*>(
      &::fk_data::_Readings_default_instance_);
}
inline const ::fk_data::Readings& DataRecord::readings() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.readings)
  return _internal_readings();
}
inline ::fk_data::Readings* DataRecord::release_readings() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.readings)
  
  ::fk_data::Readings* temp = readings_;
  readings_ = nullptr;
  return temp;
}
inline ::fk_data::Readings* DataRecord::_internal_mutable_readings() {
  
  if (readings_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::Readings>(GetArenaNoVirtual());
    readings_ = p;
  }
  return readings_;
}
inline ::fk_data::Readings* DataRecord::mutable_readings() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.readings)
  return _internal_mutable_readings();
}
inline void DataRecord::set_allocated_readings(::fk_data::Readings* readings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete readings_;
  }
  if (readings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readings, submessage_arena);
    }
    
  } else {
    
  }
  readings_ = readings;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.readings)
}

// repeated .fk_data.ModuleInfo modules = 6;
inline int DataRecord::_internal_modules_size() const {
  return modules_.size();
}
inline int DataRecord::modules_size() const {
  return _internal_modules_size();
}
inline void DataRecord::clear_modules() {
  modules_.Clear();
}
inline ::fk_data::ModuleInfo* DataRecord::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.modules)
  return modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo >*
DataRecord::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.DataRecord.modules)
  return &modules_;
}
inline const ::fk_data::ModuleInfo& DataRecord::_internal_modules(int index) const {
  return modules_.Get(index);
}
inline const ::fk_data::ModuleInfo& DataRecord::modules(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.modules)
  return _internal_modules(index);
}
inline ::fk_data::ModuleInfo* DataRecord::_internal_add_modules() {
  return modules_.Add();
}
inline ::fk_data::ModuleInfo* DataRecord::add_modules() {
  // @@protoc_insertion_point(field_add:fk_data.DataRecord.modules)
  return _internal_add_modules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fk_data::ModuleInfo >&
DataRecord::modules() const {
  // @@protoc_insertion_point(field_list:fk_data.DataRecord.modules)
  return modules_;
}

// .fk_data.Schedule schedule = 7;
inline bool DataRecord::_internal_has_schedule() const {
  return this != internal_default_instance() && schedule_ != nullptr;
}
inline bool DataRecord::has_schedule() const {
  return _internal_has_schedule();
}
inline void DataRecord::clear_schedule() {
  if (GetArenaNoVirtual() == nullptr && schedule_ != nullptr) {
    delete schedule_;
  }
  schedule_ = nullptr;
}
inline const ::fk_data::Schedule& DataRecord::_internal_schedule() const {
  const ::fk_data::Schedule* p = schedule_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::Schedule*>(
      &::fk_data::_Schedule_default_instance_);
}
inline const ::fk_data::Schedule& DataRecord::schedule() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.schedule)
  return _internal_schedule();
}
inline ::fk_data::Schedule* DataRecord::release_schedule() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.schedule)
  
  ::fk_data::Schedule* temp = schedule_;
  schedule_ = nullptr;
  return temp;
}
inline ::fk_data::Schedule* DataRecord::_internal_mutable_schedule() {
  
  if (schedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::Schedule>(GetArenaNoVirtual());
    schedule_ = p;
  }
  return schedule_;
}
inline ::fk_data::Schedule* DataRecord::mutable_schedule() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.schedule)
  return _internal_mutable_schedule();
}
inline void DataRecord::set_allocated_schedule(::fk_data::Schedule* schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete schedule_;
  }
  if (schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedule, submessage_arena);
    }
    
  } else {
    
  }
  schedule_ = schedule;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.schedule)
}

// uint64 meta = 8;
inline void DataRecord::clear_meta() {
  meta_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataRecord::_internal_meta() const {
  return meta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataRecord::meta() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.meta)
  return _internal_meta();
}
inline void DataRecord::_internal_set_meta(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  meta_ = value;
}
inline void DataRecord::set_meta(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_meta(value);
  // @@protoc_insertion_point(field_set:fk_data.DataRecord.meta)
}

// .fk_data.Identity identity = 9;
inline bool DataRecord::_internal_has_identity() const {
  return this != internal_default_instance() && identity_ != nullptr;
}
inline bool DataRecord::has_identity() const {
  return _internal_has_identity();
}
inline void DataRecord::clear_identity() {
  if (GetArenaNoVirtual() == nullptr && identity_ != nullptr) {
    delete identity_;
  }
  identity_ = nullptr;
}
inline const ::fk_data::Identity& DataRecord::_internal_identity() const {
  const ::fk_data::Identity* p = identity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::Identity*>(
      &::fk_data::_Identity_default_instance_);
}
inline const ::fk_data::Identity& DataRecord::identity() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.identity)
  return _internal_identity();
}
inline ::fk_data::Identity* DataRecord::release_identity() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.identity)
  
  ::fk_data::Identity* temp = identity_;
  identity_ = nullptr;
  return temp;
}
inline ::fk_data::Identity* DataRecord::_internal_mutable_identity() {
  
  if (identity_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::Identity>(GetArenaNoVirtual());
    identity_ = p;
  }
  return identity_;
}
inline ::fk_data::Identity* DataRecord::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.identity)
  return _internal_mutable_identity();
}
inline void DataRecord::set_allocated_identity(::fk_data::Identity* identity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete identity_;
  }
  if (identity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity, submessage_arena);
    }
    
  } else {
    
  }
  identity_ = identity;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.identity)
}

// .fk_data.Condition condition = 10;
inline bool DataRecord::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool DataRecord::has_condition() const {
  return _internal_has_condition();
}
inline void DataRecord::clear_condition() {
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::fk_data::Condition& DataRecord::_internal_condition() const {
  const ::fk_data::Condition* p = condition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::Condition*>(
      &::fk_data::_Condition_default_instance_);
}
inline const ::fk_data::Condition& DataRecord::condition() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.condition)
  return _internal_condition();
}
inline ::fk_data::Condition* DataRecord::release_condition() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.condition)
  
  ::fk_data::Condition* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::fk_data::Condition* DataRecord::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::Condition>(GetArenaNoVirtual());
    condition_ = p;
  }
  return condition_;
}
inline ::fk_data::Condition* DataRecord::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.condition)
  return _internal_mutable_condition();
}
inline void DataRecord::set_allocated_condition(::fk_data::Condition* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.condition)
}

// .fk_data.LoraSettings lora = 11;
inline bool DataRecord::_internal_has_lora() const {
  return this != internal_default_instance() && lora_ != nullptr;
}
inline bool DataRecord::has_lora() const {
  return _internal_has_lora();
}
inline void DataRecord::clear_lora() {
  if (GetArenaNoVirtual() == nullptr && lora_ != nullptr) {
    delete lora_;
  }
  lora_ = nullptr;
}
inline const ::fk_data::LoraSettings& DataRecord::_internal_lora() const {
  const ::fk_data::LoraSettings* p = lora_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::LoraSettings*>(
      &::fk_data::_LoraSettings_default_instance_);
}
inline const ::fk_data::LoraSettings& DataRecord::lora() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.lora)
  return _internal_lora();
}
inline ::fk_data::LoraSettings* DataRecord::release_lora() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.lora)
  
  ::fk_data::LoraSettings* temp = lora_;
  lora_ = nullptr;
  return temp;
}
inline ::fk_data::LoraSettings* DataRecord::_internal_mutable_lora() {
  
  if (lora_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::LoraSettings>(GetArenaNoVirtual());
    lora_ = p;
  }
  return lora_;
}
inline ::fk_data::LoraSettings* DataRecord::mutable_lora() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.lora)
  return _internal_mutable_lora();
}
inline void DataRecord::set_allocated_lora(::fk_data::LoraSettings* lora) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lora_;
  }
  if (lora) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lora = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lora, submessage_arena);
    }
    
  } else {
    
  }
  lora_ = lora;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.lora)
}

// .fk_data.NetworkSettings network = 12;
inline bool DataRecord::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool DataRecord::has_network() const {
  return _internal_has_network();
}
inline void DataRecord::clear_network() {
  if (GetArenaNoVirtual() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
inline const ::fk_data::NetworkSettings& DataRecord::_internal_network() const {
  const ::fk_data::NetworkSettings* p = network_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fk_data::NetworkSettings*>(
      &::fk_data::_NetworkSettings_default_instance_);
}
inline const ::fk_data::NetworkSettings& DataRecord::network() const {
  // @@protoc_insertion_point(field_get:fk_data.DataRecord.network)
  return _internal_network();
}
inline ::fk_data::NetworkSettings* DataRecord::release_network() {
  // @@protoc_insertion_point(field_release:fk_data.DataRecord.network)
  
  ::fk_data::NetworkSettings* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::fk_data::NetworkSettings* DataRecord::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::fk_data::NetworkSettings>(GetArenaNoVirtual());
    network_ = p;
  }
  return network_;
}
inline ::fk_data::NetworkSettings* DataRecord::mutable_network() {
  // @@protoc_insertion_point(field_mutable:fk_data.DataRecord.network)
  return _internal_mutable_network();
}
inline void DataRecord::set_allocated_network(::fk_data::NetworkSettings* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:fk_data.DataRecord.network)
}

// -------------------------------------------------------------------

// SignedRecord

// .fk_data.SignedRecordKind kind = 1;
inline void SignedRecord::clear_kind() {
  kind_ = 0;
}
inline ::fk_data::SignedRecordKind SignedRecord::_internal_kind() const {
  return static_cast< ::fk_data::SignedRecordKind >(kind_);
}
inline ::fk_data::SignedRecordKind SignedRecord::kind() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.kind)
  return _internal_kind();
}
inline void SignedRecord::_internal_set_kind(::fk_data::SignedRecordKind value) {
  
  kind_ = value;
}
inline void SignedRecord::set_kind(::fk_data::SignedRecordKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.kind)
}

// int64 time = 2;
inline void SignedRecord::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignedRecord::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SignedRecord::time() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.time)
  return _internal_time();
}
inline void SignedRecord::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void SignedRecord::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.time)
}

// bytes data = 3;
inline void SignedRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignedRecord::data() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.data)
  return _internal_data();
}
inline void SignedRecord::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.data)
}
inline std::string* SignedRecord::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fk_data.SignedRecord.data)
  return _internal_mutable_data();
}
inline const std::string& SignedRecord::_internal_data() const {
  return data_.GetNoArena();
}
inline void SignedRecord::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignedRecord::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SignedRecord.data)
}
inline void SignedRecord::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SignedRecord.data)
}
inline void SignedRecord::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SignedRecord.data)
}
inline std::string* SignedRecord::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignedRecord::release_data() {
  // @@protoc_insertion_point(field_release:fk_data.SignedRecord.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignedRecord::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SignedRecord.data)
}

// bytes hash = 4;
inline void SignedRecord::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignedRecord::hash() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.hash)
  return _internal_hash();
}
inline void SignedRecord::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.hash)
}
inline std::string* SignedRecord::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:fk_data.SignedRecord.hash)
  return _internal_mutable_hash();
}
inline const std::string& SignedRecord::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void SignedRecord::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignedRecord::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.SignedRecord.hash)
}
inline void SignedRecord::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.SignedRecord.hash)
}
inline void SignedRecord::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.SignedRecord.hash)
}
inline std::string* SignedRecord::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignedRecord::release_hash() {
  // @@protoc_insertion_point(field_release:fk_data.SignedRecord.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignedRecord::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:fk_data.SignedRecord.hash)
}

// uint64 record = 5;
inline void SignedRecord::clear_record() {
  record_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignedRecord::_internal_record() const {
  return record_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignedRecord::record() const {
  // @@protoc_insertion_point(field_get:fk_data.SignedRecord.record)
  return _internal_record();
}
inline void SignedRecord::_internal_set_record(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  record_ = value;
}
inline void SignedRecord::set_record(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:fk_data.SignedRecord.record)
}

// -------------------------------------------------------------------

// LoraRecord

// bytes deviceId = 1;
inline void LoraRecord::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoraRecord::deviceid() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraRecord.deviceId)
  return _internal_deviceid();
}
inline void LoraRecord::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraRecord.deviceId)
}
inline std::string* LoraRecord::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoraRecord.deviceId)
  return _internal_mutable_deviceid();
}
inline const std::string& LoraRecord::_internal_deviceid() const {
  return deviceid_.GetNoArena();
}
inline void LoraRecord::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoraRecord::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraRecord.deviceId)
}
inline void LoraRecord::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraRecord.deviceId)
}
inline void LoraRecord::set_deviceid(const void* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraRecord.deviceId)
}
inline std::string* LoraRecord::_internal_mutable_deviceid() {
  
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoraRecord::release_deviceid() {
  // @@protoc_insertion_point(field_release:fk_data.LoraRecord.deviceId)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoraRecord::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraRecord.deviceId)
}

// int64 time = 2;
inline void LoraRecord::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoraRecord::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoraRecord::time() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraRecord.time)
  return _internal_time();
}
inline void LoraRecord::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void LoraRecord::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraRecord.time)
}

// uint64 number = 3;
inline void LoraRecord::clear_number() {
  number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoraRecord::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoraRecord::number() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraRecord.number)
  return _internal_number();
}
inline void LoraRecord::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  number_ = value;
}
inline void LoraRecord::set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraRecord.number)
}

// uint32 module = 4;
inline void LoraRecord::clear_module() {
  module_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraRecord::_internal_module() const {
  return module_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoraRecord::module() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraRecord.module)
  return _internal_module();
}
inline void LoraRecord::_internal_set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  module_ = value;
}
inline void LoraRecord::set_module(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraRecord.module)
}

// uint64 sensor = 5;
inline void LoraRecord::clear_sensor() {
  sensor_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoraRecord::_internal_sensor() const {
  return sensor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoraRecord::sensor() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraRecord.sensor)
  return _internal_sensor();
}
inline void LoraRecord::_internal_set_sensor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sensor_ = value;
}
inline void LoraRecord::set_sensor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sensor(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraRecord.sensor)
}

// repeated float values = 6;
inline int LoraRecord::_internal_values_size() const {
  return values_.size();
}
inline int LoraRecord::values_size() const {
  return _internal_values_size();
}
inline void LoraRecord::clear_values() {
  values_.Clear();
}
inline float LoraRecord::_internal_values(int index) const {
  return values_.Get(index);
}
inline float LoraRecord::values(int index) const {
  // @@protoc_insertion_point(field_get:fk_data.LoraRecord.values)
  return _internal_values(index);
}
inline void LoraRecord::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:fk_data.LoraRecord.values)
}
inline void LoraRecord::_internal_add_values(float value) {
  values_.Add(value);
}
inline void LoraRecord::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:fk_data.LoraRecord.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LoraRecord::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LoraRecord::values() const {
  // @@protoc_insertion_point(field_list:fk_data.LoraRecord.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LoraRecord::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LoraRecord::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:fk_data.LoraRecord.values)
  return _internal_mutable_values();
}

// bytes data = 7;
inline void LoraRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoraRecord::data() const {
  // @@protoc_insertion_point(field_get:fk_data.LoraRecord.data)
  return _internal_data();
}
inline void LoraRecord::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:fk_data.LoraRecord.data)
}
inline std::string* LoraRecord::mutable_data() {
  // @@protoc_insertion_point(field_mutable:fk_data.LoraRecord.data)
  return _internal_mutable_data();
}
inline const std::string& LoraRecord::_internal_data() const {
  return data_.GetNoArena();
}
inline void LoraRecord::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoraRecord::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fk_data.LoraRecord.data)
}
inline void LoraRecord::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fk_data.LoraRecord.data)
}
inline void LoraRecord::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fk_data.LoraRecord.data)
}
inline std::string* LoraRecord::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoraRecord::release_data() {
  // @@protoc_insertion_point(field_release:fk_data.LoraRecord.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoraRecord::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fk_data.LoraRecord.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fk_data

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fk_data::DownloadFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fk_data::DownloadFlags>() {
  return ::fk_data::DownloadFlags_descriptor();
}
template <> struct is_proto_enum< ::fk_data::ConditionFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fk_data::ConditionFlags>() {
  return ::fk_data::ConditionFlags_descriptor();
}
template <> struct is_proto_enum< ::fk_data::SignedRecordKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fk_data::SignedRecordKind>() {
  return ::fk_data::SignedRecordKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fk_2ddata_2eproto
