// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fk-data.proto

#include "fk-data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLocation_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Firmware_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identity_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobSchedule_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMessage_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoggedReading_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoraSettings_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Metadata_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModuleHeader_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModuleInfo_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkInfo_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkSettings_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Readings_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Schedule_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorAndValue_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorGroup_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorInfo_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorReading_fk_2ddata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fk_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_fk_2ddata_2eproto;
namespace fk_data {
class DeviceLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceLocation> _instance;
} _DeviceLocation_default_instance_;
class SensorReadingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorReading> _instance;
} _SensorReading_default_instance_;
class LoggedReadingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggedReading> _instance;
} _LoggedReading_default_instance_;
class SensorAndValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorAndValue> _instance;
} _SensorAndValue_default_instance_;
class ModuleHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModuleHeader> _instance;
} _ModuleHeader_default_instance_;
class ModuleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModuleInfo> _instance;
} _ModuleInfo_default_instance_;
class SensorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorInfo> _instance;
} _SensorInfo_default_instance_;
class FirmwareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Firmware> _instance;
} _Firmware_default_instance_;
class MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata> _instance;
} _Metadata_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class LogMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMessage> _instance;
} _LogMessage_default_instance_;
class SensorGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorGroup> _instance;
} _SensorGroup_default_instance_;
class ReadingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Readings> _instance;
} _Readings_default_instance_;
class JobScheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobSchedule> _instance;
} _JobSchedule_default_instance_;
class ScheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Schedule> _instance;
} _Schedule_default_instance_;
class IdentityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identity> _instance;
} _Identity_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class NetworkInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkInfo> _instance;
} _NetworkInfo_default_instance_;
class NetworkSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkSettings> _instance;
} _NetworkSettings_default_instance_;
class LoraSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoraSettings> _instance;
} _LoraSettings_default_instance_;
class DataRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataRecord> _instance;
} _DataRecord_default_instance_;
class SignedRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedRecord> _instance;
} _SignedRecord_default_instance_;
class LoraRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoraRecord> _instance;
} _LoraRecord_default_instance_;
}  // namespace fk_data
static void InitDefaultsscc_info_Condition_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_Condition_default_instance_;
    new (ptr) ::fk_data::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Condition_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_DataRecord_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_DataRecord_default_instance_;
    new (ptr) ::fk_data::DataRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::DataRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_DataRecord_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_DataRecord_fk_2ddata_2eproto}, {
      &scc_info_LoggedReading_fk_2ddata_2eproto.base,
      &scc_info_Metadata_fk_2ddata_2eproto.base,
      &scc_info_LogMessage_fk_2ddata_2eproto.base,
      &scc_info_Status_fk_2ddata_2eproto.base,
      &scc_info_Readings_fk_2ddata_2eproto.base,
      &scc_info_ModuleInfo_fk_2ddata_2eproto.base,
      &scc_info_Schedule_fk_2ddata_2eproto.base,
      &scc_info_Identity_fk_2ddata_2eproto.base,
      &scc_info_Condition_fk_2ddata_2eproto.base,
      &scc_info_LoraSettings_fk_2ddata_2eproto.base,
      &scc_info_NetworkSettings_fk_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_DeviceLocation_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_DeviceLocation_default_instance_;
    new (ptr) ::fk_data::DeviceLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::DeviceLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceLocation_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceLocation_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_Firmware_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_Firmware_default_instance_;
    new (ptr) ::fk_data::Firmware();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::Firmware::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Firmware_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Firmware_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_Identity_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_Identity_default_instance_;
    new (ptr) ::fk_data::Identity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::Identity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identity_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Identity_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_JobSchedule_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_JobSchedule_default_instance_;
    new (ptr) ::fk_data::JobSchedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::JobSchedule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobSchedule_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JobSchedule_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_LogMessage_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_LogMessage_default_instance_;
    new (ptr) ::fk_data::LogMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::LogMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMessage_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogMessage_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_LoggedReading_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_LoggedReading_default_instance_;
    new (ptr) ::fk_data::LoggedReading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::LoggedReading::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoggedReading_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoggedReading_fk_2ddata_2eproto}, {
      &scc_info_DeviceLocation_fk_2ddata_2eproto.base,
      &scc_info_SensorReading_fk_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_LoraRecord_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_LoraRecord_default_instance_;
    new (ptr) ::fk_data::LoraRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::LoraRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoraRecord_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoraRecord_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_LoraSettings_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_LoraSettings_default_instance_;
    new (ptr) ::fk_data::LoraSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::LoraSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoraSettings_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoraSettings_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_Metadata_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_Metadata_default_instance_;
    new (ptr) ::fk_data::Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Metadata_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Metadata_fk_2ddata_2eproto}, {
      &scc_info_SensorInfo_fk_2ddata_2eproto.base,
      &scc_info_ModuleInfo_fk_2ddata_2eproto.base,
      &scc_info_Firmware_fk_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_ModuleHeader_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_ModuleHeader_default_instance_;
    new (ptr) ::fk_data::ModuleHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::ModuleHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModuleHeader_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModuleHeader_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_ModuleInfo_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_ModuleInfo_default_instance_;
    new (ptr) ::fk_data::ModuleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::ModuleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModuleInfo_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModuleInfo_fk_2ddata_2eproto}, {
      &scc_info_ModuleHeader_fk_2ddata_2eproto.base,
      &scc_info_Firmware_fk_2ddata_2eproto.base,
      &scc_info_SensorInfo_fk_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_NetworkInfo_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_NetworkInfo_default_instance_;
    new (ptr) ::fk_data::NetworkInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::NetworkInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkInfo_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkInfo_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_NetworkSettings_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_NetworkSettings_default_instance_;
    new (ptr) ::fk_data::NetworkSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::NetworkSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkSettings_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetworkSettings_fk_2ddata_2eproto}, {
      &scc_info_NetworkInfo_fk_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_Readings_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_Readings_default_instance_;
    new (ptr) ::fk_data::Readings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::Readings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Readings_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Readings_fk_2ddata_2eproto}, {
      &scc_info_DeviceLocation_fk_2ddata_2eproto.base,
      &scc_info_SensorGroup_fk_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_Schedule_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_Schedule_default_instance_;
    new (ptr) ::fk_data::Schedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::Schedule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Schedule_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Schedule_fk_2ddata_2eproto}, {
      &scc_info_JobSchedule_fk_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_SensorAndValue_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_SensorAndValue_default_instance_;
    new (ptr) ::fk_data::SensorAndValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::SensorAndValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorAndValue_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorAndValue_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_SensorGroup_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_SensorGroup_default_instance_;
    new (ptr) ::fk_data::SensorGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::SensorGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorGroup_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SensorGroup_fk_2ddata_2eproto}, {
      &scc_info_SensorAndValue_fk_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_SensorInfo_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_SensorInfo_default_instance_;
    new (ptr) ::fk_data::SensorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::SensorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorInfo_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorInfo_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_SensorReading_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_SensorReading_default_instance_;
    new (ptr) ::fk_data::SensorReading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::SensorReading::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorReading_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorReading_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_SignedRecord_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_SignedRecord_default_instance_;
    new (ptr) ::fk_data::SignedRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::SignedRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignedRecord_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignedRecord_fk_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_Status_fk_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fk_data::_Status_default_instance_;
    new (ptr) ::fk_data::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fk_data::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_fk_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_fk_2ddata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fk_2ddata_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_fk_2ddata_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fk_2ddata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fk_2ddata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, enabled_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, fix_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, time_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, longitude_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, latitude_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, altitude_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, coordinates_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, satellites_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DeviceLocation, hdop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorReading, reading_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorReading, time_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorReading, sensor_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorReading, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::LoggedReading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::LoggedReading, version_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoggedReading, location_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoggedReading, reading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorAndValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorAndValue, sensor_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorAndValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleHeader, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleHeader, kind_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleHeader, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, position_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, address_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, name_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, header_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, firmware_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, sensors_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, id_),
  PROTOBUF_FIELD_OFFSET(::fk_data::ModuleInfo, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorInfo, number_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorInfo, name_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorInfo, unitofmeasure_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorInfo, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::Firmware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::Firmware, version_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Firmware, build_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Firmware, number_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Firmware, timestamp_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Firmware, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, deviceid_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, time_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, git_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, build_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, resetcause_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, sensors_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, modules_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, firmware_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Metadata, generation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::Status, time_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Status, uptime_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Status, battery_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Status, memory_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Status, busy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::LogMessage, time_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LogMessage, uptime_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LogMessage, level_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LogMessage, facility_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LogMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorGroup, module_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SensorGroup, readings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::Readings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::Readings, time_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Readings, reading_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Readings, flags_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Readings, meta_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Readings, uptime_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Readings, location_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Readings, sensorgroups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::JobSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::JobSchedule, cron_),
  PROTOBUF_FIELD_OFFSET(::fk_data::JobSchedule, interval_),
  PROTOBUF_FIELD_OFFSET(::fk_data::JobSchedule, repeated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::Schedule, readings_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Schedule, network_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Schedule, lora_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Schedule, gps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::Identity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::Identity, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::Condition, flags_),
  PROTOBUF_FIELD_OFFSET(::fk_data::Condition, recording_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::NetworkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::NetworkInfo, ssid_),
  PROTOBUF_FIELD_OFFSET(::fk_data::NetworkInfo, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::NetworkSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::NetworkSettings, networks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, deviceeui_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, appkey_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, appeui_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, frequencyband_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, deviceaddress_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, networksessionkey_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, appsessionkey_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, uplinkcounter_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraSettings, downlinkcounter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, loggedreading_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, metadata_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, log_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, logs_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, status_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, readings_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, modules_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, schedule_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, meta_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, identity_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, condition_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, lora_),
  PROTOBUF_FIELD_OFFSET(::fk_data::DataRecord, network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::SignedRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::SignedRecord, kind_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SignedRecord, time_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SignedRecord, data_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SignedRecord, hash_),
  PROTOBUF_FIELD_OFFSET(::fk_data::SignedRecord, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraRecord, deviceid_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraRecord, time_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraRecord, number_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraRecord, module_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraRecord, sensor_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraRecord, values_),
  PROTOBUF_FIELD_OFFSET(::fk_data::LoraRecord, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fk_data::DeviceLocation)},
  { 14, -1, sizeof(::fk_data::SensorReading)},
  { 23, -1, sizeof(::fk_data::LoggedReading)},
  { 31, -1, sizeof(::fk_data::SensorAndValue)},
  { 38, -1, sizeof(::fk_data::ModuleHeader)},
  { 46, -1, sizeof(::fk_data::ModuleInfo)},
  { 59, -1, sizeof(::fk_data::SensorInfo)},
  { 68, -1, sizeof(::fk_data::Firmware)},
  { 78, -1, sizeof(::fk_data::Metadata)},
  { 92, -1, sizeof(::fk_data::Status)},
  { 102, -1, sizeof(::fk_data::LogMessage)},
  { 112, -1, sizeof(::fk_data::SensorGroup)},
  { 119, -1, sizeof(::fk_data::Readings)},
  { 131, -1, sizeof(::fk_data::JobSchedule)},
  { 139, -1, sizeof(::fk_data::Schedule)},
  { 148, -1, sizeof(::fk_data::Identity)},
  { 154, -1, sizeof(::fk_data::Condition)},
  { 161, -1, sizeof(::fk_data::NetworkInfo)},
  { 168, -1, sizeof(::fk_data::NetworkSettings)},
  { 174, -1, sizeof(::fk_data::LoraSettings)},
  { 188, -1, sizeof(::fk_data::DataRecord)},
  { 206, -1, sizeof(::fk_data::SignedRecord)},
  { 216, -1, sizeof(::fk_data::LoraRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_DeviceLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_SensorReading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_LoggedReading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_SensorAndValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_ModuleHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_ModuleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_SensorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_Firmware_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_LogMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_SensorGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_Readings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_JobSchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_Schedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_Identity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_NetworkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_NetworkSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_LoraSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_DataRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_SignedRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fk_data::_LoraRecord_default_instance_),
};

const char descriptor_table_protodef_fk_2ddata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rfk-data.proto\022\007fk_data\"\252\001\n\016DeviceLocat"
  "ion\022\017\n\007enabled\030\007 \001(\r\022\013\n\003fix\030\001 \001(\r\022\014\n\004tim"
  "e\030\002 \001(\003\022\021\n\tlongitude\030\003 \001(\002\022\020\n\010latitude\030\004"
  " \001(\002\022\020\n\010altitude\030\005 \001(\002\022\023\n\013coordinates\030\006 "
  "\003(\002\022\022\n\nsatellites\030\010 \001(\r\022\014\n\004hdop\030\t \001(\r\"M\n"
  "\rSensorReading\022\017\n\007reading\030\001 \001(\r\022\014\n\004time\030"
  "\002 \001(\003\022\016\n\006sensor\030\003 \001(\r\022\r\n\005value\030\004 \001(\002\"t\n\r"
  "LoggedReading\022\017\n\007version\030\001 \001(\r\022)\n\010locati"
  "on\030\002 \001(\0132\027.fk_data.DeviceLocation\022\'\n\007rea"
  "ding\030\003 \001(\0132\026.fk_data.SensorReading\"/\n\016Se"
  "nsorAndValue\022\016\n\006sensor\030\001 \001(\r\022\r\n\005value\030\002 "
  "\001(\002\"C\n\014ModuleHeader\022\024\n\014manufacturer\030\001 \001("
  "\r\022\014\n\004kind\030\002 \001(\r\022\017\n\007version\030\003 \001(\r\"\312\001\n\nMod"
  "uleInfo\022\020\n\010position\030\001 \001(\r\022\017\n\007address\030\002 \001"
  "(\r\022\014\n\004name\030\003 \001(\t\022%\n\006header\030\004 \001(\0132\025.fk_da"
  "ta.ModuleHeader\022#\n\010firmware\030\005 \001(\0132\021.fk_d"
  "ata.Firmware\022$\n\007sensors\030\006 \003(\0132\023.fk_data."
  "SensorInfo\022\n\n\002id\030\007 \001(\014\022\r\n\005flags\030\010 \001(\r\"P\n"
  "\nSensorInfo\022\016\n\006number\030\001 \001(\r\022\014\n\004name\030\002 \001("
  "\t\022\025\n\runitOfMeasure\030\003 \001(\t\022\r\n\005flags\030\004 \001(\r\""
  "[\n\010Firmware\022\017\n\007version\030\001 \001(\t\022\r\n\005build\030\002 "
  "\001(\t\022\016\n\006number\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\004\022\014"
  "\n\004hash\030\005 \001(\t\"\337\001\n\010Metadata\022\020\n\010deviceId\030\001 "
  "\001(\014\022\014\n\004time\030\002 \001(\003\022\013\n\003git\030\003 \001(\t\022\r\n\005build\030"
  "\007 \001(\t\022\022\n\nresetCause\030\004 \001(\r\022$\n\007sensors\030\005 \003"
  "(\0132\023.fk_data.SensorInfo\022$\n\007modules\030\006 \003(\013"
  "2\023.fk_data.ModuleInfo\022#\n\010firmware\030\010 \001(\0132"
  "\021.fk_data.Firmware\022\022\n\ngeneration\030\t \001(\014\"U"
  "\n\006Status\022\014\n\004time\030\001 \001(\003\022\016\n\006uptime\030\002 \001(\r\022\017"
  "\n\007battery\030\003 \001(\002\022\016\n\006memory\030\004 \001(\r\022\014\n\004busy\030"
  "\005 \001(\004\"\\\n\nLogMessage\022\014\n\004time\030\001 \001(\003\022\016\n\006upt"
  "ime\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\022\020\n\010facility\030\004 \001"
  "(\t\022\017\n\007message\030\005 \001(\t\"H\n\013SensorGroup\022\016\n\006mo"
  "dule\030\001 \001(\r\022)\n\010readings\030\002 \003(\0132\027.fk_data.S"
  "ensorAndValue\"\255\001\n\010Readings\022\014\n\004time\030\001 \001(\003"
  "\022\017\n\007reading\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\014\n\004meta"
  "\030\006 \001(\r\022\016\n\006uptime\030\007 \001(\r\022)\n\010location\030\004 \001(\013"
  "2\027.fk_data.DeviceLocation\022*\n\014sensorGroup"
  "s\030\005 \003(\0132\024.fk_data.SensorGroup\"\?\n\013JobSche"
  "dule\022\014\n\004cron\030\001 \001(\014\022\020\n\010interval\030\002 \001(\r\022\020\n\010"
  "repeated\030\003 \001(\r\"\240\001\n\010Schedule\022&\n\010readings\030"
  "\001 \001(\0132\024.fk_data.JobSchedule\022%\n\007network\030\002"
  " \001(\0132\024.fk_data.JobSchedule\022\"\n\004lora\030\003 \001(\013"
  "2\024.fk_data.JobSchedule\022!\n\003gps\030\004 \001(\0132\024.fk"
  "_data.JobSchedule\"\030\n\010Identity\022\014\n\004name\030\001 "
  "\001(\t\"-\n\tCondition\022\r\n\005flags\030\001 \001(\r\022\021\n\trecor"
  "ding\030\002 \001(\r\"-\n\013NetworkInfo\022\014\n\004ssid\030\001 \001(\t\022"
  "\020\n\010password\030\002 \001(\t\"9\n\017NetworkSettings\022&\n\010"
  "networks\030\001 \003(\0132\024.fk_data.NetworkInfo\"\321\001\n"
  "\014LoraSettings\022\021\n\tdeviceEui\030\001 \001(\014\022\016\n\006appK"
  "ey\030\002 \001(\014\022\016\n\006appEui\030\003 \001(\014\022\025\n\rfrequencyBan"
  "d\030\004 \001(\r\022\025\n\rdeviceAddress\030\005 \001(\014\022\031\n\021networ"
  "kSessionKey\030\006 \001(\014\022\025\n\rappSessionKey\030\007 \001(\014"
  "\022\025\n\ruplinkCounter\030\010 \001(\r\022\027\n\017downlinkCount"
  "er\030\t \001(\r\"\340\003\n\nDataRecord\022-\n\rloggedReading"
  "\030\001 \001(\0132\026.fk_data.LoggedReading\022#\n\010metada"
  "ta\030\002 \001(\0132\021.fk_data.Metadata\022 \n\003log\030\003 \001(\013"
  "2\023.fk_data.LogMessage\022!\n\004logs\030\r \003(\0132\023.fk"
  "_data.LogMessage\022\037\n\006status\030\004 \001(\0132\017.fk_da"
  "ta.Status\022#\n\010readings\030\005 \001(\0132\021.fk_data.Re"
  "adings\022$\n\007modules\030\006 \003(\0132\023.fk_data.Module"
  "Info\022#\n\010schedule\030\007 \001(\0132\021.fk_data.Schedul"
  "e\022\014\n\004meta\030\010 \001(\004\022#\n\010identity\030\t \001(\0132\021.fk_d"
  "ata.Identity\022%\n\tcondition\030\n \001(\0132\022.fk_dat"
  "a.Condition\022#\n\004lora\030\013 \001(\0132\025.fk_data.Lora"
  "Settings\022)\n\007network\030\014 \001(\0132\030.fk_data.Netw"
  "orkSettings\"q\n\014SignedRecord\022\'\n\004kind\030\001 \001("
  "\0162\031.fk_data.SignedRecordKind\022\014\n\004time\030\002 \001"
  "(\003\022\014\n\004data\030\003 \001(\014\022\014\n\004hash\030\004 \001(\014\022\016\n\006record"
  "\030\005 \001(\004\"z\n\nLoraRecord\022\020\n\010deviceId\030\001 \001(\014\022\014"
  "\n\004time\030\002 \001(\003\022\016\n\006number\030\003 \001(\004\022\016\n\006module\030\004"
  " \001(\r\022\016\n\006sensor\030\005 \001(\004\022\016\n\006values\030\006 \003(\002\022\014\n\004"
  "data\030\007 \001(\014*b\n\rDownloadFlags\022\026\n\022READING_F"
  "LAGS_NONE\020\000\022\037\n\033READING_FLAGS_NOT_RECORDI"
  "NG\020\001\022\030\n\024READING_FLAGS_MANUAL\020\002*I\n\016Condit"
  "ionFlags\022\030\n\024CONDITION_FLAGS_NONE\020\000\022\035\n\031CO"
  "NDITION_FLAGS_RECORDING\020\001*\317\001\n\020SignedReco"
  "rdKind\022\033\n\027SIGNED_RECORD_KIND_NONE\020\000\022\036\n\032S"
  "IGNED_RECORD_KIND_MODULES\020\001\022\037\n\033SIGNED_RE"
  "CORD_KIND_SCHEDULE\020\002\022\034\n\030SIGNED_RECORD_KI"
  "ND_STATE\020\003\022 \n\034SIGNED_RECORD_KIND_RAW_STA"
  "TE\020\004\022\035\n\030SIGNED_RECORD_KIND_OTHER\020\377\001B\026\n\024o"
  "rg.fieldkit.data.pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fk_2ddata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fk_2ddata_2eproto_sccs[23] = {
  &scc_info_Condition_fk_2ddata_2eproto.base,
  &scc_info_DataRecord_fk_2ddata_2eproto.base,
  &scc_info_DeviceLocation_fk_2ddata_2eproto.base,
  &scc_info_Firmware_fk_2ddata_2eproto.base,
  &scc_info_Identity_fk_2ddata_2eproto.base,
  &scc_info_JobSchedule_fk_2ddata_2eproto.base,
  &scc_info_LogMessage_fk_2ddata_2eproto.base,
  &scc_info_LoggedReading_fk_2ddata_2eproto.base,
  &scc_info_LoraRecord_fk_2ddata_2eproto.base,
  &scc_info_LoraSettings_fk_2ddata_2eproto.base,
  &scc_info_Metadata_fk_2ddata_2eproto.base,
  &scc_info_ModuleHeader_fk_2ddata_2eproto.base,
  &scc_info_ModuleInfo_fk_2ddata_2eproto.base,
  &scc_info_NetworkInfo_fk_2ddata_2eproto.base,
  &scc_info_NetworkSettings_fk_2ddata_2eproto.base,
  &scc_info_Readings_fk_2ddata_2eproto.base,
  &scc_info_Schedule_fk_2ddata_2eproto.base,
  &scc_info_SensorAndValue_fk_2ddata_2eproto.base,
  &scc_info_SensorGroup_fk_2ddata_2eproto.base,
  &scc_info_SensorInfo_fk_2ddata_2eproto.base,
  &scc_info_SensorReading_fk_2ddata_2eproto.base,
  &scc_info_SignedRecord_fk_2ddata_2eproto.base,
  &scc_info_Status_fk_2ddata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fk_2ddata_2eproto_once;
static bool descriptor_table_fk_2ddata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fk_2ddata_2eproto = {
  &descriptor_table_fk_2ddata_2eproto_initialized, descriptor_table_protodef_fk_2ddata_2eproto, "fk-data.proto", 3307,
  &descriptor_table_fk_2ddata_2eproto_once, descriptor_table_fk_2ddata_2eproto_sccs, descriptor_table_fk_2ddata_2eproto_deps, 23, 0,
  schemas, file_default_instances, TableStruct_fk_2ddata_2eproto::offsets,
  file_level_metadata_fk_2ddata_2eproto, 23, file_level_enum_descriptors_fk_2ddata_2eproto, file_level_service_descriptors_fk_2ddata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fk_2ddata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fk_2ddata_2eproto), true);
namespace fk_data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fk_2ddata_2eproto);
  return file_level_enum_descriptors_fk_2ddata_2eproto[0];
}
bool DownloadFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fk_2ddata_2eproto);
  return file_level_enum_descriptors_fk_2ddata_2eproto[1];
}
bool ConditionFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignedRecordKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fk_2ddata_2eproto);
  return file_level_enum_descriptors_fk_2ddata_2eproto[2];
}
bool SignedRecordKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DeviceLocation::InitAsDefaultInstance() {
}
class DeviceLocation::_Internal {
 public:
};

DeviceLocation::DeviceLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.DeviceLocation)
}
DeviceLocation::DeviceLocation(const DeviceLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      coordinates_(from.coordinates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&hdop_) -
    reinterpret_cast<char*>(&time_)) + sizeof(hdop_));
  // @@protoc_insertion_point(copy_constructor:fk_data.DeviceLocation)
}

void DeviceLocation::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hdop_) -
      reinterpret_cast<char*>(&time_)) + sizeof(hdop_));
}

DeviceLocation::~DeviceLocation() {
  // @@protoc_insertion_point(destructor:fk_data.DeviceLocation)
  SharedDtor();
}

void DeviceLocation::SharedDtor() {
}

void DeviceLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceLocation& DeviceLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceLocation_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void DeviceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.DeviceLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinates_.Clear();
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hdop_) -
      reinterpret_cast<char*>(&time_)) + sizeof(hdop_));
  _internal_metadata_.Clear();
}

const char* DeviceLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 fix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float coordinates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_coordinates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_coordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 satellites = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hdop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.DeviceLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fix = 1;
  if (this->fix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fix(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // float longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_longitude(), target);
  }

  // float latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_latitude(), target);
  }

  // float altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_altitude(), target);
  }

  // repeated float coordinates = 6;
  if (this->_internal_coordinates_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_coordinates(), target);
  }

  // uint32 enabled = 7;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_enabled(), target);
  }

  // uint32 satellites = 8;
  if (this->satellites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_satellites(), target);
  }

  // uint32 hdop = 9;
  if (this->hdop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hdop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.DeviceLocation)
  return target;
}

size_t DeviceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.DeviceLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float coordinates = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coordinates_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coordinates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint32 fix = 1;
  if (this->fix() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fix());
  }

  // float longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float latitude = 4;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 enabled = 7;
  if (this->enabled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enabled());
  }

  // uint32 satellites = 8;
  if (this->satellites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_satellites());
  }

  // uint32 hdop = 9;
  if (this->hdop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hdop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.DeviceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.DeviceLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.DeviceLocation)
    MergeFrom(*source);
  }
}

void DeviceLocation::MergeFrom(const DeviceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.DeviceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coordinates_.MergeFrom(from.coordinates_);
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.fix() != 0) {
    _internal_set_fix(from._internal_fix());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.satellites() != 0) {
    _internal_set_satellites(from._internal_satellites());
  }
  if (from.hdop() != 0) {
    _internal_set_hdop(from._internal_hdop());
  }
}

void DeviceLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.DeviceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceLocation::CopyFrom(const DeviceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.DeviceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLocation::IsInitialized() const {
  return true;
}

void DeviceLocation::InternalSwap(DeviceLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coordinates_.InternalSwap(&other->coordinates_);
  swap(time_, other->time_);
  swap(fix_, other->fix_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(enabled_, other->enabled_);
  swap(satellites_, other->satellites_);
  swap(hdop_, other->hdop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorReading::InitAsDefaultInstance() {
}
class SensorReading::_Internal {
 public:
};

SensorReading::SensorReading()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorReading)
}
SensorReading::SensorReading(const SensorReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorReading)
}

void SensorReading::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
}

SensorReading::~SensorReading() {
  // @@protoc_insertion_point(destructor:fk_data.SensorReading)
  SharedDtor();
}

void SensorReading::SharedDtor() {
}

void SensorReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorReading& SensorReading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorReading_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void SensorReading::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

const char* SensorReading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorReading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reading = 1;
  if (this->reading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reading(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // uint32 sensor = 3;
  if (this->sensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sensor(), target);
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorReading)
  return target;
}

size_t SensorReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorReading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint32 reading = 1;
  if (this->reading() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reading());
  }

  // uint32 sensor = 3;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sensor());
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorReading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorReading)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorReading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorReading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorReading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorReading)
    MergeFrom(*source);
  }
}

void SensorReading::MergeFrom(const SensorReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.reading() != 0) {
    _internal_set_reading(from._internal_reading());
  }
  if (from.sensor() != 0) {
    _internal_set_sensor(from._internal_sensor());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void SensorReading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorReading::CopyFrom(const SensorReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorReading::IsInitialized() const {
  return true;
}

void SensorReading::InternalSwap(SensorReading* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(reading_, other->reading_);
  swap(sensor_, other->sensor_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorReading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoggedReading::InitAsDefaultInstance() {
  ::fk_data::_LoggedReading_default_instance_._instance.get_mutable()->location_ = const_cast< ::fk_data::DeviceLocation*>(
      ::fk_data::DeviceLocation::internal_default_instance());
  ::fk_data::_LoggedReading_default_instance_._instance.get_mutable()->reading_ = const_cast< ::fk_data::SensorReading*>(
      ::fk_data::SensorReading::internal_default_instance());
}
class LoggedReading::_Internal {
 public:
  static const ::fk_data::DeviceLocation& location(const LoggedReading* msg);
  static const ::fk_data::SensorReading& reading(const LoggedReading* msg);
};

const ::fk_data::DeviceLocation&
LoggedReading::_Internal::location(const LoggedReading* msg) {
  return *msg->location_;
}
const ::fk_data::SensorReading&
LoggedReading::_Internal::reading(const LoggedReading* msg) {
  return *msg->reading_;
}
LoggedReading::LoggedReading()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LoggedReading)
}
LoggedReading::LoggedReading(const LoggedReading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::fk_data::DeviceLocation(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_reading()) {
    reading_ = new ::fk_data::SensorReading(*from.reading_);
  } else {
    reading_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:fk_data.LoggedReading)
}

void LoggedReading::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoggedReading_fk_2ddata_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&location_)) + sizeof(version_));
}

LoggedReading::~LoggedReading() {
  // @@protoc_insertion_point(destructor:fk_data.LoggedReading)
  SharedDtor();
}

void LoggedReading::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete reading_;
}

void LoggedReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggedReading& LoggedReading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoggedReading_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void LoggedReading::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LoggedReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reading_ != nullptr) {
    delete reading_;
  }
  reading_ = nullptr;
  version_ = 0u;
  _internal_metadata_.Clear();
}

const char* LoggedReading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.DeviceLocation location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.SensorReading reading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggedReading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LoggedReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // .fk_data.DeviceLocation location = 2;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // .fk_data.SensorReading reading = 3;
  if (this->has_reading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reading(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LoggedReading)
  return target;
}

size_t LoggedReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LoggedReading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fk_data.DeviceLocation location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .fk_data.SensorReading reading = 3;
  if (this->has_reading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reading_);
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggedReading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LoggedReading)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggedReading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggedReading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LoggedReading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LoggedReading)
    MergeFrom(*source);
  }
}

void LoggedReading::MergeFrom(const LoggedReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LoggedReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    _internal_mutable_location()->::fk_data::DeviceLocation::MergeFrom(from._internal_location());
  }
  if (from.has_reading()) {
    _internal_mutable_reading()->::fk_data::SensorReading::MergeFrom(from._internal_reading());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void LoggedReading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LoggedReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggedReading::CopyFrom(const LoggedReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LoggedReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggedReading::IsInitialized() const {
  return true;
}

void LoggedReading::InternalSwap(LoggedReading* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
  swap(reading_, other->reading_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggedReading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorAndValue::InitAsDefaultInstance() {
}
class SensorAndValue::_Internal {
 public:
};

SensorAndValue::SensorAndValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorAndValue)
}
SensorAndValue::SensorAndValue(const SensorAndValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_, &from.sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorAndValue)
}

void SensorAndValue::SharedCtor() {
  ::memset(&sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
}

SensorAndValue::~SensorAndValue() {
  // @@protoc_insertion_point(destructor:fk_data.SensorAndValue)
  SharedDtor();
}

void SensorAndValue::SharedDtor() {
}

void SensorAndValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorAndValue& SensorAndValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorAndValue_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void SensorAndValue::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorAndValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

const char* SensorAndValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorAndValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorAndValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorAndValue)
  return target;
}

size_t SensorAndValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorAndValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sensor = 1;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sensor());
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorAndValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorAndValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorAndValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorAndValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorAndValue)
    MergeFrom(*source);
  }
}

void SensorAndValue::MergeFrom(const SensorAndValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor() != 0) {
    _internal_set_sensor(from._internal_sensor());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void SensorAndValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorAndValue::CopyFrom(const SensorAndValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorAndValue::IsInitialized() const {
  return true;
}

void SensorAndValue::InternalSwap(SensorAndValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_, other->sensor_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorAndValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModuleHeader::InitAsDefaultInstance() {
}
class ModuleHeader::_Internal {
 public:
};

ModuleHeader::ModuleHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.ModuleHeader)
}
ModuleHeader::ModuleHeader(const ModuleHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manufacturer_, &from.manufacturer_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&manufacturer_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:fk_data.ModuleHeader)
}

void ModuleHeader::SharedCtor() {
  ::memset(&manufacturer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&manufacturer_)) + sizeof(version_));
}

ModuleHeader::~ModuleHeader() {
  // @@protoc_insertion_point(destructor:fk_data.ModuleHeader)
  SharedDtor();
}

void ModuleHeader::SharedDtor() {
}

void ModuleHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModuleHeader& ModuleHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModuleHeader_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void ModuleHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.ModuleHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&manufacturer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&manufacturer_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

const char* ModuleHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 manufacturer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          manufacturer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModuleHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.ModuleHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 manufacturer = 1;
  if (this->manufacturer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_manufacturer(), target);
  }

  // uint32 kind = 2;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kind(), target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.ModuleHeader)
  return target;
}

size_t ModuleHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.ModuleHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 manufacturer = 1;
  if (this->manufacturer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_manufacturer());
  }

  // uint32 kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kind());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModuleHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.ModuleHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModuleHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.ModuleHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.ModuleHeader)
    MergeFrom(*source);
  }
}

void ModuleHeader::MergeFrom(const ModuleHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.ModuleHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer() != 0) {
    _internal_set_manufacturer(from._internal_manufacturer());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void ModuleHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.ModuleHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleHeader::CopyFrom(const ModuleHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.ModuleHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleHeader::IsInitialized() const {
  return true;
}

void ModuleHeader::InternalSwap(ModuleHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(manufacturer_, other->manufacturer_);
  swap(kind_, other->kind_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModuleInfo::InitAsDefaultInstance() {
  ::fk_data::_ModuleInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::fk_data::ModuleHeader*>(
      ::fk_data::ModuleHeader::internal_default_instance());
  ::fk_data::_ModuleInfo_default_instance_._instance.get_mutable()->firmware_ = const_cast< ::fk_data::Firmware*>(
      ::fk_data::Firmware::internal_default_instance());
}
class ModuleInfo::_Internal {
 public:
  static const ::fk_data::ModuleHeader& header(const ModuleInfo* msg);
  static const ::fk_data::Firmware& firmware(const ModuleInfo* msg);
};

const ::fk_data::ModuleHeader&
ModuleInfo::_Internal::header(const ModuleInfo* msg) {
  return *msg->header_;
}
const ::fk_data::Firmware&
ModuleInfo::_Internal::firmware(const ModuleInfo* msg) {
  return *msg->firmware_;
}
ModuleInfo::ModuleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.ModuleInfo)
}
ModuleInfo::ModuleInfo(const ModuleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensors_(from.sensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_header()) {
    header_ = new ::fk_data::ModuleHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_firmware()) {
    firmware_ = new ::fk_data::Firmware(*from.firmware_);
  } else {
    firmware_ = nullptr;
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&position_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:fk_data.ModuleInfo)
}

void ModuleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModuleInfo_fk_2ddata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&header_)) + sizeof(flags_));
}

ModuleInfo::~ModuleInfo() {
  // @@protoc_insertion_point(destructor:fk_data.ModuleInfo)
  SharedDtor();
}

void ModuleInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete firmware_;
}

void ModuleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModuleInfo& ModuleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModuleInfo_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void ModuleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.ModuleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && firmware_ != nullptr) {
    delete firmware_;
  }
  firmware_ = nullptr;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&position_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

const char* ModuleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.ModuleInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.ModuleHeader header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.Firmware firmware = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_firmware(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fk_data.SensorInfo sensors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModuleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.ModuleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 position = 1;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_address(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.ModuleInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .fk_data.ModuleHeader header = 4;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::header(this), target, stream);
  }

  // .fk_data.Firmware firmware = 5;
  if (this->has_firmware()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::firmware(this), target, stream);
  }

  // repeated .fk_data.SensorInfo sensors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_sensors(i), target, stream);
  }

  // bytes id = 7;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_id(), target);
  }

  // uint32 flags = 8;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.ModuleInfo)
  return target;
}

size_t ModuleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.ModuleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fk_data.SensorInfo sensors = 6;
  total_size += 1UL * this->_internal_sensors_size();
  for (const auto& msg : this->sensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes id = 7;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // .fk_data.ModuleHeader header = 4;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .fk_data.Firmware firmware = 5;
  if (this->has_firmware()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *firmware_);
  }

  // uint32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  // uint32 flags = 8;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModuleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.ModuleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModuleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.ModuleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.ModuleInfo)
    MergeFrom(*source);
  }
}

void ModuleInfo::MergeFrom(const ModuleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.ModuleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::fk_data::ModuleHeader::MergeFrom(from._internal_header());
  }
  if (from.has_firmware()) {
    _internal_mutable_firmware()->::fk_data::Firmware::MergeFrom(from._internal_firmware());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void ModuleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.ModuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleInfo::CopyFrom(const ModuleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.ModuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleInfo::IsInitialized() const {
  return true;
}

void ModuleInfo::InternalSwap(ModuleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sensors_.InternalSwap(&other->sensors_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(firmware_, other->firmware_);
  swap(position_, other->position_);
  swap(address_, other->address_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorInfo::InitAsDefaultInstance() {
}
class SensorInfo::_Internal {
 public:
};

SensorInfo::SensorInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorInfo)
}
SensorInfo::SensorInfo(const SensorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  unitofmeasure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unitofmeasure().empty()) {
    unitofmeasure_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unitofmeasure_);
  }
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&number_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorInfo)
}

void SensorInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorInfo_fk_2ddata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&number_)) + sizeof(flags_));
}

SensorInfo::~SensorInfo() {
  // @@protoc_insertion_point(destructor:fk_data.SensorInfo)
  SharedDtor();
}

void SensorInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorInfo& SensorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorInfo_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void SensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unitofmeasure_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&number_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

const char* SensorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.SensorInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unitOfMeasure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unitofmeasure();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.SensorInfo.unitOfMeasure"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string unitOfMeasure = 3;
  if (this->unitofmeasure().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unitofmeasure().data(), static_cast<int>(this->_internal_unitofmeasure().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.SensorInfo.unitOfMeasure");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unitofmeasure(), target);
  }

  // uint32 flags = 4;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorInfo)
  return target;
}

size_t SensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string unitOfMeasure = 3;
  if (this->unitofmeasure().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unitofmeasure());
  }

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  // uint32 flags = 4;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorInfo)
    MergeFrom(*source);
  }
}

void SensorInfo::MergeFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.unitofmeasure().size() > 0) {

    unitofmeasure_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unitofmeasure_);
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void SensorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInfo::CopyFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfo::IsInitialized() const {
  return true;
}

void SensorInfo::InternalSwap(SensorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unitofmeasure_.Swap(&other->unitofmeasure_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_, other->number_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Firmware::InitAsDefaultInstance() {
}
class Firmware::_Internal {
 public:
};

Firmware::Firmware()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Firmware)
}
Firmware::Firmware(const Firmware& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build().empty()) {
    build_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_number().empty()) {
    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:fk_data.Firmware)
}

void Firmware::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Firmware_fk_2ddata_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

Firmware::~Firmware() {
  // @@protoc_insertion_point(destructor:fk_data.Firmware)
  SharedDtor();
}

void Firmware::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Firmware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Firmware& Firmware::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Firmware_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void Firmware::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Firmware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Firmware::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.Firmware.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string build = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.Firmware.build"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.Firmware.number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.Firmware.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Firmware::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Firmware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string build = 2;
  if (this->build().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.build");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_build(), target);
  }

  // string number = 3;
  if (this->number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_number(), target);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // string hash = 5;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.Firmware.hash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Firmware)
  return target;
}

size_t Firmware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Firmware)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string build = 2;
  if (this->build().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build());
  }

  // string number = 3;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // string hash = 5;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Firmware::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Firmware)
  GOOGLE_DCHECK_NE(&from, this);
  const Firmware* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Firmware>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Firmware)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Firmware)
    MergeFrom(*source);
  }
}

void Firmware::MergeFrom(const Firmware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Firmware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.build().size() > 0) {

    build_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Firmware::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Firmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Firmware::CopyFrom(const Firmware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Firmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Firmware::IsInitialized() const {
  return true;
}

void Firmware::InternalSwap(Firmware* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  build_.Swap(&other->build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  number_.Swap(&other->number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Firmware::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Metadata::InitAsDefaultInstance() {
  ::fk_data::_Metadata_default_instance_._instance.get_mutable()->firmware_ = const_cast< ::fk_data::Firmware*>(
      ::fk_data::Firmware::internal_default_instance());
}
class Metadata::_Internal {
 public:
  static const ::fk_data::Firmware& firmware(const Metadata* msg);
};

const ::fk_data::Firmware&
Metadata::_Internal::firmware(const Metadata* msg) {
  return *msg->firmware_;
}
Metadata::Metadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensors_(from.sensors_),
      modules_(from.modules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  git_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_git().empty()) {
    git_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build().empty()) {
    build_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  generation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_generation().empty()) {
    generation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.generation_);
  }
  if (from._internal_has_firmware()) {
    firmware_ = new ::fk_data::Firmware(*from.firmware_);
  } else {
    firmware_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&resetcause_) -
    reinterpret_cast<char*>(&time_)) + sizeof(resetcause_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Metadata)
}

void Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metadata_fk_2ddata_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&firmware_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resetcause_) -
      reinterpret_cast<char*>(&firmware_)) + sizeof(resetcause_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:fk_data.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete firmware_;
}

void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metadata& Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metadata_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  modules_.Clear();
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  git_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && firmware_ != nullptr) {
    delete firmware_;
  }
  firmware_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resetcause_) -
      reinterpret_cast<char*>(&time_)) + sizeof(resetcause_));
  _internal_metadata_.Clear();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes deviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string git = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_git();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.Metadata.git"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 resetCause = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          resetcause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fk_data.SensorInfo sensors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fk_data.ModuleInfo modules = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string build = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.Metadata.build"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.Firmware firmware = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_firmware(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes generation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_generation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // string git = 3;
  if (this->git().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git().data(), static_cast<int>(this->_internal_git().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.git");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_git(), target);
  }

  // uint32 resetCause = 4;
  if (this->resetcause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resetcause(), target);
  }

  // repeated .fk_data.SensorInfo sensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sensors(i), target, stream);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_modules(i), target, stream);
  }

  // string build = 7;
  if (this->build().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.Metadata.build");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_build(), target);
  }

  // .fk_data.Firmware firmware = 8;
  if (this->has_firmware()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::firmware(this), target, stream);
  }

  // bytes generation = 9;
  if (this->generation().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_generation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fk_data.SensorInfo sensors = 5;
  total_size += 1UL * this->_internal_sensors_size();
  for (const auto& msg : this->sensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceid());
  }

  // string git = 3;
  if (this->git().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git());
  }

  // string build = 7;
  if (this->build().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build());
  }

  // bytes generation = 9;
  if (this->generation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_generation());
  }

  // .fk_data.Firmware firmware = 8;
  if (this->has_firmware()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *firmware_);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint32 resetCause = 4;
  if (this->resetcause() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resetcause());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  modules_.MergeFrom(from.modules_);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.git().size() > 0) {

    git_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.git_);
  }
  if (from.build().size() > 0) {

    build_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_);
  }
  if (from.generation().size() > 0) {

    generation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.generation_);
  }
  if (from.has_firmware()) {
    _internal_mutable_firmware()->::fk_data::Firmware::MergeFrom(from._internal_firmware());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.resetcause() != 0) {
    _internal_set_resetcause(from._internal_resetcause());
  }
}

void Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sensors_.InternalSwap(&other->sensors_);
  modules_.InternalSwap(&other->modules_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  git_.Swap(&other->git_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  build_.Swap(&other->build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  generation_.Swap(&other->generation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(firmware_, other->firmware_);
  swap(time_, other->time_);
  swap(resetcause_, other->resetcause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::_Internal {
 public:
};

Status::Status()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_) -
    reinterpret_cast<char*>(&time_)) + sizeof(memory_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Status)
}

void Status::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_) -
      reinterpret_cast<char*>(&time_)) + sizeof(memory_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:fk_data.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_) -
      reinterpret_cast<char*>(&time_)) + sizeof(memory_));
  _internal_metadata_.Clear();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uptime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float battery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          battery_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 memory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 busy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          busy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uptime(), target);
  }

  // float battery = 3;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_battery(), target);
  }

  // uint32 memory = 4;
  if (this->memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_memory(), target);
  }

  // uint64 busy = 5;
  if (this->busy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_busy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uptime());
  }

  // float battery = 3;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 busy = 5;
  if (this->busy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_busy());
  }

  // uint32 memory = 4;
  if (this->memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
  if (!(from.battery() <= 0 && from.battery() >= 0)) {
    _internal_set_battery(from._internal_battery());
  }
  if (from.busy() != 0) {
    _internal_set_busy(from._internal_busy());
  }
  if (from.memory() != 0) {
    _internal_set_memory(from._internal_memory());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(uptime_, other->uptime_);
  swap(battery_, other->battery_);
  swap(busy_, other->busy_);
  swap(memory_, other->memory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogMessage::InitAsDefaultInstance() {
}
class LogMessage::_Internal {
 public:
};

LogMessage::LogMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  facility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_facility().empty()) {
    facility_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&time_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:fk_data.LogMessage)
}

void LogMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMessage_fk_2ddata_2eproto.base);
  facility_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&time_)) + sizeof(level_));
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:fk_data.LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
  facility_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMessage& LogMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMessage_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facility_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&time_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* LogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uptime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string facility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_facility();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.LogMessage.facility"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.LogMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uptime(), target);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // string facility = 4;
  if (this->facility().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facility().data(), static_cast<int>(this->_internal_facility().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.facility");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_facility(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.LogMessage.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string facility = 4;
  if (this->facility().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_facility());
  }

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint32 uptime = 2;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uptime());
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LogMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.facility().size() > 0) {

    facility_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.facility_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void LogMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  facility_.Swap(&other->facility_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(uptime_, other->uptime_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorGroup::InitAsDefaultInstance() {
}
class SensorGroup::_Internal {
 public:
};

SensorGroup::SensorGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SensorGroup)
}
SensorGroup::SensorGroup(const SensorGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      readings_(from.readings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_ = from.module_;
  // @@protoc_insertion_point(copy_constructor:fk_data.SensorGroup)
}

void SensorGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorGroup_fk_2ddata_2eproto.base);
  module_ = 0u;
}

SensorGroup::~SensorGroup() {
  // @@protoc_insertion_point(destructor:fk_data.SensorGroup)
  SharedDtor();
}

void SensorGroup::SharedDtor() {
}

void SensorGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorGroup& SensorGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorGroup_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void SensorGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SensorGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readings_.Clear();
  module_ = 0u;
  _internal_metadata_.Clear();
}

const char* SensorGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fk_data.SensorAndValue readings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_readings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SensorGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 module = 1;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_module(), target);
  }

  // repeated .fk_data.SensorAndValue readings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_readings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_readings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SensorGroup)
  return target;
}

size_t SensorGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SensorGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fk_data.SensorAndValue readings = 2;
  total_size += 1UL * this->_internal_readings_size();
  for (const auto& msg : this->readings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 module = 1;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SensorGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SensorGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SensorGroup)
    MergeFrom(*source);
  }
}

void SensorGroup::MergeFrom(const SensorGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SensorGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readings_.MergeFrom(from.readings_);
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
}

void SensorGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SensorGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorGroup::CopyFrom(const SensorGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SensorGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorGroup::IsInitialized() const {
  return true;
}

void SensorGroup::InternalSwap(SensorGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  readings_.InternalSwap(&other->readings_);
  swap(module_, other->module_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Readings::InitAsDefaultInstance() {
  ::fk_data::_Readings_default_instance_._instance.get_mutable()->location_ = const_cast< ::fk_data::DeviceLocation*>(
      ::fk_data::DeviceLocation::internal_default_instance());
}
class Readings::_Internal {
 public:
  static const ::fk_data::DeviceLocation& location(const Readings* msg);
};

const ::fk_data::DeviceLocation&
Readings::_Internal::location(const Readings* msg) {
  return *msg->location_;
}
Readings::Readings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Readings)
}
Readings::Readings(const Readings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensorgroups_(from.sensorgroups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::fk_data::DeviceLocation(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&uptime_) -
    reinterpret_cast<char*>(&time_)) + sizeof(uptime_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Readings)
}

void Readings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Readings_fk_2ddata_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uptime_) -
      reinterpret_cast<char*>(&location_)) + sizeof(uptime_));
}

Readings::~Readings() {
  // @@protoc_insertion_point(destructor:fk_data.Readings)
  SharedDtor();
}

void Readings::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void Readings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Readings& Readings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Readings_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void Readings::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Readings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensorgroups_.Clear();
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uptime_) -
      reinterpret_cast<char*>(&time_)) + sizeof(uptime_));
  _internal_metadata_.Clear();
}

const char* Readings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.DeviceLocation location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fk_data.SensorGroup sensorGroups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensorgroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 meta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uptime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Readings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Readings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // uint32 reading = 2;
  if (this->reading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reading(), target);
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // .fk_data.DeviceLocation location = 4;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  // repeated .fk_data.SensorGroup sensorGroups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensorgroups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sensorgroups(i), target, stream);
  }

  // uint32 meta = 6;
  if (this->meta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_meta(), target);
  }

  // uint32 uptime = 7;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Readings)
  return target;
}

size_t Readings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Readings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fk_data.SensorGroup sensorGroups = 5;
  total_size += 1UL * this->_internal_sensorgroups_size();
  for (const auto& msg : this->sensorgroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fk_data.DeviceLocation location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint32 reading = 2;
  if (this->reading() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reading());
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 meta = 6;
  if (this->meta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meta());
  }

  // uint32 uptime = 7;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uptime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Readings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Readings)
  GOOGLE_DCHECK_NE(&from, this);
  const Readings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Readings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Readings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Readings)
    MergeFrom(*source);
  }
}

void Readings::MergeFrom(const Readings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Readings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensorgroups_.MergeFrom(from.sensorgroups_);
  if (from.has_location()) {
    _internal_mutable_location()->::fk_data::DeviceLocation::MergeFrom(from._internal_location());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.reading() != 0) {
    _internal_set_reading(from._internal_reading());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.meta() != 0) {
    _internal_set_meta(from._internal_meta());
  }
  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
}

void Readings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Readings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Readings::CopyFrom(const Readings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Readings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Readings::IsInitialized() const {
  return true;
}

void Readings::InternalSwap(Readings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sensorgroups_.InternalSwap(&other->sensorgroups_);
  swap(location_, other->location_);
  swap(time_, other->time_);
  swap(reading_, other->reading_);
  swap(flags_, other->flags_);
  swap(meta_, other->meta_);
  swap(uptime_, other->uptime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Readings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobSchedule::InitAsDefaultInstance() {
}
class JobSchedule::_Internal {
 public:
};

JobSchedule::JobSchedule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.JobSchedule)
}
JobSchedule::JobSchedule(const JobSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cron_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cron().empty()) {
    cron_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cron_);
  }
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeated_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(repeated_));
  // @@protoc_insertion_point(copy_constructor:fk_data.JobSchedule)
}

void JobSchedule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobSchedule_fk_2ddata_2eproto.base);
  cron_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeated_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(repeated_));
}

JobSchedule::~JobSchedule() {
  // @@protoc_insertion_point(destructor:fk_data.JobSchedule)
  SharedDtor();
}

void JobSchedule::SharedDtor() {
  cron_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobSchedule& JobSchedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobSchedule_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void JobSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.JobSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cron_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeated_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(repeated_));
  _internal_metadata_.Clear();
}

const char* JobSchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes cron = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cron();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 repeated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          repeated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobSchedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.JobSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cron = 1;
  if (this->cron().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cron(), target);
  }

  // uint32 interval = 2;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_interval(), target);
  }

  // uint32 repeated = 3;
  if (this->repeated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_repeated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.JobSchedule)
  return target;
}

size_t JobSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.JobSchedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cron = 1;
  if (this->cron().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cron());
  }

  // uint32 interval = 2;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interval());
  }

  // uint32 repeated = 3;
  if (this->repeated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_repeated());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobSchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.JobSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const JobSchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobSchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.JobSchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.JobSchedule)
    MergeFrom(*source);
  }
}

void JobSchedule::MergeFrom(const JobSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.JobSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cron().size() > 0) {

    cron_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cron_);
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from.repeated() != 0) {
    _internal_set_repeated(from._internal_repeated());
  }
}

void JobSchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.JobSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSchedule::CopyFrom(const JobSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.JobSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSchedule::IsInitialized() const {
  return true;
}

void JobSchedule::InternalSwap(JobSchedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cron_.Swap(&other->cron_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interval_, other->interval_);
  swap(repeated_, other->repeated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobSchedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Schedule::InitAsDefaultInstance() {
  ::fk_data::_Schedule_default_instance_._instance.get_mutable()->readings_ = const_cast< ::fk_data::JobSchedule*>(
      ::fk_data::JobSchedule::internal_default_instance());
  ::fk_data::_Schedule_default_instance_._instance.get_mutable()->network_ = const_cast< ::fk_data::JobSchedule*>(
      ::fk_data::JobSchedule::internal_default_instance());
  ::fk_data::_Schedule_default_instance_._instance.get_mutable()->lora_ = const_cast< ::fk_data::JobSchedule*>(
      ::fk_data::JobSchedule::internal_default_instance());
  ::fk_data::_Schedule_default_instance_._instance.get_mutable()->gps_ = const_cast< ::fk_data::JobSchedule*>(
      ::fk_data::JobSchedule::internal_default_instance());
}
class Schedule::_Internal {
 public:
  static const ::fk_data::JobSchedule& readings(const Schedule* msg);
  static const ::fk_data::JobSchedule& network(const Schedule* msg);
  static const ::fk_data::JobSchedule& lora(const Schedule* msg);
  static const ::fk_data::JobSchedule& gps(const Schedule* msg);
};

const ::fk_data::JobSchedule&
Schedule::_Internal::readings(const Schedule* msg) {
  return *msg->readings_;
}
const ::fk_data::JobSchedule&
Schedule::_Internal::network(const Schedule* msg) {
  return *msg->network_;
}
const ::fk_data::JobSchedule&
Schedule::_Internal::lora(const Schedule* msg) {
  return *msg->lora_;
}
const ::fk_data::JobSchedule&
Schedule::_Internal::gps(const Schedule* msg) {
  return *msg->gps_;
}
Schedule::Schedule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_readings()) {
    readings_ = new ::fk_data::JobSchedule(*from.readings_);
  } else {
    readings_ = nullptr;
  }
  if (from._internal_has_network()) {
    network_ = new ::fk_data::JobSchedule(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from._internal_has_lora()) {
    lora_ = new ::fk_data::JobSchedule(*from.lora_);
  } else {
    lora_ = nullptr;
  }
  if (from._internal_has_gps()) {
    gps_ = new ::fk_data::JobSchedule(*from.gps_);
  } else {
    gps_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.Schedule)
}

void Schedule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Schedule_fk_2ddata_2eproto.base);
  ::memset(&readings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_) -
      reinterpret_cast<char*>(&readings_)) + sizeof(gps_));
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:fk_data.Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
  if (this != internal_default_instance()) delete readings_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete lora_;
  if (this != internal_default_instance()) delete gps_;
}

void Schedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Schedule& Schedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Schedule_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void Schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Schedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && readings_ != nullptr) {
    delete readings_;
  }
  readings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lora_ != nullptr) {
    delete lora_;
  }
  lora_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gps_ != nullptr) {
    delete gps_;
  }
  gps_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Schedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fk_data.JobSchedule readings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_readings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.JobSchedule network = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.JobSchedule lora = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lora(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.JobSchedule gps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Schedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Schedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.JobSchedule readings = 1;
  if (this->has_readings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::readings(this), target, stream);
  }

  // .fk_data.JobSchedule network = 2;
  if (this->has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::network(this), target, stream);
  }

  // .fk_data.JobSchedule lora = 3;
  if (this->has_lora()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lora(this), target, stream);
  }

  // .fk_data.JobSchedule gps = 4;
  if (this->has_gps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gps(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Schedule)
  return target;
}

size_t Schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Schedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fk_data.JobSchedule readings = 1;
  if (this->has_readings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readings_);
  }

  // .fk_data.JobSchedule network = 2;
  if (this->has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  // .fk_data.JobSchedule lora = 3;
  if (this->has_lora()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lora_);
  }

  // .fk_data.JobSchedule gps = 4;
  if (this->has_gps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Schedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Schedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Schedule)
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_readings()) {
    _internal_mutable_readings()->::fk_data::JobSchedule::MergeFrom(from._internal_readings());
  }
  if (from.has_network()) {
    _internal_mutable_network()->::fk_data::JobSchedule::MergeFrom(from._internal_network());
  }
  if (from.has_lora()) {
    _internal_mutable_lora()->::fk_data::JobSchedule::MergeFrom(from._internal_lora());
  }
  if (from.has_gps()) {
    _internal_mutable_gps()->::fk_data::JobSchedule::MergeFrom(from._internal_gps());
  }
}

void Schedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {
  return true;
}

void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(readings_, other->readings_);
  swap(network_, other->network_);
  swap(lora_, other->lora_);
  swap(gps_, other->gps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Schedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identity::InitAsDefaultInstance() {
}
class Identity::_Internal {
 public:
};

Identity::Identity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Identity)
}
Identity::Identity(const Identity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.Identity)
}

void Identity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identity_fk_2ddata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:fk_data.Identity)
  SharedDtor();
}

void Identity::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Identity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identity& Identity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identity_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void Identity::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Identity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Identity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.Identity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Identity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.Identity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Identity)
  return target;
}

size_t Identity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Identity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  const Identity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Identity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Identity)
    MergeFrom(*source);
  }
}

void Identity::MergeFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Identity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identity::CopyFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity::IsInitialized() const {
  return true;
}

void Identity::InternalSwap(Identity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Identity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
}
class Condition::_Internal {
 public:
};

Condition::Condition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&recording_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(recording_));
  // @@protoc_insertion_point(copy_constructor:fk_data.Condition)
}

void Condition::SharedCtor() {
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(recording_));
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:fk_data.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
}

void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(recording_));
  _internal_metadata_.Clear();
}

const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 recording = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint32 recording = 2;
  if (this->recording() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recording(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 recording = 2;
  if (this->recording() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recording());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.recording() != 0) {
    _internal_set_recording(from._internal_recording());
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(flags_, other->flags_);
  swap(recording_, other->recording_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkInfo::InitAsDefaultInstance() {
}
class NetworkInfo::_Internal {
 public:
};

NetworkInfo::NetworkInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.NetworkInfo)
}
NetworkInfo::NetworkInfo(const NetworkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:fk_data.NetworkInfo)
}

void NetworkInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkInfo_fk_2ddata_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NetworkInfo::~NetworkInfo() {
  // @@protoc_insertion_point(destructor:fk_data.NetworkInfo)
  SharedDtor();
}

void NetworkInfo::SharedDtor() {
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkInfo& NetworkInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkInfo_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void NetworkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.NetworkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NetworkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.NetworkInfo.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fk_data.NetworkInfo.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.NetworkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.NetworkInfo.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fk_data.NetworkInfo.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.NetworkInfo)
  return target;
}

size_t NetworkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.NetworkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.NetworkInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.NetworkInfo)
    MergeFrom(*source);
  }
}

void NetworkInfo::MergeFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {

    ssid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void NetworkInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfo::CopyFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfo::IsInitialized() const {
  return true;
}

void NetworkInfo::InternalSwap(NetworkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkSettings::InitAsDefaultInstance() {
}
class NetworkSettings::_Internal {
 public:
};

NetworkSettings::NetworkSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.NetworkSettings)
}
NetworkSettings::NetworkSettings(const NetworkSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      networks_(from.networks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fk_data.NetworkSettings)
}

void NetworkSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkSettings_fk_2ddata_2eproto.base);
}

NetworkSettings::~NetworkSettings() {
  // @@protoc_insertion_point(destructor:fk_data.NetworkSettings)
  SharedDtor();
}

void NetworkSettings::SharedDtor() {
}

void NetworkSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkSettings& NetworkSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkSettings_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void NetworkSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.NetworkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networks_.Clear();
  _internal_metadata_.Clear();
}

const char* NetworkSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fk_data.NetworkInfo networks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.NetworkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fk_data.NetworkInfo networks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_networks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_networks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.NetworkSettings)
  return target;
}

size_t NetworkSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.NetworkSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fk_data.NetworkInfo networks = 1;
  total_size += 1UL * this->_internal_networks_size();
  for (const auto& msg : this->networks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.NetworkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.NetworkSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.NetworkSettings)
    MergeFrom(*source);
  }
}

void NetworkSettings::MergeFrom(const NetworkSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.NetworkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  networks_.MergeFrom(from.networks_);
}

void NetworkSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.NetworkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkSettings::CopyFrom(const NetworkSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.NetworkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSettings::IsInitialized() const {
  return true;
}

void NetworkSettings::InternalSwap(NetworkSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  networks_.InternalSwap(&other->networks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoraSettings::InitAsDefaultInstance() {
}
class LoraSettings::_Internal {
 public:
};

LoraSettings::LoraSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LoraSettings)
}
LoraSettings::LoraSettings(const LoraSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceeui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceeui().empty()) {
    deviceeui_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceeui_);
  }
  appkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appkey().empty()) {
    appkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  appeui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appeui().empty()) {
    appeui_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appeui_);
  }
  deviceaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceaddress().empty()) {
    deviceaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceaddress_);
  }
  networksessionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_networksessionkey().empty()) {
    networksessionkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.networksessionkey_);
  }
  appsessionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appsessionkey().empty()) {
    appsessionkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appsessionkey_);
  }
  ::memcpy(&frequencyband_, &from.frequencyband_,
    static_cast<size_t>(reinterpret_cast<char*>(&downlinkcounter_) -
    reinterpret_cast<char*>(&frequencyband_)) + sizeof(downlinkcounter_));
  // @@protoc_insertion_point(copy_constructor:fk_data.LoraSettings)
}

void LoraSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoraSettings_fk_2ddata_2eproto.base);
  deviceeui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appeui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  networksessionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appsessionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequencyband_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downlinkcounter_) -
      reinterpret_cast<char*>(&frequencyband_)) + sizeof(downlinkcounter_));
}

LoraSettings::~LoraSettings() {
  // @@protoc_insertion_point(destructor:fk_data.LoraSettings)
  SharedDtor();
}

void LoraSettings::SharedDtor() {
  deviceeui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appeui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  networksessionkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appsessionkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoraSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoraSettings& LoraSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoraSettings_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void LoraSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LoraSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceeui_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appeui_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  networksessionkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appsessionkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequencyband_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downlinkcounter_) -
      reinterpret_cast<char*>(&frequencyband_)) + sizeof(downlinkcounter_));
  _internal_metadata_.Clear();
}

const char* LoraSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes deviceEui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceeui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes appKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_appkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes appEui = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appeui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frequencyBand = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frequencyband_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes deviceAddress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_deviceaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes networkSessionKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_networksessionkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes appSessionKey = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_appsessionkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uplinkCounter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          uplinkcounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 downlinkCounter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          downlinkcounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoraSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LoraSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceEui = 1;
  if (this->deviceeui().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_deviceeui(), target);
  }

  // bytes appKey = 2;
  if (this->appkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_appkey(), target);
  }

  // bytes appEui = 3;
  if (this->appeui().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_appeui(), target);
  }

  // uint32 frequencyBand = 4;
  if (this->frequencyband() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frequencyband(), target);
  }

  // bytes deviceAddress = 5;
  if (this->deviceaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_deviceaddress(), target);
  }

  // bytes networkSessionKey = 6;
  if (this->networksessionkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_networksessionkey(), target);
  }

  // bytes appSessionKey = 7;
  if (this->appsessionkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_appsessionkey(), target);
  }

  // uint32 uplinkCounter = 8;
  if (this->uplinkcounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_uplinkcounter(), target);
  }

  // uint32 downlinkCounter = 9;
  if (this->downlinkcounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_downlinkcounter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LoraSettings)
  return target;
}

size_t LoraSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LoraSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes deviceEui = 1;
  if (this->deviceeui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceeui());
  }

  // bytes appKey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appkey());
  }

  // bytes appEui = 3;
  if (this->appeui().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appeui());
  }

  // bytes deviceAddress = 5;
  if (this->deviceaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceaddress());
  }

  // bytes networkSessionKey = 6;
  if (this->networksessionkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_networksessionkey());
  }

  // bytes appSessionKey = 7;
  if (this->appsessionkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appsessionkey());
  }

  // uint32 frequencyBand = 4;
  if (this->frequencyband() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequencyband());
  }

  // uint32 uplinkCounter = 8;
  if (this->uplinkcounter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uplinkcounter());
  }

  // uint32 downlinkCounter = 9;
  if (this->downlinkcounter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_downlinkcounter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoraSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LoraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const LoraSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoraSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LoraSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LoraSettings)
    MergeFrom(*source);
  }
}

void LoraSettings::MergeFrom(const LoraSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LoraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceeui().size() > 0) {

    deviceeui_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceeui_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.appeui().size() > 0) {

    appeui_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appeui_);
  }
  if (from.deviceaddress().size() > 0) {

    deviceaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceaddress_);
  }
  if (from.networksessionkey().size() > 0) {

    networksessionkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.networksessionkey_);
  }
  if (from.appsessionkey().size() > 0) {

    appsessionkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appsessionkey_);
  }
  if (from.frequencyband() != 0) {
    _internal_set_frequencyband(from._internal_frequencyband());
  }
  if (from.uplinkcounter() != 0) {
    _internal_set_uplinkcounter(from._internal_uplinkcounter());
  }
  if (from.downlinkcounter() != 0) {
    _internal_set_downlinkcounter(from._internal_downlinkcounter());
  }
}

void LoraSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LoraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoraSettings::CopyFrom(const LoraSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LoraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoraSettings::IsInitialized() const {
  return true;
}

void LoraSettings::InternalSwap(LoraSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceeui_.Swap(&other->deviceeui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appkey_.Swap(&other->appkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appeui_.Swap(&other->appeui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceaddress_.Swap(&other->deviceaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  networksessionkey_.Swap(&other->networksessionkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appsessionkey_.Swap(&other->appsessionkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frequencyband_, other->frequencyband_);
  swap(uplinkcounter_, other->uplinkcounter_);
  swap(downlinkcounter_, other->downlinkcounter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoraSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataRecord::InitAsDefaultInstance() {
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->loggedreading_ = const_cast< ::fk_data::LoggedReading*>(
      ::fk_data::LoggedReading::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::fk_data::Metadata*>(
      ::fk_data::Metadata::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->log_ = const_cast< ::fk_data::LogMessage*>(
      ::fk_data::LogMessage::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->status_ = const_cast< ::fk_data::Status*>(
      ::fk_data::Status::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->readings_ = const_cast< ::fk_data::Readings*>(
      ::fk_data::Readings::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->schedule_ = const_cast< ::fk_data::Schedule*>(
      ::fk_data::Schedule::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->identity_ = const_cast< ::fk_data::Identity*>(
      ::fk_data::Identity::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->condition_ = const_cast< ::fk_data::Condition*>(
      ::fk_data::Condition::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->lora_ = const_cast< ::fk_data::LoraSettings*>(
      ::fk_data::LoraSettings::internal_default_instance());
  ::fk_data::_DataRecord_default_instance_._instance.get_mutable()->network_ = const_cast< ::fk_data::NetworkSettings*>(
      ::fk_data::NetworkSettings::internal_default_instance());
}
class DataRecord::_Internal {
 public:
  static const ::fk_data::LoggedReading& loggedreading(const DataRecord* msg);
  static const ::fk_data::Metadata& metadata(const DataRecord* msg);
  static const ::fk_data::LogMessage& log(const DataRecord* msg);
  static const ::fk_data::Status& status(const DataRecord* msg);
  static const ::fk_data::Readings& readings(const DataRecord* msg);
  static const ::fk_data::Schedule& schedule(const DataRecord* msg);
  static const ::fk_data::Identity& identity(const DataRecord* msg);
  static const ::fk_data::Condition& condition(const DataRecord* msg);
  static const ::fk_data::LoraSettings& lora(const DataRecord* msg);
  static const ::fk_data::NetworkSettings& network(const DataRecord* msg);
};

const ::fk_data::LoggedReading&
DataRecord::_Internal::loggedreading(const DataRecord* msg) {
  return *msg->loggedreading_;
}
const ::fk_data::Metadata&
DataRecord::_Internal::metadata(const DataRecord* msg) {
  return *msg->metadata_;
}
const ::fk_data::LogMessage&
DataRecord::_Internal::log(const DataRecord* msg) {
  return *msg->log_;
}
const ::fk_data::Status&
DataRecord::_Internal::status(const DataRecord* msg) {
  return *msg->status_;
}
const ::fk_data::Readings&
DataRecord::_Internal::readings(const DataRecord* msg) {
  return *msg->readings_;
}
const ::fk_data::Schedule&
DataRecord::_Internal::schedule(const DataRecord* msg) {
  return *msg->schedule_;
}
const ::fk_data::Identity&
DataRecord::_Internal::identity(const DataRecord* msg) {
  return *msg->identity_;
}
const ::fk_data::Condition&
DataRecord::_Internal::condition(const DataRecord* msg) {
  return *msg->condition_;
}
const ::fk_data::LoraSettings&
DataRecord::_Internal::lora(const DataRecord* msg) {
  return *msg->lora_;
}
const ::fk_data::NetworkSettings&
DataRecord::_Internal::network(const DataRecord* msg) {
  return *msg->network_;
}
DataRecord::DataRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.DataRecord)
}
DataRecord::DataRecord(const DataRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      modules_(from.modules_),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_loggedreading()) {
    loggedreading_ = new ::fk_data::LoggedReading(*from.loggedreading_);
  } else {
    loggedreading_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::fk_data::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_log()) {
    log_ = new ::fk_data::LogMessage(*from.log_);
  } else {
    log_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::fk_data::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_readings()) {
    readings_ = new ::fk_data::Readings(*from.readings_);
  } else {
    readings_ = nullptr;
  }
  if (from._internal_has_schedule()) {
    schedule_ = new ::fk_data::Schedule(*from.schedule_);
  } else {
    schedule_ = nullptr;
  }
  if (from._internal_has_identity()) {
    identity_ = new ::fk_data::Identity(*from.identity_);
  } else {
    identity_ = nullptr;
  }
  if (from._internal_has_condition()) {
    condition_ = new ::fk_data::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from._internal_has_lora()) {
    lora_ = new ::fk_data::LoraSettings(*from.lora_);
  } else {
    lora_ = nullptr;
  }
  if (from._internal_has_network()) {
    network_ = new ::fk_data::NetworkSettings(*from.network_);
  } else {
    network_ = nullptr;
  }
  meta_ = from.meta_;
  // @@protoc_insertion_point(copy_constructor:fk_data.DataRecord)
}

void DataRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataRecord_fk_2ddata_2eproto.base);
  ::memset(&loggedreading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meta_) -
      reinterpret_cast<char*>(&loggedreading_)) + sizeof(meta_));
}

DataRecord::~DataRecord() {
  // @@protoc_insertion_point(destructor:fk_data.DataRecord)
  SharedDtor();
}

void DataRecord::SharedDtor() {
  if (this != internal_default_instance()) delete loggedreading_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete readings_;
  if (this != internal_default_instance()) delete schedule_;
  if (this != internal_default_instance()) delete identity_;
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete lora_;
  if (this != internal_default_instance()) delete network_;
}

void DataRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataRecord& DataRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataRecord_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void DataRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.DataRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modules_.Clear();
  logs_.Clear();
  if (GetArenaNoVirtual() == nullptr && loggedreading_ != nullptr) {
    delete loggedreading_;
  }
  loggedreading_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && readings_ != nullptr) {
    delete readings_;
  }
  readings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && schedule_ != nullptr) {
    delete schedule_;
  }
  schedule_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && identity_ != nullptr) {
    delete identity_;
  }
  identity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lora_ != nullptr) {
    delete lora_;
  }
  lora_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  meta_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* DataRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fk_data.LoggedReading loggedReading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_loggedreading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.Metadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.LogMessage log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.Readings readings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_readings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fk_data.ModuleInfo modules = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .fk_data.Schedule schedule = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 meta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          meta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.Identity identity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.Condition condition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.LoraSettings lora = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lora(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fk_data.NetworkSettings network = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fk_data.LogMessage logs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.DataRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.LoggedReading loggedReading = 1;
  if (this->has_loggedreading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::loggedreading(this), target, stream);
  }

  // .fk_data.Metadata metadata = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  // .fk_data.LogMessage log = 3;
  if (this->has_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::log(this), target, stream);
  }

  // .fk_data.Status status = 4;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  // .fk_data.Readings readings = 5;
  if (this->has_readings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::readings(this), target, stream);
  }

  // repeated .fk_data.ModuleInfo modules = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_modules(i), target, stream);
  }

  // .fk_data.Schedule schedule = 7;
  if (this->has_schedule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::schedule(this), target, stream);
  }

  // uint64 meta = 8;
  if (this->meta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_meta(), target);
  }

  // .fk_data.Identity identity = 9;
  if (this->has_identity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::identity(this), target, stream);
  }

  // .fk_data.Condition condition = 10;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::condition(this), target, stream);
  }

  // .fk_data.LoraSettings lora = 11;
  if (this->has_lora()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::lora(this), target, stream);
  }

  // .fk_data.NetworkSettings network = 12;
  if (this->has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::network(this), target, stream);
  }

  // repeated .fk_data.LogMessage logs = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.DataRecord)
  return target;
}

size_t DataRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.DataRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fk_data.ModuleInfo modules = 6;
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fk_data.LogMessage logs = 13;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fk_data.LoggedReading loggedReading = 1;
  if (this->has_loggedreading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loggedreading_);
  }

  // .fk_data.Metadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .fk_data.LogMessage log = 3;
  if (this->has_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_);
  }

  // .fk_data.Status status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .fk_data.Readings readings = 5;
  if (this->has_readings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readings_);
  }

  // .fk_data.Schedule schedule = 7;
  if (this->has_schedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schedule_);
  }

  // .fk_data.Identity identity = 9;
  if (this->has_identity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_);
  }

  // .fk_data.Condition condition = 10;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .fk_data.LoraSettings lora = 11;
  if (this->has_lora()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lora_);
  }

  // .fk_data.NetworkSettings network = 12;
  if (this->has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  // uint64 meta = 8;
  if (this->meta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_meta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.DataRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const DataRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.DataRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.DataRecord)
    MergeFrom(*source);
  }
}

void DataRecord::MergeFrom(const DataRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.DataRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modules_.MergeFrom(from.modules_);
  logs_.MergeFrom(from.logs_);
  if (from.has_loggedreading()) {
    _internal_mutable_loggedreading()->::fk_data::LoggedReading::MergeFrom(from._internal_loggedreading());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::fk_data::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_log()) {
    _internal_mutable_log()->::fk_data::LogMessage::MergeFrom(from._internal_log());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::fk_data::Status::MergeFrom(from._internal_status());
  }
  if (from.has_readings()) {
    _internal_mutable_readings()->::fk_data::Readings::MergeFrom(from._internal_readings());
  }
  if (from.has_schedule()) {
    _internal_mutable_schedule()->::fk_data::Schedule::MergeFrom(from._internal_schedule());
  }
  if (from.has_identity()) {
    _internal_mutable_identity()->::fk_data::Identity::MergeFrom(from._internal_identity());
  }
  if (from.has_condition()) {
    _internal_mutable_condition()->::fk_data::Condition::MergeFrom(from._internal_condition());
  }
  if (from.has_lora()) {
    _internal_mutable_lora()->::fk_data::LoraSettings::MergeFrom(from._internal_lora());
  }
  if (from.has_network()) {
    _internal_mutable_network()->::fk_data::NetworkSettings::MergeFrom(from._internal_network());
  }
  if (from.meta() != 0) {
    _internal_set_meta(from._internal_meta());
  }
}

void DataRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.DataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRecord::CopyFrom(const DataRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.DataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRecord::IsInitialized() const {
  return true;
}

void DataRecord::InternalSwap(DataRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  modules_.InternalSwap(&other->modules_);
  logs_.InternalSwap(&other->logs_);
  swap(loggedreading_, other->loggedreading_);
  swap(metadata_, other->metadata_);
  swap(log_, other->log_);
  swap(status_, other->status_);
  swap(readings_, other->readings_);
  swap(schedule_, other->schedule_);
  swap(identity_, other->identity_);
  swap(condition_, other->condition_);
  swap(lora_, other->lora_);
  swap(network_, other->network_);
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignedRecord::InitAsDefaultInstance() {
}
class SignedRecord::_Internal {
 public:
};

SignedRecord::SignedRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.SignedRecord)
}
SignedRecord::SignedRecord(const SignedRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&time_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:fk_data.SignedRecord)
}

void SignedRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedRecord_fk_2ddata_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&time_)) + sizeof(kind_));
}

SignedRecord::~SignedRecord() {
  // @@protoc_insertion_point(destructor:fk_data.SignedRecord)
  SharedDtor();
}

void SignedRecord::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignedRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedRecord& SignedRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedRecord_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void SignedRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.SignedRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&time_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

const char* SignedRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fk_data.SignedRecordKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::fk_data::SignedRecordKind>(val));
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 record = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          record_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignedRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.SignedRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fk_data.SignedRecordKind kind = 1;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // uint64 record = 5;
  if (this->record() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_record(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.SignedRecord)
  return target;
}

size_t SignedRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.SignedRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint64 record = 5;
  if (this->record() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_record());
  }

  // .fk_data.SignedRecordKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.SignedRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignedRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.SignedRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.SignedRecord)
    MergeFrom(*source);
  }
}

void SignedRecord::MergeFrom(const SignedRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.SignedRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.record() != 0) {
    _internal_set_record(from._internal_record());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void SignedRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.SignedRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedRecord::CopyFrom(const SignedRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.SignedRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedRecord::IsInitialized() const {
  return true;
}

void SignedRecord::InternalSwap(SignedRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(record_, other->record_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoraRecord::InitAsDefaultInstance() {
}
class LoraRecord::_Internal {
 public:
};

LoraRecord::LoraRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fk_data.LoraRecord)
}
LoraRecord::LoraRecord(const LoraRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&module_) -
    reinterpret_cast<char*>(&time_)) + sizeof(module_));
  // @@protoc_insertion_point(copy_constructor:fk_data.LoraRecord)
}

void LoraRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoraRecord_fk_2ddata_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_) -
      reinterpret_cast<char*>(&time_)) + sizeof(module_));
}

LoraRecord::~LoraRecord() {
  // @@protoc_insertion_point(destructor:fk_data.LoraRecord)
  SharedDtor();
}

void LoraRecord::SharedDtor() {
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoraRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoraRecord& LoraRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoraRecord_fk_2ddata_2eproto.base);
  return *internal_default_instance();
}


void LoraRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:fk_data.LoraRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_) -
      reinterpret_cast<char*>(&time_)) + sizeof(module_));
  _internal_metadata_.Clear();
}

const char* LoraRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes deviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 module = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          module_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoraRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fk_data.LoraRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // uint64 number = 3;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_number(), target);
  }

  // uint32 module = 4;
  if (this->module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_module(), target);
  }

  // uint64 sensor = 5;
  if (this->sensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sensor(), target);
  }

  // repeated float values = 6;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_values(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fk_data.LoraRecord)
  return target;
}

size_t LoraRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fk_data.LoraRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes deviceId = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceid());
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint64 number = 3;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_number());
  }

  // uint64 sensor = 5;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sensor());
  }

  // uint32 module = 4;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_module());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoraRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fk_data.LoraRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LoraRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoraRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fk_data.LoraRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fk_data.LoraRecord)
    MergeFrom(*source);
  }
}

void LoraRecord::MergeFrom(const LoraRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fk_data.LoraRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.sensor() != 0) {
    _internal_set_sensor(from._internal_sensor());
  }
  if (from.module() != 0) {
    _internal_set_module(from._internal_module());
  }
}

void LoraRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fk_data.LoraRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoraRecord::CopyFrom(const LoraRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fk_data.LoraRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoraRecord::IsInitialized() const {
  return true;
}

void LoraRecord::InternalSwap(LoraRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(number_, other->number_);
  swap(sensor_, other->sensor_);
  swap(module_, other->module_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoraRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fk_data
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fk_data::DeviceLocation* Arena::CreateMaybeMessage< ::fk_data::DeviceLocation >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::DeviceLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::SensorReading* Arena::CreateMaybeMessage< ::fk_data::SensorReading >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::SensorReading >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::LoggedReading* Arena::CreateMaybeMessage< ::fk_data::LoggedReading >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::LoggedReading >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::SensorAndValue* Arena::CreateMaybeMessage< ::fk_data::SensorAndValue >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::SensorAndValue >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::ModuleHeader* Arena::CreateMaybeMessage< ::fk_data::ModuleHeader >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::ModuleHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::ModuleInfo* Arena::CreateMaybeMessage< ::fk_data::ModuleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::ModuleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::SensorInfo* Arena::CreateMaybeMessage< ::fk_data::SensorInfo >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::SensorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::Firmware* Arena::CreateMaybeMessage< ::fk_data::Firmware >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::Firmware >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::Metadata* Arena::CreateMaybeMessage< ::fk_data::Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::Status* Arena::CreateMaybeMessage< ::fk_data::Status >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::LogMessage* Arena::CreateMaybeMessage< ::fk_data::LogMessage >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::LogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::SensorGroup* Arena::CreateMaybeMessage< ::fk_data::SensorGroup >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::SensorGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::Readings* Arena::CreateMaybeMessage< ::fk_data::Readings >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::Readings >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::JobSchedule* Arena::CreateMaybeMessage< ::fk_data::JobSchedule >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::JobSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::Schedule* Arena::CreateMaybeMessage< ::fk_data::Schedule >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::Schedule >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::Identity* Arena::CreateMaybeMessage< ::fk_data::Identity >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::Identity >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::Condition* Arena::CreateMaybeMessage< ::fk_data::Condition >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::NetworkInfo* Arena::CreateMaybeMessage< ::fk_data::NetworkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::NetworkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::NetworkSettings* Arena::CreateMaybeMessage< ::fk_data::NetworkSettings >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::NetworkSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::LoraSettings* Arena::CreateMaybeMessage< ::fk_data::LoraSettings >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::LoraSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::DataRecord* Arena::CreateMaybeMessage< ::fk_data::DataRecord >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::DataRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::SignedRecord* Arena::CreateMaybeMessage< ::fk_data::SignedRecord >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::SignedRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::fk_data::LoraRecord* Arena::CreateMaybeMessage< ::fk_data::LoraRecord >(Arena* arena) {
  return Arena::CreateInternal< ::fk_data::LoraRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
