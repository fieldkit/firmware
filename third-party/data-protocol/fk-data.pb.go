// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.11.2
// source: fk-data.proto

package data_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DownloadFlags int32

const (
	DownloadFlags_READING_FLAGS_NONE          DownloadFlags = 0
	DownloadFlags_READING_FLAGS_NOT_RECORDING DownloadFlags = 1
	DownloadFlags_READING_FLAGS_MANUAL        DownloadFlags = 2
)

// Enum value maps for DownloadFlags.
var (
	DownloadFlags_name = map[int32]string{
		0: "READING_FLAGS_NONE",
		1: "READING_FLAGS_NOT_RECORDING",
		2: "READING_FLAGS_MANUAL",
	}
	DownloadFlags_value = map[string]int32{
		"READING_FLAGS_NONE":          0,
		"READING_FLAGS_NOT_RECORDING": 1,
		"READING_FLAGS_MANUAL":        2,
	}
)

func (x DownloadFlags) Enum() *DownloadFlags {
	p := new(DownloadFlags)
	*p = x
	return p
}

func (x DownloadFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_data_proto_enumTypes[0].Descriptor()
}

func (DownloadFlags) Type() protoreflect.EnumType {
	return &file_fk_data_proto_enumTypes[0]
}

func (x DownloadFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadFlags.Descriptor instead.
func (DownloadFlags) EnumDescriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{0}
}

type ConditionFlags int32

const (
	ConditionFlags_CONDITION_FLAGS_NONE      ConditionFlags = 0
	ConditionFlags_CONDITION_FLAGS_RECORDING ConditionFlags = 1
)

// Enum value maps for ConditionFlags.
var (
	ConditionFlags_name = map[int32]string{
		0: "CONDITION_FLAGS_NONE",
		1: "CONDITION_FLAGS_RECORDING",
	}
	ConditionFlags_value = map[string]int32{
		"CONDITION_FLAGS_NONE":      0,
		"CONDITION_FLAGS_RECORDING": 1,
	}
)

func (x ConditionFlags) Enum() *ConditionFlags {
	p := new(ConditionFlags)
	*p = x
	return p
}

func (x ConditionFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_data_proto_enumTypes[1].Descriptor()
}

func (ConditionFlags) Type() protoreflect.EnumType {
	return &file_fk_data_proto_enumTypes[1]
}

func (x ConditionFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionFlags.Descriptor instead.
func (ConditionFlags) EnumDescriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{1}
}

type SignedRecordKind int32

const (
	SignedRecordKind_SIGNED_RECORD_KIND_NONE      SignedRecordKind = 0
	SignedRecordKind_SIGNED_RECORD_KIND_MODULES   SignedRecordKind = 1
	SignedRecordKind_SIGNED_RECORD_KIND_SCHEDULE  SignedRecordKind = 2
	SignedRecordKind_SIGNED_RECORD_KIND_STATE     SignedRecordKind = 3
	SignedRecordKind_SIGNED_RECORD_KIND_RAW_STATE SignedRecordKind = 4
	SignedRecordKind_SIGNED_RECORD_KIND_FAULTS    SignedRecordKind = 5
	SignedRecordKind_SIGNED_RECORD_KIND_OTHER     SignedRecordKind = 255
)

// Enum value maps for SignedRecordKind.
var (
	SignedRecordKind_name = map[int32]string{
		0:   "SIGNED_RECORD_KIND_NONE",
		1:   "SIGNED_RECORD_KIND_MODULES",
		2:   "SIGNED_RECORD_KIND_SCHEDULE",
		3:   "SIGNED_RECORD_KIND_STATE",
		4:   "SIGNED_RECORD_KIND_RAW_STATE",
		5:   "SIGNED_RECORD_KIND_FAULTS",
		255: "SIGNED_RECORD_KIND_OTHER",
	}
	SignedRecordKind_value = map[string]int32{
		"SIGNED_RECORD_KIND_NONE":      0,
		"SIGNED_RECORD_KIND_MODULES":   1,
		"SIGNED_RECORD_KIND_SCHEDULE":  2,
		"SIGNED_RECORD_KIND_STATE":     3,
		"SIGNED_RECORD_KIND_RAW_STATE": 4,
		"SIGNED_RECORD_KIND_FAULTS":    5,
		"SIGNED_RECORD_KIND_OTHER":     255,
	}
)

func (x SignedRecordKind) Enum() *SignedRecordKind {
	p := new(SignedRecordKind)
	*p = x
	return p
}

func (x SignedRecordKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedRecordKind) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_data_proto_enumTypes[2].Descriptor()
}

func (SignedRecordKind) Type() protoreflect.EnumType {
	return &file_fk_data_proto_enumTypes[2]
}

func (x SignedRecordKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignedRecordKind.Descriptor instead.
func (SignedRecordKind) EnumDescriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{2}
}

type CurveType int32

const (
	CurveType_CURVE_NONE        CurveType = 0
	CurveType_CURVE_LINEAR      CurveType = 1
	CurveType_CURVE_POWER       CurveType = 2
	CurveType_CURVE_LOGARITHMIC CurveType = 3
	CurveType_CURVE_EXPONENTIAL CurveType = 4
)

// Enum value maps for CurveType.
var (
	CurveType_name = map[int32]string{
		0: "CURVE_NONE",
		1: "CURVE_LINEAR",
		2: "CURVE_POWER",
		3: "CURVE_LOGARITHMIC",
		4: "CURVE_EXPONENTIAL",
	}
	CurveType_value = map[string]int32{
		"CURVE_NONE":        0,
		"CURVE_LINEAR":      1,
		"CURVE_POWER":       2,
		"CURVE_LOGARITHMIC": 3,
		"CURVE_EXPONENTIAL": 4,
	}
)

func (x CurveType) Enum() *CurveType {
	p := new(CurveType)
	*p = x
	return p
}

func (x CurveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurveType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_data_proto_enumTypes[3].Descriptor()
}

func (CurveType) Type() protoreflect.EnumType {
	return &file_fk_data_proto_enumTypes[3]
}

func (x CurveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurveType.Descriptor instead.
func (CurveType) EnumDescriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{3}
}

type DeviceLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     uint32    `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Fix         uint32    `protobuf:"varint,1,opt,name=fix,proto3" json:"fix,omitempty"`
	Time        int64     `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Longitude   float32   `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude    float32   `protobuf:"fixed32,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Altitude    float32   `protobuf:"fixed32,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Coordinates []float32 `protobuf:"fixed32,6,rep,packed,name=coordinates,proto3" json:"coordinates,omitempty"`
	Satellites  uint32    `protobuf:"varint,8,opt,name=satellites,proto3" json:"satellites,omitempty"`
	Hdop        uint32    `protobuf:"varint,9,opt,name=hdop,proto3" json:"hdop,omitempty"`
}

func (x *DeviceLocation) Reset() {
	*x = DeviceLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceLocation) ProtoMessage() {}

func (x *DeviceLocation) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceLocation.ProtoReflect.Descriptor instead.
func (*DeviceLocation) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceLocation) GetEnabled() uint32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *DeviceLocation) GetFix() uint32 {
	if x != nil {
		return x.Fix
	}
	return 0
}

func (x *DeviceLocation) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DeviceLocation) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *DeviceLocation) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *DeviceLocation) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *DeviceLocation) GetCoordinates() []float32 {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *DeviceLocation) GetSatellites() uint32 {
	if x != nil {
		return x.Satellites
	}
	return 0
}

func (x *DeviceLocation) GetHdop() uint32 {
	if x != nil {
		return x.Hdop
	}
	return 0
}

type SensorReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reading uint64  `protobuf:"varint,1,opt,name=reading,proto3" json:"reading,omitempty"`
	Time    int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Sensor  uint32  `protobuf:"varint,3,opt,name=sensor,proto3" json:"sensor,omitempty"`
	Value   float32 `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SensorReading) Reset() {
	*x = SensorReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorReading) ProtoMessage() {}

func (x *SensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorReading.ProtoReflect.Descriptor instead.
func (*SensorReading) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{1}
}

func (x *SensorReading) GetReading() uint64 {
	if x != nil {
		return x.Reading
	}
	return 0
}

func (x *SensorReading) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SensorReading) GetSensor() uint32 {
	if x != nil {
		return x.Sensor
	}
	return 0
}

func (x *SensorReading) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type LoggedReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  uint32          `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Location *DeviceLocation `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Reading  *SensorReading  `protobuf:"bytes,3,opt,name=reading,proto3" json:"reading,omitempty"`
}

func (x *LoggedReading) Reset() {
	*x = LoggedReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedReading) ProtoMessage() {}

func (x *LoggedReading) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedReading.ProtoReflect.Descriptor instead.
func (*LoggedReading) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{2}
}

func (x *LoggedReading) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LoggedReading) GetLocation() *DeviceLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *LoggedReading) GetReading() *SensorReading {
	if x != nil {
		return x.Reading
	}
	return nil
}

type SensorAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensor uint32 `protobuf:"varint,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	// Types that are assignable to Calibrated:
	//
	//	*SensorAndValue_CalibratedNull
	//	*SensorAndValue_CalibratedValue
	Calibrated isSensorAndValue_Calibrated `protobuf_oneof:"calibrated"`
	// Types that are assignable to Uncalibrated:
	//
	//	*SensorAndValue_UncalibratedNull
	//	*SensorAndValue_UncalibratedValue
	Uncalibrated isSensorAndValue_Uncalibrated `protobuf_oneof:"uncalibrated"`
}

func (x *SensorAndValue) Reset() {
	*x = SensorAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorAndValue) ProtoMessage() {}

func (x *SensorAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorAndValue.ProtoReflect.Descriptor instead.
func (*SensorAndValue) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{3}
}

func (x *SensorAndValue) GetSensor() uint32 {
	if x != nil {
		return x.Sensor
	}
	return 0
}

func (m *SensorAndValue) GetCalibrated() isSensorAndValue_Calibrated {
	if m != nil {
		return m.Calibrated
	}
	return nil
}

func (x *SensorAndValue) GetCalibratedNull() bool {
	if x, ok := x.GetCalibrated().(*SensorAndValue_CalibratedNull); ok {
		return x.CalibratedNull
	}
	return false
}

func (x *SensorAndValue) GetCalibratedValue() float32 {
	if x, ok := x.GetCalibrated().(*SensorAndValue_CalibratedValue); ok {
		return x.CalibratedValue
	}
	return 0
}

func (m *SensorAndValue) GetUncalibrated() isSensorAndValue_Uncalibrated {
	if m != nil {
		return m.Uncalibrated
	}
	return nil
}

func (x *SensorAndValue) GetUncalibratedNull() bool {
	if x, ok := x.GetUncalibrated().(*SensorAndValue_UncalibratedNull); ok {
		return x.UncalibratedNull
	}
	return false
}

func (x *SensorAndValue) GetUncalibratedValue() float32 {
	if x, ok := x.GetUncalibrated().(*SensorAndValue_UncalibratedValue); ok {
		return x.UncalibratedValue
	}
	return 0
}

type isSensorAndValue_Calibrated interface {
	isSensorAndValue_Calibrated()
}

type SensorAndValue_CalibratedNull struct {
	CalibratedNull bool `protobuf:"varint,4,opt,name=calibratedNull,proto3,oneof"`
}

type SensorAndValue_CalibratedValue struct {
	CalibratedValue float32 `protobuf:"fixed32,2,opt,name=calibratedValue,proto3,oneof"`
}

func (*SensorAndValue_CalibratedNull) isSensorAndValue_Calibrated() {}

func (*SensorAndValue_CalibratedValue) isSensorAndValue_Calibrated() {}

type isSensorAndValue_Uncalibrated interface {
	isSensorAndValue_Uncalibrated()
}

type SensorAndValue_UncalibratedNull struct {
	UncalibratedNull bool `protobuf:"varint,5,opt,name=uncalibratedNull,proto3,oneof"`
}

type SensorAndValue_UncalibratedValue struct {
	UncalibratedValue float32 `protobuf:"fixed32,3,opt,name=uncalibratedValue,proto3,oneof"`
}

func (*SensorAndValue_UncalibratedNull) isSensorAndValue_Uncalibrated() {}

func (*SensorAndValue_UncalibratedValue) isSensorAndValue_Uncalibrated() {}

type ModuleHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manufacturer uint32 `protobuf:"varint,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Kind         uint32 `protobuf:"varint,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Version      uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ModuleHeader) Reset() {
	*x = ModuleHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleHeader) ProtoMessage() {}

func (x *ModuleHeader) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleHeader.ProtoReflect.Descriptor instead.
func (*ModuleHeader) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{4}
}

func (x *ModuleHeader) GetManufacturer() uint32 {
	if x != nil {
		return x.Manufacturer
	}
	return 0
}

func (x *ModuleHeader) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ModuleHeader) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ModuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position      uint32        `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Address       uint32        `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Name          string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Header        *ModuleHeader `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	Firmware      *Firmware     `protobuf:"bytes,5,opt,name=firmware,proto3" json:"firmware,omitempty"`
	Sensors       []*SensorInfo `protobuf:"bytes,6,rep,name=sensors,proto3" json:"sensors,omitempty"`
	Id            []byte        `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Flags         uint32        `protobuf:"varint,8,opt,name=flags,proto3" json:"flags,omitempty"`
	Configuration []byte        `protobuf:"bytes,9,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ModuleInfo) Reset() {
	*x = ModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleInfo) ProtoMessage() {}

func (x *ModuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleInfo.ProtoReflect.Descriptor instead.
func (*ModuleInfo) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{5}
}

func (x *ModuleInfo) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ModuleInfo) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *ModuleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleInfo) GetHeader() *ModuleHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ModuleInfo) GetFirmware() *Firmware {
	if x != nil {
		return x.Firmware
	}
	return nil
}

func (x *ModuleInfo) GetSensors() []*SensorInfo {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *ModuleInfo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ModuleInfo) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ModuleInfo) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type SensorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number                    uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Name                      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UnitOfMeasure             string `protobuf:"bytes,3,opt,name=unitOfMeasure,proto3" json:"unitOfMeasure,omitempty"`
	UncalibratedUnitOfMeasure string `protobuf:"bytes,5,opt,name=uncalibratedUnitOfMeasure,proto3" json:"uncalibratedUnitOfMeasure,omitempty"`
	Flags                     uint32 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *SensorInfo) Reset() {
	*x = SensorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorInfo) ProtoMessage() {}

func (x *SensorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorInfo.ProtoReflect.Descriptor instead.
func (*SensorInfo) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{6}
}

func (x *SensorInfo) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SensorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SensorInfo) GetUnitOfMeasure() string {
	if x != nil {
		return x.UnitOfMeasure
	}
	return ""
}

func (x *SensorInfo) GetUncalibratedUnitOfMeasure() string {
	if x != nil {
		return x.UncalibratedUnitOfMeasure
	}
	return ""
}

func (x *SensorInfo) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type Firmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Build     string `protobuf:"bytes,2,opt,name=build,proto3" json:"build,omitempty"`
	Number    string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hash      string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Firmware) Reset() {
	*x = Firmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firmware) ProtoMessage() {}

func (x *Firmware) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firmware.ProtoReflect.Descriptor instead.
func (*Firmware) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{7}
}

func (x *Firmware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Firmware) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Firmware) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Firmware) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Firmware) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   []byte        `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Time       int64         `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Git        string        `protobuf:"bytes,3,opt,name=git,proto3" json:"git,omitempty"`
	Build      string        `protobuf:"bytes,7,opt,name=build,proto3" json:"build,omitempty"`
	ResetCause uint32        `protobuf:"varint,4,opt,name=resetCause,proto3" json:"resetCause,omitempty"`
	Sensors    []*SensorInfo `protobuf:"bytes,5,rep,name=sensors,proto3" json:"sensors,omitempty"`
	Modules    []*ModuleInfo `protobuf:"bytes,6,rep,name=modules,proto3" json:"modules,omitempty"`
	Firmware   *Firmware     `protobuf:"bytes,8,opt,name=firmware,proto3" json:"firmware,omitempty"`
	Generation []byte        `protobuf:"bytes,9,opt,name=generation,proto3" json:"generation,omitempty"`
	Record     uint64        `protobuf:"varint,10,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{8}
}

func (x *Metadata) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *Metadata) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Metadata) GetGit() string {
	if x != nil {
		return x.Git
	}
	return ""
}

func (x *Metadata) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Metadata) GetResetCause() uint32 {
	if x != nil {
		return x.ResetCause
	}
	return 0
}

func (x *Metadata) GetSensors() []*SensorInfo {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Metadata) GetModules() []*ModuleInfo {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Metadata) GetFirmware() *Firmware {
	if x != nil {
		return x.Firmware
	}
	return nil
}

func (x *Metadata) GetGeneration() []byte {
	if x != nil {
		return x.Generation
	}
	return nil
}

func (x *Metadata) GetRecord() uint64 {
	if x != nil {
		return x.Record
	}
	return 0
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Uptime  uint32  `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Battery float32 `protobuf:"fixed32,3,opt,name=battery,proto3" json:"battery,omitempty"`
	Memory  uint32  `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty"`
	Busy    uint64  `protobuf:"varint,5,opt,name=busy,proto3" json:"busy,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{9}
}

func (x *Status) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Status) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Status) GetBattery() float32 {
	if x != nil {
		return x.Battery
	}
	return 0
}

func (x *Status) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Status) GetBusy() uint64 {
	if x != nil {
		return x.Busy
	}
	return 0
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Uptime   uint32 `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Level    uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Facility string `protobuf:"bytes,4,opt,name=facility,proto3" json:"facility,omitempty"`
	Message  string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{10}
}

func (x *LogMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LogMessage) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *LogMessage) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LogMessage) GetFacility() string {
	if x != nil {
		return x.Facility
	}
	return ""
}

func (x *LogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SensorGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module   uint32            `protobuf:"varint,1,opt,name=module,proto3" json:"module,omitempty"`
	Time     int64             `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Readings []*SensorAndValue `protobuf:"bytes,2,rep,name=readings,proto3" json:"readings,omitempty"`
}

func (x *SensorGroup) Reset() {
	*x = SensorGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorGroup) ProtoMessage() {}

func (x *SensorGroup) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorGroup.ProtoReflect.Descriptor instead.
func (*SensorGroup) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{11}
}

func (x *SensorGroup) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *SensorGroup) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SensorGroup) GetReadings() []*SensorAndValue {
	if x != nil {
		return x.Readings
	}
	return nil
}

type Readings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Reading      uint64          `protobuf:"varint,2,opt,name=reading,proto3" json:"reading,omitempty"`
	Flags        uint32          `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	Meta         uint64          `protobuf:"varint,6,opt,name=meta,proto3" json:"meta,omitempty"`
	Uptime       uint32          `protobuf:"varint,7,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Location     *DeviceLocation `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	SensorGroups []*SensorGroup  `protobuf:"bytes,5,rep,name=sensorGroups,proto3" json:"sensorGroups,omitempty"`
}

func (x *Readings) Reset() {
	*x = Readings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Readings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Readings) ProtoMessage() {}

func (x *Readings) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Readings.ProtoReflect.Descriptor instead.
func (*Readings) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{12}
}

func (x *Readings) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Readings) GetReading() uint64 {
	if x != nil {
		return x.Reading
	}
	return 0
}

func (x *Readings) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Readings) GetMeta() uint64 {
	if x != nil {
		return x.Meta
	}
	return 0
}

func (x *Readings) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Readings) GetLocation() *DeviceLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Readings) GetSensorGroups() []*SensorGroup {
	if x != nil {
		return x.SensorGroups
	}
	return nil
}

type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End      uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Interval uint32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Interval) Reset() {
	*x = Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{13}
}

func (x *Interval) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Interval) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Interval) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type JobSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cron      []byte      `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
	Interval  uint32      `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Repeated  uint32      `protobuf:"varint,3,opt,name=repeated,proto3" json:"repeated,omitempty"`
	Duration  uint32      `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Jitter    uint32      `protobuf:"varint,5,opt,name=jitter,proto3" json:"jitter,omitempty"`
	Intervals []*Interval `protobuf:"bytes,6,rep,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *JobSchedule) Reset() {
	*x = JobSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSchedule) ProtoMessage() {}

func (x *JobSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSchedule.ProtoReflect.Descriptor instead.
func (*JobSchedule) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{14}
}

func (x *JobSchedule) GetCron() []byte {
	if x != nil {
		return x.Cron
	}
	return nil
}

func (x *JobSchedule) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *JobSchedule) GetRepeated() uint32 {
	if x != nil {
		return x.Repeated
	}
	return 0
}

func (x *JobSchedule) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *JobSchedule) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *JobSchedule) GetIntervals() []*Interval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Readings *JobSchedule `protobuf:"bytes,1,opt,name=readings,proto3" json:"readings,omitempty"`
	Network  *JobSchedule `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Lora     *JobSchedule `protobuf:"bytes,3,opt,name=lora,proto3" json:"lora,omitempty"`
	Gps      *JobSchedule `protobuf:"bytes,4,opt,name=gps,proto3" json:"gps,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{15}
}

func (x *Schedule) GetReadings() *JobSchedule {
	if x != nil {
		return x.Readings
	}
	return nil
}

func (x *Schedule) GetNetwork() *JobSchedule {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Schedule) GetLora() *JobSchedule {
	if x != nil {
		return x.Lora
	}
	return nil
}

func (x *Schedule) GetGps() *JobSchedule {
	if x != nil {
		return x.Gps
	}
	return nil
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{16}
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags     uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Recording uint32 `protobuf:"varint,2,opt,name=recording,proto3" json:"recording,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{17}
}

func (x *Condition) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Condition) GetRecording() uint32 {
	if x != nil {
		return x.Recording
	}
	return 0
}

type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid      string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Create    bool   `protobuf:"varint,3,opt,name=create,proto3" json:"create,omitempty"`
	Preferred bool   `protobuf:"varint,4,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{18}
}

func (x *NetworkInfo) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *NetworkInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NetworkInfo) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *NetworkInfo) GetPreferred() bool {
	if x != nil {
		return x.Preferred
	}
	return false
}

type WifiTransmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Enabled bool   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *WifiTransmission) Reset() {
	*x = WifiTransmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiTransmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiTransmission) ProtoMessage() {}

func (x *WifiTransmission) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiTransmission.ProtoReflect.Descriptor instead.
func (*WifiTransmission) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{19}
}

func (x *WifiTransmission) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WifiTransmission) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WifiTransmission) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type TransmissionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wifi *WifiTransmission `protobuf:"bytes,1,opt,name=wifi,proto3" json:"wifi,omitempty"`
}

func (x *TransmissionSettings) Reset() {
	*x = TransmissionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmissionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmissionSettings) ProtoMessage() {}

func (x *TransmissionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmissionSettings.ProtoReflect.Descriptor instead.
func (*TransmissionSettings) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{20}
}

func (x *TransmissionSettings) GetWifi() *WifiTransmission {
	if x != nil {
		return x.Wifi
	}
	return nil
}

type NetworkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*NetworkInfo `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *NetworkSettings) Reset() {
	*x = NetworkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSettings) ProtoMessage() {}

func (x *NetworkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSettings.ProtoReflect.Descriptor instead.
func (*NetworkSettings) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{21}
}

func (x *NetworkSettings) GetNetworks() []*NetworkInfo {
	if x != nil {
		return x.Networks
	}
	return nil
}

type LoraSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceEui         []byte `protobuf:"bytes,1,opt,name=deviceEui,proto3" json:"deviceEui,omitempty"`
	AppKey            []byte `protobuf:"bytes,2,opt,name=appKey,proto3" json:"appKey,omitempty"`
	JoinEui           []byte `protobuf:"bytes,3,opt,name=joinEui,proto3" json:"joinEui,omitempty"`
	FrequencyBand     uint32 `protobuf:"varint,4,opt,name=frequencyBand,proto3" json:"frequencyBand,omitempty"`
	DeviceAddress     []byte `protobuf:"bytes,5,opt,name=deviceAddress,proto3" json:"deviceAddress,omitempty"`
	NetworkSessionKey []byte `protobuf:"bytes,6,opt,name=networkSessionKey,proto3" json:"networkSessionKey,omitempty"`
	AppSessionKey     []byte `protobuf:"bytes,7,opt,name=appSessionKey,proto3" json:"appSessionKey,omitempty"`
	UplinkCounter     uint32 `protobuf:"varint,8,opt,name=uplinkCounter,proto3" json:"uplinkCounter,omitempty"`
	DownlinkCounter   uint32 `protobuf:"varint,9,opt,name=downlinkCounter,proto3" json:"downlinkCounter,omitempty"`
	RxDelay1          uint32 `protobuf:"varint,10,opt,name=rxDelay1,proto3" json:"rxDelay1,omitempty"`
	RxDelay2          uint32 `protobuf:"varint,11,opt,name=rxDelay2,proto3" json:"rxDelay2,omitempty"`
}

func (x *LoraSettings) Reset() {
	*x = LoraSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraSettings) ProtoMessage() {}

func (x *LoraSettings) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraSettings.ProtoReflect.Descriptor instead.
func (*LoraSettings) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{22}
}

func (x *LoraSettings) GetDeviceEui() []byte {
	if x != nil {
		return x.DeviceEui
	}
	return nil
}

func (x *LoraSettings) GetAppKey() []byte {
	if x != nil {
		return x.AppKey
	}
	return nil
}

func (x *LoraSettings) GetJoinEui() []byte {
	if x != nil {
		return x.JoinEui
	}
	return nil
}

func (x *LoraSettings) GetFrequencyBand() uint32 {
	if x != nil {
		return x.FrequencyBand
	}
	return 0
}

func (x *LoraSettings) GetDeviceAddress() []byte {
	if x != nil {
		return x.DeviceAddress
	}
	return nil
}

func (x *LoraSettings) GetNetworkSessionKey() []byte {
	if x != nil {
		return x.NetworkSessionKey
	}
	return nil
}

func (x *LoraSettings) GetAppSessionKey() []byte {
	if x != nil {
		return x.AppSessionKey
	}
	return nil
}

func (x *LoraSettings) GetUplinkCounter() uint32 {
	if x != nil {
		return x.UplinkCounter
	}
	return 0
}

func (x *LoraSettings) GetDownlinkCounter() uint32 {
	if x != nil {
		return x.DownlinkCounter
	}
	return 0
}

func (x *LoraSettings) GetRxDelay1() uint32 {
	if x != nil {
		return x.RxDelay1
	}
	return 0
}

func (x *LoraSettings) GetRxDelay2() uint32 {
	if x != nil {
		return x.RxDelay2
	}
	return 0
}

type Fault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Code        uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Debug       []byte `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *Fault) Reset() {
	*x = Fault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fault) ProtoMessage() {}

func (x *Fault) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fault.ProtoReflect.Descriptor instead.
func (*Fault) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{23}
}

func (x *Fault) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Fault) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Fault) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Fault) GetDebug() []byte {
	if x != nil {
		return x.Debug
	}
	return nil
}

// *
// I may break this into a MetaRecord.
type DataRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggedReading *LoggedReading        `protobuf:"bytes,1,opt,name=loggedReading,proto3" json:"loggedReading,omitempty"`
	Metadata      *Metadata             `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Log           *LogMessage           `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Logs          []*LogMessage         `protobuf:"bytes,13,rep,name=logs,proto3" json:"logs,omitempty"`
	Status        *Status               `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Readings      *Readings             `protobuf:"bytes,5,opt,name=readings,proto3" json:"readings,omitempty"`
	Modules       []*ModuleInfo         `protobuf:"bytes,6,rep,name=modules,proto3" json:"modules,omitempty"`
	Schedule      *Schedule             `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Meta          uint64                `protobuf:"varint,8,opt,name=meta,proto3" json:"meta,omitempty"`
	Identity      *Identity             `protobuf:"bytes,9,opt,name=identity,proto3" json:"identity,omitempty"`
	Condition     *Condition            `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
	Lora          *LoraSettings         `protobuf:"bytes,11,opt,name=lora,proto3" json:"lora,omitempty"`
	Network       *NetworkSettings      `protobuf:"bytes,12,opt,name=network,proto3" json:"network,omitempty"`
	Transmission  *TransmissionSettings `protobuf:"bytes,14,opt,name=transmission,proto3" json:"transmission,omitempty"`
	Faults        []*Fault              `protobuf:"bytes,15,rep,name=faults,proto3" json:"faults,omitempty"`
}

func (x *DataRecord) Reset() {
	*x = DataRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRecord) ProtoMessage() {}

func (x *DataRecord) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRecord.ProtoReflect.Descriptor instead.
func (*DataRecord) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{24}
}

func (x *DataRecord) GetLoggedReading() *LoggedReading {
	if x != nil {
		return x.LoggedReading
	}
	return nil
}

func (x *DataRecord) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DataRecord) GetLog() *LogMessage {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *DataRecord) GetLogs() []*LogMessage {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *DataRecord) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DataRecord) GetReadings() *Readings {
	if x != nil {
		return x.Readings
	}
	return nil
}

func (x *DataRecord) GetModules() []*ModuleInfo {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *DataRecord) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *DataRecord) GetMeta() uint64 {
	if x != nil {
		return x.Meta
	}
	return 0
}

func (x *DataRecord) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *DataRecord) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *DataRecord) GetLora() *LoraSettings {
	if x != nil {
		return x.Lora
	}
	return nil
}

func (x *DataRecord) GetNetwork() *NetworkSettings {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *DataRecord) GetTransmission() *TransmissionSettings {
	if x != nil {
		return x.Transmission
	}
	return nil
}

func (x *DataRecord) GetFaults() []*Fault {
	if x != nil {
		return x.Faults
	}
	return nil
}

type SignedRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind   SignedRecordKind `protobuf:"varint,1,opt,name=kind,proto3,enum=fk_data.SignedRecordKind" json:"kind,omitempty"`
	Time   int64            `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Data   []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Hash   []byte           `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Record uint64           `protobuf:"varint,5,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *SignedRecord) Reset() {
	*x = SignedRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedRecord) ProtoMessage() {}

func (x *SignedRecord) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedRecord.ProtoReflect.Descriptor instead.
func (*SignedRecord) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{25}
}

func (x *SignedRecord) GetKind() SignedRecordKind {
	if x != nil {
		return x.Kind
	}
	return SignedRecordKind_SIGNED_RECORD_KIND_NONE
}

func (x *SignedRecord) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SignedRecord) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SignedRecord) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SignedRecord) GetRecord() uint64 {
	if x != nil {
		return x.Record
	}
	return 0
}

type LoraRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId []byte    `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Time     int64     `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Number   uint64    `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Module   uint32    `protobuf:"varint,4,opt,name=module,proto3" json:"module,omitempty"`
	Sensor   uint64    `protobuf:"varint,5,opt,name=sensor,proto3" json:"sensor,omitempty"`
	Values   []float32 `protobuf:"fixed32,6,rep,packed,name=values,proto3" json:"values,omitempty"`
	Data     []byte    `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LoraRecord) Reset() {
	*x = LoraRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraRecord) ProtoMessage() {}

func (x *LoraRecord) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraRecord.ProtoReflect.Descriptor instead.
func (*LoraRecord) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{26}
}

func (x *LoraRecord) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *LoraRecord) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LoraRecord) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *LoraRecord) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *LoraRecord) GetSensor() uint64 {
	if x != nil {
		return x.Sensor
	}
	return 0
}

func (x *LoraRecord) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *LoraRecord) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CalibrationPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	References   []float32 `protobuf:"fixed32,1,rep,packed,name=references,proto3" json:"references,omitempty"`
	Uncalibrated []float32 `protobuf:"fixed32,2,rep,packed,name=uncalibrated,proto3" json:"uncalibrated,omitempty"`
	Factory      []float32 `protobuf:"fixed32,3,rep,packed,name=factory,proto3" json:"factory,omitempty"`
	Adc          [][]byte  `protobuf:"bytes,4,rep,name=adc,proto3" json:"adc,omitempty"`
}

func (x *CalibrationPoint) Reset() {
	*x = CalibrationPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrationPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationPoint) ProtoMessage() {}

func (x *CalibrationPoint) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrationPoint.ProtoReflect.Descriptor instead.
func (*CalibrationPoint) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{27}
}

func (x *CalibrationPoint) GetReferences() []float32 {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *CalibrationPoint) GetUncalibrated() []float32 {
	if x != nil {
		return x.Uncalibrated
	}
	return nil
}

func (x *CalibrationPoint) GetFactory() []float32 {
	if x != nil {
		return x.Factory
	}
	return nil
}

func (x *CalibrationPoint) GetAdc() [][]byte {
	if x != nil {
		return x.Adc
	}
	return nil
}

type CalibrationCoefficients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float32 `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *CalibrationCoefficients) Reset() {
	*x = CalibrationCoefficients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrationCoefficients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationCoefficients) ProtoMessage() {}

func (x *CalibrationCoefficients) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrationCoefficients.ProtoReflect.Descriptor instead.
func (*CalibrationCoefficients) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{28}
}

func (x *CalibrationCoefficients) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Calibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         CurveType                `protobuf:"varint,1,opt,name=type,proto3,enum=fk_data.CurveType" json:"type,omitempty"`
	Time         uint32                   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Kind         uint32                   `protobuf:"varint,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Points       []*CalibrationPoint      `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
	Coefficients *CalibrationCoefficients `protobuf:"bytes,4,opt,name=coefficients,proto3" json:"coefficients,omitempty"`
	Firmware     *Firmware                `protobuf:"bytes,5,opt,name=firmware,proto3" json:"firmware,omitempty"`
}

func (x *Calibration) Reset() {
	*x = Calibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Calibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calibration) ProtoMessage() {}

func (x *Calibration) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calibration.ProtoReflect.Descriptor instead.
func (*Calibration) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{29}
}

func (x *Calibration) GetType() CurveType {
	if x != nil {
		return x.Type
	}
	return CurveType_CURVE_NONE
}

func (x *Calibration) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Calibration) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Calibration) GetPoints() []*CalibrationPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Calibration) GetCoefficients() *CalibrationCoefficients {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

func (x *Calibration) GetFirmware() *Firmware {
	if x != nil {
		return x.Firmware
	}
	return nil
}

type ModuleConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calibration  *Calibration   `protobuf:"bytes,1,opt,name=calibration,proto3" json:"calibration,omitempty"` // DEPRECATED
	Calibrations []*Calibration `protobuf:"bytes,2,rep,name=calibrations,proto3" json:"calibrations,omitempty"`
}

func (x *ModuleConfiguration) Reset() {
	*x = ModuleConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleConfiguration) ProtoMessage() {}

func (x *ModuleConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_fk_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleConfiguration.ProtoReflect.Descriptor instead.
func (*ModuleConfiguration) Descriptor() ([]byte, []int) {
	return file_fk_data_proto_rawDescGZIP(), []int{30}
}

func (x *ModuleConfiguration) GetCalibration() *Calibration {
	if x != nil {
		return x.Calibration
	}
	return nil
}

func (x *ModuleConfiguration) GetCalibrations() []*Calibration {
	if x != nil {
		return x.Calibrations
	}
	return nil
}

var File_fk_data_proto protoreflect.FileDescriptor

var file_fk_data_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x6b, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x22, 0x6b, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x0f,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x75, 0x6e, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x01, 0x52, 0x11, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x60, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74,
	0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x6e, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6e,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x84, 0x01,
	0x0a, 0x08, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0xc7, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x67, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6b, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x08, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x7a,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x75, 0x73, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x6e, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xe9, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x4e, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xbe, 0x01,
	0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x72, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xbe,
	0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a,
	0x04, 0x6c, 0x6f, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x12, 0x26, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x03, 0x67, 0x70, 0x73, 0x22,
	0x1e, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3f, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0x73, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x10, 0x57, 0x69, 0x66, 0x69, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x77, 0x69, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x77, 0x69,
	0x66, 0x69, 0x22, 0x43, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x72, 0x61,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x75, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x78, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x78, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32,
	0x22, 0x67, 0x0a, 0x05, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xbe, 0x05, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x27, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6b, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a,
	0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x2d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x12, 0x32, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x41, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xb0,
	0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x72, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x75, 0x6e,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x03, 0x61, 0x64, 0x63, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0b, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0c,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x62, 0x0a, 0x0d, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a,
	0x49, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0xee, 0x01, 0x0a, 0x10, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x18,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xff, 0x01, 0x2a, 0x6c, 0x0a, 0x09, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x52, 0x56,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x56,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x55, 0x52, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x49, 0x43,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x42, 0x44, 0x0a, 0x1f, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x66, 0x79, 0x2e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x6b, 0x69, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x62, 0x5a, 0x21, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6b, 0x69,
	0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fk_data_proto_rawDescOnce sync.Once
	file_fk_data_proto_rawDescData = file_fk_data_proto_rawDesc
)

func file_fk_data_proto_rawDescGZIP() []byte {
	file_fk_data_proto_rawDescOnce.Do(func() {
		file_fk_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_fk_data_proto_rawDescData)
	})
	return file_fk_data_proto_rawDescData
}

var file_fk_data_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_fk_data_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_fk_data_proto_goTypes = []interface{}{
	(DownloadFlags)(0),              // 0: fk_data.DownloadFlags
	(ConditionFlags)(0),             // 1: fk_data.ConditionFlags
	(SignedRecordKind)(0),           // 2: fk_data.SignedRecordKind
	(CurveType)(0),                  // 3: fk_data.CurveType
	(*DeviceLocation)(nil),          // 4: fk_data.DeviceLocation
	(*SensorReading)(nil),           // 5: fk_data.SensorReading
	(*LoggedReading)(nil),           // 6: fk_data.LoggedReading
	(*SensorAndValue)(nil),          // 7: fk_data.SensorAndValue
	(*ModuleHeader)(nil),            // 8: fk_data.ModuleHeader
	(*ModuleInfo)(nil),              // 9: fk_data.ModuleInfo
	(*SensorInfo)(nil),              // 10: fk_data.SensorInfo
	(*Firmware)(nil),                // 11: fk_data.Firmware
	(*Metadata)(nil),                // 12: fk_data.Metadata
	(*Status)(nil),                  // 13: fk_data.Status
	(*LogMessage)(nil),              // 14: fk_data.LogMessage
	(*SensorGroup)(nil),             // 15: fk_data.SensorGroup
	(*Readings)(nil),                // 16: fk_data.Readings
	(*Interval)(nil),                // 17: fk_data.Interval
	(*JobSchedule)(nil),             // 18: fk_data.JobSchedule
	(*Schedule)(nil),                // 19: fk_data.Schedule
	(*Identity)(nil),                // 20: fk_data.Identity
	(*Condition)(nil),               // 21: fk_data.Condition
	(*NetworkInfo)(nil),             // 22: fk_data.NetworkInfo
	(*WifiTransmission)(nil),        // 23: fk_data.WifiTransmission
	(*TransmissionSettings)(nil),    // 24: fk_data.TransmissionSettings
	(*NetworkSettings)(nil),         // 25: fk_data.NetworkSettings
	(*LoraSettings)(nil),            // 26: fk_data.LoraSettings
	(*Fault)(nil),                   // 27: fk_data.Fault
	(*DataRecord)(nil),              // 28: fk_data.DataRecord
	(*SignedRecord)(nil),            // 29: fk_data.SignedRecord
	(*LoraRecord)(nil),              // 30: fk_data.LoraRecord
	(*CalibrationPoint)(nil),        // 31: fk_data.CalibrationPoint
	(*CalibrationCoefficients)(nil), // 32: fk_data.CalibrationCoefficients
	(*Calibration)(nil),             // 33: fk_data.Calibration
	(*ModuleConfiguration)(nil),     // 34: fk_data.ModuleConfiguration
}
var file_fk_data_proto_depIdxs = []int32{
	4,  // 0: fk_data.LoggedReading.location:type_name -> fk_data.DeviceLocation
	5,  // 1: fk_data.LoggedReading.reading:type_name -> fk_data.SensorReading
	8,  // 2: fk_data.ModuleInfo.header:type_name -> fk_data.ModuleHeader
	11, // 3: fk_data.ModuleInfo.firmware:type_name -> fk_data.Firmware
	10, // 4: fk_data.ModuleInfo.sensors:type_name -> fk_data.SensorInfo
	10, // 5: fk_data.Metadata.sensors:type_name -> fk_data.SensorInfo
	9,  // 6: fk_data.Metadata.modules:type_name -> fk_data.ModuleInfo
	11, // 7: fk_data.Metadata.firmware:type_name -> fk_data.Firmware
	7,  // 8: fk_data.SensorGroup.readings:type_name -> fk_data.SensorAndValue
	4,  // 9: fk_data.Readings.location:type_name -> fk_data.DeviceLocation
	15, // 10: fk_data.Readings.sensorGroups:type_name -> fk_data.SensorGroup
	17, // 11: fk_data.JobSchedule.intervals:type_name -> fk_data.Interval
	18, // 12: fk_data.Schedule.readings:type_name -> fk_data.JobSchedule
	18, // 13: fk_data.Schedule.network:type_name -> fk_data.JobSchedule
	18, // 14: fk_data.Schedule.lora:type_name -> fk_data.JobSchedule
	18, // 15: fk_data.Schedule.gps:type_name -> fk_data.JobSchedule
	23, // 16: fk_data.TransmissionSettings.wifi:type_name -> fk_data.WifiTransmission
	22, // 17: fk_data.NetworkSettings.networks:type_name -> fk_data.NetworkInfo
	6,  // 18: fk_data.DataRecord.loggedReading:type_name -> fk_data.LoggedReading
	12, // 19: fk_data.DataRecord.metadata:type_name -> fk_data.Metadata
	14, // 20: fk_data.DataRecord.log:type_name -> fk_data.LogMessage
	14, // 21: fk_data.DataRecord.logs:type_name -> fk_data.LogMessage
	13, // 22: fk_data.DataRecord.status:type_name -> fk_data.Status
	16, // 23: fk_data.DataRecord.readings:type_name -> fk_data.Readings
	9,  // 24: fk_data.DataRecord.modules:type_name -> fk_data.ModuleInfo
	19, // 25: fk_data.DataRecord.schedule:type_name -> fk_data.Schedule
	20, // 26: fk_data.DataRecord.identity:type_name -> fk_data.Identity
	21, // 27: fk_data.DataRecord.condition:type_name -> fk_data.Condition
	26, // 28: fk_data.DataRecord.lora:type_name -> fk_data.LoraSettings
	25, // 29: fk_data.DataRecord.network:type_name -> fk_data.NetworkSettings
	24, // 30: fk_data.DataRecord.transmission:type_name -> fk_data.TransmissionSettings
	27, // 31: fk_data.DataRecord.faults:type_name -> fk_data.Fault
	2,  // 32: fk_data.SignedRecord.kind:type_name -> fk_data.SignedRecordKind
	3,  // 33: fk_data.Calibration.type:type_name -> fk_data.CurveType
	31, // 34: fk_data.Calibration.points:type_name -> fk_data.CalibrationPoint
	32, // 35: fk_data.Calibration.coefficients:type_name -> fk_data.CalibrationCoefficients
	11, // 36: fk_data.Calibration.firmware:type_name -> fk_data.Firmware
	33, // 37: fk_data.ModuleConfiguration.calibration:type_name -> fk_data.Calibration
	33, // 38: fk_data.ModuleConfiguration.calibrations:type_name -> fk_data.Calibration
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_fk_data_proto_init() }
func file_fk_data_proto_init() {
	if File_fk_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fk_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Readings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiTransmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmissionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalibrationPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalibrationCoefficients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Calibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fk_data_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SensorAndValue_CalibratedNull)(nil),
		(*SensorAndValue_CalibratedValue)(nil),
		(*SensorAndValue_UncalibratedNull)(nil),
		(*SensorAndValue_UncalibratedValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fk_data_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fk_data_proto_goTypes,
		DependencyIndexes: file_fk_data_proto_depIdxs,
		EnumInfos:         file_fk_data_proto_enumTypes,
		MessageInfos:      file_fk_data_proto_msgTypes,
	}.Build()
	File_fk_data_proto = out.File
	file_fk_data_proto_rawDesc = nil
	file_fk_data_proto_goTypes = nil
	file_fk_data_proto_depIdxs = nil
}
