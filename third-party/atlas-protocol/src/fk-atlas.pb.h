/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5-dev */

#ifndef PB_FK_ATLAS_FK_ATLAS_PB_H_INCLUDED
#define PB_FK_ATLAS_FK_ATLAS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _fk_atlas_SensorType {
    fk_atlas_SensorType_SENSOR_NONE = 0,
    fk_atlas_SensorType_SENSOR_PH = 1,
    fk_atlas_SensorType_SENSOR_TEMP = 2,
    fk_atlas_SensorType_SENSOR_ORP = 3,
    fk_atlas_SensorType_SENSOR_DO = 4,
    fk_atlas_SensorType_SENSOR_EC = 5
} fk_atlas_SensorType;

typedef enum _fk_atlas_QueryType {
    fk_atlas_QueryType_QUERY_NONE = 0
} fk_atlas_QueryType;

typedef enum _fk_atlas_CalibrationOperation {
    fk_atlas_CalibrationOperation_CALIBRATION_NONE = 0,
    fk_atlas_CalibrationOperation_CALIBRATION_STATUS = 1,
    fk_atlas_CalibrationOperation_CALIBRATION_CLEAR = 2,
    fk_atlas_CalibrationOperation_CALIBRATION_SET = 3
} fk_atlas_CalibrationOperation;

typedef enum _fk_atlas_TempCalibrations {
    fk_atlas_TempCalibrations_TEMP_NONE = 0,
    fk_atlas_TempCalibrations_TEMP_SINGLE = 1
} fk_atlas_TempCalibrations;

typedef enum _fk_atlas_TempCalibrateCommand {
    fk_atlas_TempCalibrateCommand_CALIBRATE_TEMP_NONE = 0,
    fk_atlas_TempCalibrateCommand_CALIBRATE_TEMP_CLEAR = 1,
    fk_atlas_TempCalibrateCommand_CALIBRATE_TEMP_SINGLE = 2
} fk_atlas_TempCalibrateCommand;

typedef enum _fk_atlas_DoCalibrations {
    fk_atlas_DoCalibrations_DO_NONE = 0,
    fk_atlas_DoCalibrations_DO_ATMOSPHERE = 1,
    fk_atlas_DoCalibrations_DO_ZERO = 2
} fk_atlas_DoCalibrations;

typedef enum _fk_atlas_DoCalibrateCommand {
    fk_atlas_DoCalibrateCommand_CALIBRATE_DO_NONE = 0,
    fk_atlas_DoCalibrateCommand_CALIBRATE_DO_CLEAR = 1,
    fk_atlas_DoCalibrateCommand_CALIBRATE_DO_ATMOSPHERE = 2,
    fk_atlas_DoCalibrateCommand_CALIBRATE_DO_ZERO = 3
} fk_atlas_DoCalibrateCommand;

typedef enum _fk_atlas_PhCalibrations {
    fk_atlas_PhCalibrations_PH_NONE = 0,
    fk_atlas_PhCalibrations_PH_LOW = 1,
    fk_atlas_PhCalibrations_PH_MIDDLE = 2,
    fk_atlas_PhCalibrations_PH_HIGH = 4
} fk_atlas_PhCalibrations;

typedef enum _fk_atlas_PhCalibrateCommand {
    fk_atlas_PhCalibrateCommand_CALIBRATE_PH_NONE = 0,
    fk_atlas_PhCalibrateCommand_CALIBRATE_PH_CLEAR = 1,
    fk_atlas_PhCalibrateCommand_CALIBRATE_PH_LOW = 2,
    fk_atlas_PhCalibrateCommand_CALIBRATE_PH_MIDDLE = 3,
    fk_atlas_PhCalibrateCommand_CALIBRATE_PH_HIGH = 4
} fk_atlas_PhCalibrateCommand;

typedef enum _fk_atlas_EcCalibrations {
    fk_atlas_EcCalibrations_EC_NONE = 0,
    fk_atlas_EcCalibrations_EC_DRY = 1,
    fk_atlas_EcCalibrations_EC_SINGLE = 2,
    fk_atlas_EcCalibrations_EC_DUAL_LOW = 4,
    fk_atlas_EcCalibrations_EC_DUAL_HIGH = 8
} fk_atlas_EcCalibrations;

typedef enum _fk_atlas_EcCalibrateCommand {
    fk_atlas_EcCalibrateCommand_CALIBRATE_EC_NONE = 0,
    fk_atlas_EcCalibrateCommand_CALIBRATE_EC_CLEAR = 1,
    fk_atlas_EcCalibrateCommand_CALIBRATE_EC_DRY = 2,
    fk_atlas_EcCalibrateCommand_CALIBRATE_EC_SINGLE = 3,
    fk_atlas_EcCalibrateCommand_CALIBRATE_EC_DUAL_LOW = 4,
    fk_atlas_EcCalibrateCommand_CALIBRATE_EC_DUAL_HIGH = 5
} fk_atlas_EcCalibrateCommand;

typedef enum _fk_atlas_OrpCalibrations {
    fk_atlas_OrpCalibrations_ORP_NONE = 0,
    fk_atlas_OrpCalibrations_ORP_SINGLE = 1
} fk_atlas_OrpCalibrations;

typedef enum _fk_atlas_OrpCalibrateCommand {
    fk_atlas_OrpCalibrateCommand_CALIBRATE_ORP_NONE = 0,
    fk_atlas_OrpCalibrateCommand_CALIBRATE_ORP_SINGLE = 1
} fk_atlas_OrpCalibrateCommand;

typedef enum _fk_atlas_ReplyType {
    fk_atlas_ReplyType_REPLY_NONE = 0,
    fk_atlas_ReplyType_REPLY_RETRY = 1,
    fk_atlas_ReplyType_REPLY_ERROR = 2,
    fk_atlas_ReplyType_REPLY_STATUS = 3,
    fk_atlas_ReplyType_REPLY_COMMAND = 4
} fk_atlas_ReplyType;

typedef enum _fk_atlas_ErrorType {
    fk_atlas_ErrorType_NONE = 0,
    fk_atlas_ErrorType_GENERAL = 1,
    fk_atlas_ErrorType_UNEXPECTED = 2
} fk_atlas_ErrorType;

/* Struct definitions */
typedef struct _fk_atlas_TwoWireReply {
    pb_callback_t data;
} fk_atlas_TwoWireReply;

typedef struct _fk_atlas_AtlasCalibrationCommand {
    fk_atlas_CalibrationOperation operation;
    fk_atlas_TempCalibrations temp;
    fk_atlas_DoCalibrations dissolvedOxygen;
    fk_atlas_PhCalibrations ph;
    fk_atlas_EcCalibrations ec;
    fk_atlas_OrpCalibrations orp;
    float value;
    uint32_t which;
    pb_callback_t configuration;
} fk_atlas_AtlasCalibrationCommand;

typedef struct _fk_atlas_AtlasCalibrationStatus {
    fk_atlas_SensorType type;
    uint32_t time;
    fk_atlas_TempCalibrations temp;
    fk_atlas_DoCalibrations dissolvedOxygen;
    fk_atlas_PhCalibrations ph;
    fk_atlas_EcCalibrations ec;
    fk_atlas_OrpCalibrations orp;
    uint32_t raw;
    pb_callback_t configuration;
} fk_atlas_AtlasCalibrationStatus;

typedef struct _fk_atlas_Compensations {
    float temperature;
} fk_atlas_Compensations;

typedef struct _fk_atlas_Error {
    fk_atlas_ErrorType type;
    pb_callback_t message;
} fk_atlas_Error;

typedef struct _fk_atlas_TwoWireQuery {
    uint32_t read;
    uint32_t write;
    pb_callback_t data;
} fk_atlas_TwoWireQuery;

typedef struct _fk_atlas_WireAtlasQuery {
    fk_atlas_QueryType type;
    bool has_calibration;
    fk_atlas_AtlasCalibrationCommand calibration;
    bool has_compensations;
    fk_atlas_Compensations compensations;
    bool has_wire;
    fk_atlas_TwoWireQuery wire;
} fk_atlas_WireAtlasQuery;

typedef struct _fk_atlas_WireAtlasReply {
    fk_atlas_ReplyType type;
    pb_callback_t errors;
    bool has_calibration;
    fk_atlas_AtlasCalibrationStatus calibration;
    bool has_wire;
    fk_atlas_TwoWireReply wire;
} fk_atlas_WireAtlasReply;


/* Helper constants for enums */
#define _fk_atlas_SensorType_MIN fk_atlas_SensorType_SENSOR_NONE
#define _fk_atlas_SensorType_MAX fk_atlas_SensorType_SENSOR_EC
#define _fk_atlas_SensorType_ARRAYSIZE ((fk_atlas_SensorType)(fk_atlas_SensorType_SENSOR_EC+1))

#define _fk_atlas_QueryType_MIN fk_atlas_QueryType_QUERY_NONE
#define _fk_atlas_QueryType_MAX fk_atlas_QueryType_QUERY_NONE
#define _fk_atlas_QueryType_ARRAYSIZE ((fk_atlas_QueryType)(fk_atlas_QueryType_QUERY_NONE+1))

#define _fk_atlas_CalibrationOperation_MIN fk_atlas_CalibrationOperation_CALIBRATION_NONE
#define _fk_atlas_CalibrationOperation_MAX fk_atlas_CalibrationOperation_CALIBRATION_SET
#define _fk_atlas_CalibrationOperation_ARRAYSIZE ((fk_atlas_CalibrationOperation)(fk_atlas_CalibrationOperation_CALIBRATION_SET+1))

#define _fk_atlas_TempCalibrations_MIN fk_atlas_TempCalibrations_TEMP_NONE
#define _fk_atlas_TempCalibrations_MAX fk_atlas_TempCalibrations_TEMP_SINGLE
#define _fk_atlas_TempCalibrations_ARRAYSIZE ((fk_atlas_TempCalibrations)(fk_atlas_TempCalibrations_TEMP_SINGLE+1))

#define _fk_atlas_TempCalibrateCommand_MIN fk_atlas_TempCalibrateCommand_CALIBRATE_TEMP_NONE
#define _fk_atlas_TempCalibrateCommand_MAX fk_atlas_TempCalibrateCommand_CALIBRATE_TEMP_SINGLE
#define _fk_atlas_TempCalibrateCommand_ARRAYSIZE ((fk_atlas_TempCalibrateCommand)(fk_atlas_TempCalibrateCommand_CALIBRATE_TEMP_SINGLE+1))

#define _fk_atlas_DoCalibrations_MIN fk_atlas_DoCalibrations_DO_NONE
#define _fk_atlas_DoCalibrations_MAX fk_atlas_DoCalibrations_DO_ZERO
#define _fk_atlas_DoCalibrations_ARRAYSIZE ((fk_atlas_DoCalibrations)(fk_atlas_DoCalibrations_DO_ZERO+1))

#define _fk_atlas_DoCalibrateCommand_MIN fk_atlas_DoCalibrateCommand_CALIBRATE_DO_NONE
#define _fk_atlas_DoCalibrateCommand_MAX fk_atlas_DoCalibrateCommand_CALIBRATE_DO_ZERO
#define _fk_atlas_DoCalibrateCommand_ARRAYSIZE ((fk_atlas_DoCalibrateCommand)(fk_atlas_DoCalibrateCommand_CALIBRATE_DO_ZERO+1))

#define _fk_atlas_PhCalibrations_MIN fk_atlas_PhCalibrations_PH_NONE
#define _fk_atlas_PhCalibrations_MAX fk_atlas_PhCalibrations_PH_HIGH
#define _fk_atlas_PhCalibrations_ARRAYSIZE ((fk_atlas_PhCalibrations)(fk_atlas_PhCalibrations_PH_HIGH+1))

#define _fk_atlas_PhCalibrateCommand_MIN fk_atlas_PhCalibrateCommand_CALIBRATE_PH_NONE
#define _fk_atlas_PhCalibrateCommand_MAX fk_atlas_PhCalibrateCommand_CALIBRATE_PH_HIGH
#define _fk_atlas_PhCalibrateCommand_ARRAYSIZE ((fk_atlas_PhCalibrateCommand)(fk_atlas_PhCalibrateCommand_CALIBRATE_PH_HIGH+1))

#define _fk_atlas_EcCalibrations_MIN fk_atlas_EcCalibrations_EC_NONE
#define _fk_atlas_EcCalibrations_MAX fk_atlas_EcCalibrations_EC_DUAL_HIGH
#define _fk_atlas_EcCalibrations_ARRAYSIZE ((fk_atlas_EcCalibrations)(fk_atlas_EcCalibrations_EC_DUAL_HIGH+1))

#define _fk_atlas_EcCalibrateCommand_MIN fk_atlas_EcCalibrateCommand_CALIBRATE_EC_NONE
#define _fk_atlas_EcCalibrateCommand_MAX fk_atlas_EcCalibrateCommand_CALIBRATE_EC_DUAL_HIGH
#define _fk_atlas_EcCalibrateCommand_ARRAYSIZE ((fk_atlas_EcCalibrateCommand)(fk_atlas_EcCalibrateCommand_CALIBRATE_EC_DUAL_HIGH+1))

#define _fk_atlas_OrpCalibrations_MIN fk_atlas_OrpCalibrations_ORP_NONE
#define _fk_atlas_OrpCalibrations_MAX fk_atlas_OrpCalibrations_ORP_SINGLE
#define _fk_atlas_OrpCalibrations_ARRAYSIZE ((fk_atlas_OrpCalibrations)(fk_atlas_OrpCalibrations_ORP_SINGLE+1))

#define _fk_atlas_OrpCalibrateCommand_MIN fk_atlas_OrpCalibrateCommand_CALIBRATE_ORP_NONE
#define _fk_atlas_OrpCalibrateCommand_MAX fk_atlas_OrpCalibrateCommand_CALIBRATE_ORP_SINGLE
#define _fk_atlas_OrpCalibrateCommand_ARRAYSIZE ((fk_atlas_OrpCalibrateCommand)(fk_atlas_OrpCalibrateCommand_CALIBRATE_ORP_SINGLE+1))

#define _fk_atlas_ReplyType_MIN fk_atlas_ReplyType_REPLY_NONE
#define _fk_atlas_ReplyType_MAX fk_atlas_ReplyType_REPLY_COMMAND
#define _fk_atlas_ReplyType_ARRAYSIZE ((fk_atlas_ReplyType)(fk_atlas_ReplyType_REPLY_COMMAND+1))

#define _fk_atlas_ErrorType_MIN fk_atlas_ErrorType_NONE
#define _fk_atlas_ErrorType_MAX fk_atlas_ErrorType_UNEXPECTED
#define _fk_atlas_ErrorType_ARRAYSIZE ((fk_atlas_ErrorType)(fk_atlas_ErrorType_UNEXPECTED+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define fk_atlas_AtlasCalibrationCommand_init_default {_fk_atlas_CalibrationOperation_MIN, _fk_atlas_TempCalibrations_MIN, _fk_atlas_DoCalibrations_MIN, _fk_atlas_PhCalibrations_MIN, _fk_atlas_EcCalibrations_MIN, _fk_atlas_OrpCalibrations_MIN, 0, 0, {{NULL}, NULL}}
#define fk_atlas_TwoWireQuery_init_default       {0, 0, {{NULL}, NULL}}
#define fk_atlas_Compensations_init_default      {0}
#define fk_atlas_WireAtlasQuery_init_default     {_fk_atlas_QueryType_MIN, false, fk_atlas_AtlasCalibrationCommand_init_default, false, fk_atlas_Compensations_init_default, false, fk_atlas_TwoWireQuery_init_default}
#define fk_atlas_AtlasCalibrationStatus_init_default {_fk_atlas_SensorType_MIN, 0, _fk_atlas_TempCalibrations_MIN, _fk_atlas_DoCalibrations_MIN, _fk_atlas_PhCalibrations_MIN, _fk_atlas_EcCalibrations_MIN, _fk_atlas_OrpCalibrations_MIN, 0, {{NULL}, NULL}}
#define fk_atlas_TwoWireReply_init_default       {{{NULL}, NULL}}
#define fk_atlas_Error_init_default              {_fk_atlas_ErrorType_MIN, {{NULL}, NULL}}
#define fk_atlas_WireAtlasReply_init_default     {_fk_atlas_ReplyType_MIN, {{NULL}, NULL}, false, fk_atlas_AtlasCalibrationStatus_init_default, false, fk_atlas_TwoWireReply_init_default}
#define fk_atlas_AtlasCalibrationCommand_init_zero {_fk_atlas_CalibrationOperation_MIN, _fk_atlas_TempCalibrations_MIN, _fk_atlas_DoCalibrations_MIN, _fk_atlas_PhCalibrations_MIN, _fk_atlas_EcCalibrations_MIN, _fk_atlas_OrpCalibrations_MIN, 0, 0, {{NULL}, NULL}}
#define fk_atlas_TwoWireQuery_init_zero          {0, 0, {{NULL}, NULL}}
#define fk_atlas_Compensations_init_zero         {0}
#define fk_atlas_WireAtlasQuery_init_zero        {_fk_atlas_QueryType_MIN, false, fk_atlas_AtlasCalibrationCommand_init_zero, false, fk_atlas_Compensations_init_zero, false, fk_atlas_TwoWireQuery_init_zero}
#define fk_atlas_AtlasCalibrationStatus_init_zero {_fk_atlas_SensorType_MIN, 0, _fk_atlas_TempCalibrations_MIN, _fk_atlas_DoCalibrations_MIN, _fk_atlas_PhCalibrations_MIN, _fk_atlas_EcCalibrations_MIN, _fk_atlas_OrpCalibrations_MIN, 0, {{NULL}, NULL}}
#define fk_atlas_TwoWireReply_init_zero          {{{NULL}, NULL}}
#define fk_atlas_Error_init_zero                 {_fk_atlas_ErrorType_MIN, {{NULL}, NULL}}
#define fk_atlas_WireAtlasReply_init_zero        {_fk_atlas_ReplyType_MIN, {{NULL}, NULL}, false, fk_atlas_AtlasCalibrationStatus_init_zero, false, fk_atlas_TwoWireReply_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define fk_atlas_TwoWireReply_data_tag           1
#define fk_atlas_AtlasCalibrationCommand_operation_tag 1
#define fk_atlas_AtlasCalibrationCommand_temp_tag 2
#define fk_atlas_AtlasCalibrationCommand_dissolvedOxygen_tag 3
#define fk_atlas_AtlasCalibrationCommand_ph_tag  4
#define fk_atlas_AtlasCalibrationCommand_ec_tag  5
#define fk_atlas_AtlasCalibrationCommand_orp_tag 6
#define fk_atlas_AtlasCalibrationCommand_value_tag 7
#define fk_atlas_AtlasCalibrationCommand_which_tag 8
#define fk_atlas_AtlasCalibrationCommand_configuration_tag 9
#define fk_atlas_AtlasCalibrationStatus_type_tag 1
#define fk_atlas_AtlasCalibrationStatus_time_tag 2
#define fk_atlas_AtlasCalibrationStatus_temp_tag 3
#define fk_atlas_AtlasCalibrationStatus_dissolvedOxygen_tag 4
#define fk_atlas_AtlasCalibrationStatus_ph_tag   5
#define fk_atlas_AtlasCalibrationStatus_ec_tag   6
#define fk_atlas_AtlasCalibrationStatus_orp_tag  7
#define fk_atlas_AtlasCalibrationStatus_raw_tag  8
#define fk_atlas_AtlasCalibrationStatus_configuration_tag 9
#define fk_atlas_Compensations_temperature_tag   1
#define fk_atlas_Error_type_tag                  1
#define fk_atlas_Error_message_tag               2
#define fk_atlas_TwoWireQuery_read_tag           1
#define fk_atlas_TwoWireQuery_write_tag          2
#define fk_atlas_TwoWireQuery_data_tag           3
#define fk_atlas_WireAtlasQuery_type_tag         1
#define fk_atlas_WireAtlasQuery_calibration_tag  2
#define fk_atlas_WireAtlasQuery_compensations_tag 3
#define fk_atlas_WireAtlasQuery_wire_tag         4
#define fk_atlas_WireAtlasReply_type_tag         1
#define fk_atlas_WireAtlasReply_errors_tag       2
#define fk_atlas_WireAtlasReply_calibration_tag  3
#define fk_atlas_WireAtlasReply_wire_tag         4

/* Struct field encoding specification for nanopb */
#define fk_atlas_AtlasCalibrationCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    operation,         1) \
X(a, STATIC,   SINGULAR, UENUM,    temp,              2) \
X(a, STATIC,   SINGULAR, UENUM,    dissolvedOxygen,   3) \
X(a, STATIC,   SINGULAR, UENUM,    ph,                4) \
X(a, STATIC,   SINGULAR, UENUM,    ec,                5) \
X(a, STATIC,   SINGULAR, UENUM,    orp,               6) \
X(a, STATIC,   SINGULAR, FLOAT,    value,             7) \
X(a, STATIC,   SINGULAR, UINT32,   which,             8) \
X(a, CALLBACK, SINGULAR, BYTES,    configuration,     9)
#define fk_atlas_AtlasCalibrationCommand_CALLBACK pb_default_field_callback
#define fk_atlas_AtlasCalibrationCommand_DEFAULT NULL

#define fk_atlas_TwoWireQuery_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   read,              1) \
X(a, STATIC,   SINGULAR, UINT32,   write,             2) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              3)
#define fk_atlas_TwoWireQuery_CALLBACK pb_default_field_callback
#define fk_atlas_TwoWireQuery_DEFAULT NULL

#define fk_atlas_Compensations_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       1)
#define fk_atlas_Compensations_CALLBACK NULL
#define fk_atlas_Compensations_DEFAULT NULL

#define fk_atlas_WireAtlasQuery_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  calibration,       2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  compensations,     3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  wire,              4)
#define fk_atlas_WireAtlasQuery_CALLBACK NULL
#define fk_atlas_WireAtlasQuery_DEFAULT NULL
#define fk_atlas_WireAtlasQuery_calibration_MSGTYPE fk_atlas_AtlasCalibrationCommand
#define fk_atlas_WireAtlasQuery_compensations_MSGTYPE fk_atlas_Compensations
#define fk_atlas_WireAtlasQuery_wire_MSGTYPE fk_atlas_TwoWireQuery

#define fk_atlas_AtlasCalibrationStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   SINGULAR, UINT32,   time,              2) \
X(a, STATIC,   SINGULAR, UENUM,    temp,              3) \
X(a, STATIC,   SINGULAR, UENUM,    dissolvedOxygen,   4) \
X(a, STATIC,   SINGULAR, UENUM,    ph,                5) \
X(a, STATIC,   SINGULAR, UENUM,    ec,                6) \
X(a, STATIC,   SINGULAR, UENUM,    orp,               7) \
X(a, STATIC,   SINGULAR, UINT32,   raw,               8) \
X(a, CALLBACK, SINGULAR, BYTES,    configuration,     9)
#define fk_atlas_AtlasCalibrationStatus_CALLBACK pb_default_field_callback
#define fk_atlas_AtlasCalibrationStatus_DEFAULT NULL

#define fk_atlas_TwoWireReply_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              1)
#define fk_atlas_TwoWireReply_CALLBACK pb_default_field_callback
#define fk_atlas_TwoWireReply_DEFAULT NULL

#define fk_atlas_Error_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, CALLBACK, SINGULAR, STRING,   message,           2)
#define fk_atlas_Error_CALLBACK pb_default_field_callback
#define fk_atlas_Error_DEFAULT NULL

#define fk_atlas_WireAtlasReply_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, CALLBACK, REPEATED, MESSAGE,  errors,            2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  calibration,       3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  wire,              4)
#define fk_atlas_WireAtlasReply_CALLBACK pb_default_field_callback
#define fk_atlas_WireAtlasReply_DEFAULT NULL
#define fk_atlas_WireAtlasReply_errors_MSGTYPE fk_atlas_Error
#define fk_atlas_WireAtlasReply_calibration_MSGTYPE fk_atlas_AtlasCalibrationStatus
#define fk_atlas_WireAtlasReply_wire_MSGTYPE fk_atlas_TwoWireReply

extern const pb_msgdesc_t fk_atlas_AtlasCalibrationCommand_msg;
extern const pb_msgdesc_t fk_atlas_TwoWireQuery_msg;
extern const pb_msgdesc_t fk_atlas_Compensations_msg;
extern const pb_msgdesc_t fk_atlas_WireAtlasQuery_msg;
extern const pb_msgdesc_t fk_atlas_AtlasCalibrationStatus_msg;
extern const pb_msgdesc_t fk_atlas_TwoWireReply_msg;
extern const pb_msgdesc_t fk_atlas_Error_msg;
extern const pb_msgdesc_t fk_atlas_WireAtlasReply_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define fk_atlas_AtlasCalibrationCommand_fields &fk_atlas_AtlasCalibrationCommand_msg
#define fk_atlas_TwoWireQuery_fields &fk_atlas_TwoWireQuery_msg
#define fk_atlas_Compensations_fields &fk_atlas_Compensations_msg
#define fk_atlas_WireAtlasQuery_fields &fk_atlas_WireAtlasQuery_msg
#define fk_atlas_AtlasCalibrationStatus_fields &fk_atlas_AtlasCalibrationStatus_msg
#define fk_atlas_TwoWireReply_fields &fk_atlas_TwoWireReply_msg
#define fk_atlas_Error_fields &fk_atlas_Error_msg
#define fk_atlas_WireAtlasReply_fields &fk_atlas_WireAtlasReply_msg

/* Maximum encoded size of messages (where known) */
/* fk_atlas_AtlasCalibrationCommand_size depends on runtime parameters */
/* fk_atlas_TwoWireQuery_size depends on runtime parameters */
#define fk_atlas_Compensations_size              5
/* fk_atlas_WireAtlasQuery_size depends on runtime parameters */
/* fk_atlas_AtlasCalibrationStatus_size depends on runtime parameters */
/* fk_atlas_TwoWireReply_size depends on runtime parameters */
/* fk_atlas_Error_size depends on runtime parameters */
/* fk_atlas_WireAtlasReply_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
