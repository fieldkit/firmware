// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.2
// source: fk-atlas.proto

package fk_atlas

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SensorType int32

const (
	SensorType_SENSOR_NONE SensorType = 0
	SensorType_SENSOR_PH   SensorType = 1
	SensorType_SENSOR_TEMP SensorType = 2
	SensorType_SENSOR_ORP  SensorType = 3
	SensorType_SENSOR_DO   SensorType = 4
	SensorType_SENSOR_EC   SensorType = 5
)

// Enum value maps for SensorType.
var (
	SensorType_name = map[int32]string{
		0: "SENSOR_NONE",
		1: "SENSOR_PH",
		2: "SENSOR_TEMP",
		3: "SENSOR_ORP",
		4: "SENSOR_DO",
		5: "SENSOR_EC",
	}
	SensorType_value = map[string]int32{
		"SENSOR_NONE": 0,
		"SENSOR_PH":   1,
		"SENSOR_TEMP": 2,
		"SENSOR_ORP":  3,
		"SENSOR_DO":   4,
		"SENSOR_EC":   5,
	}
)

func (x SensorType) Enum() *SensorType {
	p := new(SensorType)
	*p = x
	return p
}

func (x SensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[0].Descriptor()
}

func (SensorType) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[0]
}

func (x SensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorType.Descriptor instead.
func (SensorType) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{0}
}

type QueryType int32

const (
	QueryType_QUERY_NONE QueryType = 0
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "QUERY_NONE",
	}
	QueryType_value = map[string]int32{
		"QUERY_NONE": 0,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[1].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[1]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{1}
}

type CalibrationOperation int32

const (
	CalibrationOperation_CALIBRATION_NONE   CalibrationOperation = 0
	CalibrationOperation_CALIBRATION_STATUS CalibrationOperation = 1
	CalibrationOperation_CALIBRATION_CLEAR  CalibrationOperation = 2
	CalibrationOperation_CALIBRATION_SET    CalibrationOperation = 3
)

// Enum value maps for CalibrationOperation.
var (
	CalibrationOperation_name = map[int32]string{
		0: "CALIBRATION_NONE",
		1: "CALIBRATION_STATUS",
		2: "CALIBRATION_CLEAR",
		3: "CALIBRATION_SET",
	}
	CalibrationOperation_value = map[string]int32{
		"CALIBRATION_NONE":   0,
		"CALIBRATION_STATUS": 1,
		"CALIBRATION_CLEAR":  2,
		"CALIBRATION_SET":    3,
	}
)

func (x CalibrationOperation) Enum() *CalibrationOperation {
	p := new(CalibrationOperation)
	*p = x
	return p
}

func (x CalibrationOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalibrationOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[2].Descriptor()
}

func (CalibrationOperation) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[2]
}

func (x CalibrationOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalibrationOperation.Descriptor instead.
func (CalibrationOperation) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{2}
}

type TempCalibrations int32

const (
	TempCalibrations_TEMP_NONE   TempCalibrations = 0
	TempCalibrations_TEMP_SINGLE TempCalibrations = 1
)

// Enum value maps for TempCalibrations.
var (
	TempCalibrations_name = map[int32]string{
		0: "TEMP_NONE",
		1: "TEMP_SINGLE",
	}
	TempCalibrations_value = map[string]int32{
		"TEMP_NONE":   0,
		"TEMP_SINGLE": 1,
	}
)

func (x TempCalibrations) Enum() *TempCalibrations {
	p := new(TempCalibrations)
	*p = x
	return p
}

func (x TempCalibrations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TempCalibrations) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[3].Descriptor()
}

func (TempCalibrations) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[3]
}

func (x TempCalibrations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TempCalibrations.Descriptor instead.
func (TempCalibrations) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{3}
}

type TempCalibrateCommand int32

const (
	TempCalibrateCommand_CALIBRATE_TEMP_NONE   TempCalibrateCommand = 0
	TempCalibrateCommand_CALIBRATE_TEMP_CLEAR  TempCalibrateCommand = 1
	TempCalibrateCommand_CALIBRATE_TEMP_SINGLE TempCalibrateCommand = 2
)

// Enum value maps for TempCalibrateCommand.
var (
	TempCalibrateCommand_name = map[int32]string{
		0: "CALIBRATE_TEMP_NONE",
		1: "CALIBRATE_TEMP_CLEAR",
		2: "CALIBRATE_TEMP_SINGLE",
	}
	TempCalibrateCommand_value = map[string]int32{
		"CALIBRATE_TEMP_NONE":   0,
		"CALIBRATE_TEMP_CLEAR":  1,
		"CALIBRATE_TEMP_SINGLE": 2,
	}
)

func (x TempCalibrateCommand) Enum() *TempCalibrateCommand {
	p := new(TempCalibrateCommand)
	*p = x
	return p
}

func (x TempCalibrateCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TempCalibrateCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[4].Descriptor()
}

func (TempCalibrateCommand) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[4]
}

func (x TempCalibrateCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TempCalibrateCommand.Descriptor instead.
func (TempCalibrateCommand) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{4}
}

type DoCalibrations int32

const (
	DoCalibrations_DO_NONE       DoCalibrations = 0
	DoCalibrations_DO_ATMOSPHERE DoCalibrations = 1
	DoCalibrations_DO_ZERO       DoCalibrations = 2
)

// Enum value maps for DoCalibrations.
var (
	DoCalibrations_name = map[int32]string{
		0: "DO_NONE",
		1: "DO_ATMOSPHERE",
		2: "DO_ZERO",
	}
	DoCalibrations_value = map[string]int32{
		"DO_NONE":       0,
		"DO_ATMOSPHERE": 1,
		"DO_ZERO":       2,
	}
)

func (x DoCalibrations) Enum() *DoCalibrations {
	p := new(DoCalibrations)
	*p = x
	return p
}

func (x DoCalibrations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoCalibrations) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[5].Descriptor()
}

func (DoCalibrations) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[5]
}

func (x DoCalibrations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoCalibrations.Descriptor instead.
func (DoCalibrations) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{5}
}

type DoCalibrateCommand int32

const (
	DoCalibrateCommand_CALIBRATE_DO_NONE       DoCalibrateCommand = 0
	DoCalibrateCommand_CALIBRATE_DO_CLEAR      DoCalibrateCommand = 1
	DoCalibrateCommand_CALIBRATE_DO_ATMOSPHERE DoCalibrateCommand = 2
	DoCalibrateCommand_CALIBRATE_DO_ZERO       DoCalibrateCommand = 3
)

// Enum value maps for DoCalibrateCommand.
var (
	DoCalibrateCommand_name = map[int32]string{
		0: "CALIBRATE_DO_NONE",
		1: "CALIBRATE_DO_CLEAR",
		2: "CALIBRATE_DO_ATMOSPHERE",
		3: "CALIBRATE_DO_ZERO",
	}
	DoCalibrateCommand_value = map[string]int32{
		"CALIBRATE_DO_NONE":       0,
		"CALIBRATE_DO_CLEAR":      1,
		"CALIBRATE_DO_ATMOSPHERE": 2,
		"CALIBRATE_DO_ZERO":       3,
	}
)

func (x DoCalibrateCommand) Enum() *DoCalibrateCommand {
	p := new(DoCalibrateCommand)
	*p = x
	return p
}

func (x DoCalibrateCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoCalibrateCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[6].Descriptor()
}

func (DoCalibrateCommand) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[6]
}

func (x DoCalibrateCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoCalibrateCommand.Descriptor instead.
func (DoCalibrateCommand) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{6}
}

type PhCalibrations int32

const (
	PhCalibrations_PH_NONE   PhCalibrations = 0
	PhCalibrations_PH_LOW    PhCalibrations = 1
	PhCalibrations_PH_MIDDLE PhCalibrations = 2
	PhCalibrations_PH_HIGH   PhCalibrations = 4
)

// Enum value maps for PhCalibrations.
var (
	PhCalibrations_name = map[int32]string{
		0: "PH_NONE",
		1: "PH_LOW",
		2: "PH_MIDDLE",
		4: "PH_HIGH",
	}
	PhCalibrations_value = map[string]int32{
		"PH_NONE":   0,
		"PH_LOW":    1,
		"PH_MIDDLE": 2,
		"PH_HIGH":   4,
	}
)

func (x PhCalibrations) Enum() *PhCalibrations {
	p := new(PhCalibrations)
	*p = x
	return p
}

func (x PhCalibrations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhCalibrations) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[7].Descriptor()
}

func (PhCalibrations) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[7]
}

func (x PhCalibrations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhCalibrations.Descriptor instead.
func (PhCalibrations) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{7}
}

type PhCalibrateCommand int32

const (
	PhCalibrateCommand_CALIBRATE_PH_NONE   PhCalibrateCommand = 0
	PhCalibrateCommand_CALIBRATE_PH_CLEAR  PhCalibrateCommand = 1
	PhCalibrateCommand_CALIBRATE_PH_LOW    PhCalibrateCommand = 2
	PhCalibrateCommand_CALIBRATE_PH_MIDDLE PhCalibrateCommand = 3
	PhCalibrateCommand_CALIBRATE_PH_HIGH   PhCalibrateCommand = 4
)

// Enum value maps for PhCalibrateCommand.
var (
	PhCalibrateCommand_name = map[int32]string{
		0: "CALIBRATE_PH_NONE",
		1: "CALIBRATE_PH_CLEAR",
		2: "CALIBRATE_PH_LOW",
		3: "CALIBRATE_PH_MIDDLE",
		4: "CALIBRATE_PH_HIGH",
	}
	PhCalibrateCommand_value = map[string]int32{
		"CALIBRATE_PH_NONE":   0,
		"CALIBRATE_PH_CLEAR":  1,
		"CALIBRATE_PH_LOW":    2,
		"CALIBRATE_PH_MIDDLE": 3,
		"CALIBRATE_PH_HIGH":   4,
	}
)

func (x PhCalibrateCommand) Enum() *PhCalibrateCommand {
	p := new(PhCalibrateCommand)
	*p = x
	return p
}

func (x PhCalibrateCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhCalibrateCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[8].Descriptor()
}

func (PhCalibrateCommand) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[8]
}

func (x PhCalibrateCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhCalibrateCommand.Descriptor instead.
func (PhCalibrateCommand) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{8}
}

type EcCalibrations int32

const (
	EcCalibrations_EC_NONE      EcCalibrations = 0
	EcCalibrations_EC_DRY       EcCalibrations = 1
	EcCalibrations_EC_SINGLE    EcCalibrations = 2
	EcCalibrations_EC_DUAL_LOW  EcCalibrations = 4
	EcCalibrations_EC_DUAL_HIGH EcCalibrations = 8
)

// Enum value maps for EcCalibrations.
var (
	EcCalibrations_name = map[int32]string{
		0: "EC_NONE",
		1: "EC_DRY",
		2: "EC_SINGLE",
		4: "EC_DUAL_LOW",
		8: "EC_DUAL_HIGH",
	}
	EcCalibrations_value = map[string]int32{
		"EC_NONE":      0,
		"EC_DRY":       1,
		"EC_SINGLE":    2,
		"EC_DUAL_LOW":  4,
		"EC_DUAL_HIGH": 8,
	}
)

func (x EcCalibrations) Enum() *EcCalibrations {
	p := new(EcCalibrations)
	*p = x
	return p
}

func (x EcCalibrations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcCalibrations) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[9].Descriptor()
}

func (EcCalibrations) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[9]
}

func (x EcCalibrations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcCalibrations.Descriptor instead.
func (EcCalibrations) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{9}
}

type EcCalibrateCommand int32

const (
	EcCalibrateCommand_CALIBRATE_EC_NONE      EcCalibrateCommand = 0
	EcCalibrateCommand_CALIBRATE_EC_CLEAR     EcCalibrateCommand = 1
	EcCalibrateCommand_CALIBRATE_EC_DRY       EcCalibrateCommand = 2
	EcCalibrateCommand_CALIBRATE_EC_SINGLE    EcCalibrateCommand = 3
	EcCalibrateCommand_CALIBRATE_EC_DUAL_LOW  EcCalibrateCommand = 4
	EcCalibrateCommand_CALIBRATE_EC_DUAL_HIGH EcCalibrateCommand = 5
)

// Enum value maps for EcCalibrateCommand.
var (
	EcCalibrateCommand_name = map[int32]string{
		0: "CALIBRATE_EC_NONE",
		1: "CALIBRATE_EC_CLEAR",
		2: "CALIBRATE_EC_DRY",
		3: "CALIBRATE_EC_SINGLE",
		4: "CALIBRATE_EC_DUAL_LOW",
		5: "CALIBRATE_EC_DUAL_HIGH",
	}
	EcCalibrateCommand_value = map[string]int32{
		"CALIBRATE_EC_NONE":      0,
		"CALIBRATE_EC_CLEAR":     1,
		"CALIBRATE_EC_DRY":       2,
		"CALIBRATE_EC_SINGLE":    3,
		"CALIBRATE_EC_DUAL_LOW":  4,
		"CALIBRATE_EC_DUAL_HIGH": 5,
	}
)

func (x EcCalibrateCommand) Enum() *EcCalibrateCommand {
	p := new(EcCalibrateCommand)
	*p = x
	return p
}

func (x EcCalibrateCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcCalibrateCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[10].Descriptor()
}

func (EcCalibrateCommand) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[10]
}

func (x EcCalibrateCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcCalibrateCommand.Descriptor instead.
func (EcCalibrateCommand) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{10}
}

type OrpCalibrations int32

const (
	OrpCalibrations_ORP_NONE   OrpCalibrations = 0
	OrpCalibrations_ORP_SINGLE OrpCalibrations = 1
)

// Enum value maps for OrpCalibrations.
var (
	OrpCalibrations_name = map[int32]string{
		0: "ORP_NONE",
		1: "ORP_SINGLE",
	}
	OrpCalibrations_value = map[string]int32{
		"ORP_NONE":   0,
		"ORP_SINGLE": 1,
	}
)

func (x OrpCalibrations) Enum() *OrpCalibrations {
	p := new(OrpCalibrations)
	*p = x
	return p
}

func (x OrpCalibrations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrpCalibrations) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[11].Descriptor()
}

func (OrpCalibrations) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[11]
}

func (x OrpCalibrations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrpCalibrations.Descriptor instead.
func (OrpCalibrations) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{11}
}

type OrpCalibrateCommand int32

const (
	OrpCalibrateCommand_CALIBRATE_ORP_NONE   OrpCalibrateCommand = 0
	OrpCalibrateCommand_CALIBRATE_ORP_SINGLE OrpCalibrateCommand = 1
)

// Enum value maps for OrpCalibrateCommand.
var (
	OrpCalibrateCommand_name = map[int32]string{
		0: "CALIBRATE_ORP_NONE",
		1: "CALIBRATE_ORP_SINGLE",
	}
	OrpCalibrateCommand_value = map[string]int32{
		"CALIBRATE_ORP_NONE":   0,
		"CALIBRATE_ORP_SINGLE": 1,
	}
)

func (x OrpCalibrateCommand) Enum() *OrpCalibrateCommand {
	p := new(OrpCalibrateCommand)
	*p = x
	return p
}

func (x OrpCalibrateCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrpCalibrateCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[12].Descriptor()
}

func (OrpCalibrateCommand) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[12]
}

func (x OrpCalibrateCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrpCalibrateCommand.Descriptor instead.
func (OrpCalibrateCommand) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{12}
}

type ReplyType int32

const (
	ReplyType_REPLY_NONE    ReplyType = 0
	ReplyType_REPLY_RETRY   ReplyType = 1
	ReplyType_REPLY_ERROR   ReplyType = 2
	ReplyType_REPLY_STATUS  ReplyType = 3
	ReplyType_REPLY_COMMAND ReplyType = 4
)

// Enum value maps for ReplyType.
var (
	ReplyType_name = map[int32]string{
		0: "REPLY_NONE",
		1: "REPLY_RETRY",
		2: "REPLY_ERROR",
		3: "REPLY_STATUS",
		4: "REPLY_COMMAND",
	}
	ReplyType_value = map[string]int32{
		"REPLY_NONE":    0,
		"REPLY_RETRY":   1,
		"REPLY_ERROR":   2,
		"REPLY_STATUS":  3,
		"REPLY_COMMAND": 4,
	}
)

func (x ReplyType) Enum() *ReplyType {
	p := new(ReplyType)
	*p = x
	return p
}

func (x ReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[13].Descriptor()
}

func (ReplyType) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[13]
}

func (x ReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplyType.Descriptor instead.
func (ReplyType) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{13}
}

type ErrorType int32

const (
	ErrorType_NONE       ErrorType = 0
	ErrorType_GENERAL    ErrorType = 1
	ErrorType_UNEXPECTED ErrorType = 2
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "NONE",
		1: "GENERAL",
		2: "UNEXPECTED",
	}
	ErrorType_value = map[string]int32{
		"NONE":       0,
		"GENERAL":    1,
		"UNEXPECTED": 2,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_atlas_proto_enumTypes[14].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_fk_atlas_proto_enumTypes[14]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{14}
}

type AtlasCalibrationCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation       CalibrationOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=fk_atlas.CalibrationOperation" json:"operation,omitempty"`
	Temp            TempCalibrations     `protobuf:"varint,2,opt,name=temp,proto3,enum=fk_atlas.TempCalibrations" json:"temp,omitempty"`
	DissolvedOxygen DoCalibrations       `protobuf:"varint,3,opt,name=dissolvedOxygen,proto3,enum=fk_atlas.DoCalibrations" json:"dissolvedOxygen,omitempty"`
	Ph              PhCalibrations       `protobuf:"varint,4,opt,name=ph,proto3,enum=fk_atlas.PhCalibrations" json:"ph,omitempty"`
	Ec              EcCalibrations       `protobuf:"varint,5,opt,name=ec,proto3,enum=fk_atlas.EcCalibrations" json:"ec,omitempty"`
	Orp             OrpCalibrations      `protobuf:"varint,6,opt,name=orp,proto3,enum=fk_atlas.OrpCalibrations" json:"orp,omitempty"`
	Which           uint32               `protobuf:"varint,8,opt,name=which,proto3" json:"which,omitempty"`
	Value           float32              `protobuf:"fixed32,7,opt,name=value,proto3" json:"value,omitempty"`
	Configuration   []byte               `protobuf:"bytes,9,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *AtlasCalibrationCommand) Reset() {
	*x = AtlasCalibrationCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_atlas_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtlasCalibrationCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtlasCalibrationCommand) ProtoMessage() {}

func (x *AtlasCalibrationCommand) ProtoReflect() protoreflect.Message {
	mi := &file_fk_atlas_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtlasCalibrationCommand.ProtoReflect.Descriptor instead.
func (*AtlasCalibrationCommand) Descriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{0}
}

func (x *AtlasCalibrationCommand) GetOperation() CalibrationOperation {
	if x != nil {
		return x.Operation
	}
	return CalibrationOperation_CALIBRATION_NONE
}

func (x *AtlasCalibrationCommand) GetTemp() TempCalibrations {
	if x != nil {
		return x.Temp
	}
	return TempCalibrations_TEMP_NONE
}

func (x *AtlasCalibrationCommand) GetDissolvedOxygen() DoCalibrations {
	if x != nil {
		return x.DissolvedOxygen
	}
	return DoCalibrations_DO_NONE
}

func (x *AtlasCalibrationCommand) GetPh() PhCalibrations {
	if x != nil {
		return x.Ph
	}
	return PhCalibrations_PH_NONE
}

func (x *AtlasCalibrationCommand) GetEc() EcCalibrations {
	if x != nil {
		return x.Ec
	}
	return EcCalibrations_EC_NONE
}

func (x *AtlasCalibrationCommand) GetOrp() OrpCalibrations {
	if x != nil {
		return x.Orp
	}
	return OrpCalibrations_ORP_NONE
}

func (x *AtlasCalibrationCommand) GetWhich() uint32 {
	if x != nil {
		return x.Which
	}
	return 0
}

func (x *AtlasCalibrationCommand) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AtlasCalibrationCommand) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type TwoWireQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Read  uint32 `protobuf:"varint,1,opt,name=read,proto3" json:"read,omitempty"`
	Write uint32 `protobuf:"varint,2,opt,name=write,proto3" json:"write,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TwoWireQuery) Reset() {
	*x = TwoWireQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_atlas_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoWireQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoWireQuery) ProtoMessage() {}

func (x *TwoWireQuery) ProtoReflect() protoreflect.Message {
	mi := &file_fk_atlas_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoWireQuery.ProtoReflect.Descriptor instead.
func (*TwoWireQuery) Descriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{1}
}

func (x *TwoWireQuery) GetRead() uint32 {
	if x != nil {
		return x.Read
	}
	return 0
}

func (x *TwoWireQuery) GetWrite() uint32 {
	if x != nil {
		return x.Write
	}
	return 0
}

func (x *TwoWireQuery) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Compensations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature float32 `protobuf:"fixed32,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *Compensations) Reset() {
	*x = Compensations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_atlas_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compensations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compensations) ProtoMessage() {}

func (x *Compensations) ProtoReflect() protoreflect.Message {
	mi := &file_fk_atlas_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compensations.ProtoReflect.Descriptor instead.
func (*Compensations) Descriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{2}
}

func (x *Compensations) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type WireAtlasQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          QueryType                `protobuf:"varint,1,opt,name=type,proto3,enum=fk_atlas.QueryType" json:"type,omitempty"`
	Calibration   *AtlasCalibrationCommand `protobuf:"bytes,2,opt,name=calibration,proto3" json:"calibration,omitempty"`
	Compensations *Compensations           `protobuf:"bytes,3,opt,name=compensations,proto3" json:"compensations,omitempty"`
	Wire          *TwoWireQuery            `protobuf:"bytes,4,opt,name=wire,proto3" json:"wire,omitempty"`
}

func (x *WireAtlasQuery) Reset() {
	*x = WireAtlasQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_atlas_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireAtlasQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireAtlasQuery) ProtoMessage() {}

func (x *WireAtlasQuery) ProtoReflect() protoreflect.Message {
	mi := &file_fk_atlas_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireAtlasQuery.ProtoReflect.Descriptor instead.
func (*WireAtlasQuery) Descriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{3}
}

func (x *WireAtlasQuery) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_QUERY_NONE
}

func (x *WireAtlasQuery) GetCalibration() *AtlasCalibrationCommand {
	if x != nil {
		return x.Calibration
	}
	return nil
}

func (x *WireAtlasQuery) GetCompensations() *Compensations {
	if x != nil {
		return x.Compensations
	}
	return nil
}

func (x *WireAtlasQuery) GetWire() *TwoWireQuery {
	if x != nil {
		return x.Wire
	}
	return nil
}

type AtlasCalibrationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            SensorType       `protobuf:"varint,1,opt,name=type,proto3,enum=fk_atlas.SensorType" json:"type,omitempty"`
	Time            uint32           `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Raw             uint32           `protobuf:"varint,8,opt,name=raw,proto3" json:"raw,omitempty"`
	Temp            TempCalibrations `protobuf:"varint,3,opt,name=temp,proto3,enum=fk_atlas.TempCalibrations" json:"temp,omitempty"`
	DissolvedOxygen DoCalibrations   `protobuf:"varint,4,opt,name=dissolvedOxygen,proto3,enum=fk_atlas.DoCalibrations" json:"dissolvedOxygen,omitempty"`
	Ph              PhCalibrations   `protobuf:"varint,5,opt,name=ph,proto3,enum=fk_atlas.PhCalibrations" json:"ph,omitempty"`
	Ec              EcCalibrations   `protobuf:"varint,6,opt,name=ec,proto3,enum=fk_atlas.EcCalibrations" json:"ec,omitempty"`
	Orp             OrpCalibrations  `protobuf:"varint,7,opt,name=orp,proto3,enum=fk_atlas.OrpCalibrations" json:"orp,omitempty"`
	Configuration   []byte           `protobuf:"bytes,9,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *AtlasCalibrationStatus) Reset() {
	*x = AtlasCalibrationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_atlas_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtlasCalibrationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtlasCalibrationStatus) ProtoMessage() {}

func (x *AtlasCalibrationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fk_atlas_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtlasCalibrationStatus.ProtoReflect.Descriptor instead.
func (*AtlasCalibrationStatus) Descriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{4}
}

func (x *AtlasCalibrationStatus) GetType() SensorType {
	if x != nil {
		return x.Type
	}
	return SensorType_SENSOR_NONE
}

func (x *AtlasCalibrationStatus) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AtlasCalibrationStatus) GetRaw() uint32 {
	if x != nil {
		return x.Raw
	}
	return 0
}

func (x *AtlasCalibrationStatus) GetTemp() TempCalibrations {
	if x != nil {
		return x.Temp
	}
	return TempCalibrations_TEMP_NONE
}

func (x *AtlasCalibrationStatus) GetDissolvedOxygen() DoCalibrations {
	if x != nil {
		return x.DissolvedOxygen
	}
	return DoCalibrations_DO_NONE
}

func (x *AtlasCalibrationStatus) GetPh() PhCalibrations {
	if x != nil {
		return x.Ph
	}
	return PhCalibrations_PH_NONE
}

func (x *AtlasCalibrationStatus) GetEc() EcCalibrations {
	if x != nil {
		return x.Ec
	}
	return EcCalibrations_EC_NONE
}

func (x *AtlasCalibrationStatus) GetOrp() OrpCalibrations {
	if x != nil {
		return x.Orp
	}
	return OrpCalibrations_ORP_NONE
}

func (x *AtlasCalibrationStatus) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type TwoWireReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TwoWireReply) Reset() {
	*x = TwoWireReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_atlas_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoWireReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoWireReply) ProtoMessage() {}

func (x *TwoWireReply) ProtoReflect() protoreflect.Message {
	mi := &file_fk_atlas_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoWireReply.ProtoReflect.Descriptor instead.
func (*TwoWireReply) Descriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{5}
}

func (x *TwoWireReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=fk_atlas.ErrorType" json:"type,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_atlas_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_fk_atlas_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetType() ErrorType {
	if x != nil {
		return x.Type
	}
	return ErrorType_NONE
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WireAtlasReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ReplyType               `protobuf:"varint,1,opt,name=type,proto3,enum=fk_atlas.ReplyType" json:"type,omitempty"`
	Errors      []*Error                `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Calibration *AtlasCalibrationStatus `protobuf:"bytes,3,opt,name=calibration,proto3" json:"calibration,omitempty"`
	Wire        *TwoWireReply           `protobuf:"bytes,4,opt,name=wire,proto3" json:"wire,omitempty"`
}

func (x *WireAtlasReply) Reset() {
	*x = WireAtlasReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_atlas_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireAtlasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireAtlasReply) ProtoMessage() {}

func (x *WireAtlasReply) ProtoReflect() protoreflect.Message {
	mi := &file_fk_atlas_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireAtlasReply.ProtoReflect.Descriptor instead.
func (*WireAtlasReply) Descriptor() ([]byte, []int) {
	return file_fk_atlas_proto_rawDescGZIP(), []int{7}
}

func (x *WireAtlasReply) GetType() ReplyType {
	if x != nil {
		return x.Type
	}
	return ReplyType_REPLY_NONE
}

func (x *WireAtlasReply) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *WireAtlasReply) GetCalibration() *AtlasCalibrationStatus {
	if x != nil {
		return x.Calibration
	}
	return nil
}

func (x *WireAtlasReply) GetWire() *TwoWireReply {
	if x != nil {
		return x.Wire
	}
	return nil
}

var File_fk_atlas_proto protoreflect.FileDescriptor

var file_fk_atlas_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x6b, 0x2d, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x17, 0x41,
	0x74, 0x6c, 0x61, 0x73, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x6b, 0x5f, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04,
	0x74, 0x65, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x6f, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x02, 0x70, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x50, 0x68, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x02,
	0x70, 0x68, 0x12, 0x28, 0x0a, 0x02, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x45, 0x63, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x02, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x03,
	0x6f, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6b, 0x5f, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4f, 0x72, 0x70, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x6f, 0x72, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x68, 0x69, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x0c, 0x54,
	0x77, 0x6f, 0x57, 0x69, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe9, 0x01, 0x0a,
	0x0e, 0x57, 0x69, 0x72, 0x65, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x0b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x04,
	0x77, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6b, 0x5f,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x77, 0x6f, 0x57, 0x69, 0x72, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x04, 0x77, 0x69, 0x72, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x16, 0x41, 0x74, 0x6c,
	0x61, 0x73, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x72, 0x61, 0x77, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x74,
	0x65, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66,
	0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x6f, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x02, 0x70, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50,
	0x68, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x02, 0x70,
	0x68, 0x12, 0x28, 0x0a, 0x02, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x45, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x02, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x03, 0x6f,
	0x72, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x4f, 0x72, 0x70, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x03, 0x6f, 0x72, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22,
	0x0a, 0x0c, 0x54, 0x77, 0x6f, 0x57, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x4a, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x6b, 0x5f, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd2,
	0x01, 0x0a, 0x0e, 0x57, 0x69, 0x72, 0x65, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6b, 0x5f,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x77, 0x69, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x54, 0x77, 0x6f, 0x57, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x77,
	0x69, 0x72, 0x65, 0x2a, 0x6b, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x50, 0x48, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x4d, 0x50,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x50,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x45, 0x43, 0x10, 0x05,
	0x2a, 0x1b, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x2a, 0x70, 0x0a,
	0x14, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41,
	0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x03, 0x2a,
	0x32, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x10, 0x01, 0x2a, 0x64, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x0e, 0x44, 0x6f, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x4f, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x5f, 0x41,
	0x54, 0x4d, 0x4f, 0x53, 0x50, 0x48, 0x45, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x02, 0x2a, 0x77, 0x0a, 0x12, 0x44, 0x6f, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x41, 0x54,
	0x4d, 0x4f, 0x53, 0x50, 0x48, 0x45, 0x52, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41,
	0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10,
	0x03, 0x2a, 0x45, 0x0a, 0x0e, 0x50, 0x68, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x48, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x48, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x48, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x2a, 0x89, 0x01, 0x0a, 0x12, 0x50, 0x68, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x48, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x48, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x48, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x48, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x48, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x04, 0x2a, 0x5b, 0x0a, 0x0e, 0x45, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x43, 0x5f, 0x44, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x43, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x43, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x43, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x08, 0x2a, 0xa9, 0x01, 0x0a, 0x12, 0x45, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x5f,
	0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4c, 0x49, 0x42,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x5f, 0x44, 0x52, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x5f, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x43, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x05, 0x2a, 0x2f, 0x0a,
	0x0f, 0x4f, 0x72, 0x70, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x52, 0x50, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0x47,
	0x0a, 0x13, 0x4f, 0x72, 0x70, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x52, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x50, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0x62, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45,
	0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0x32, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42,
	0x22, 0x0a, 0x20, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x66,
	0x79, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fk_atlas_proto_rawDescOnce sync.Once
	file_fk_atlas_proto_rawDescData = file_fk_atlas_proto_rawDesc
)

func file_fk_atlas_proto_rawDescGZIP() []byte {
	file_fk_atlas_proto_rawDescOnce.Do(func() {
		file_fk_atlas_proto_rawDescData = protoimpl.X.CompressGZIP(file_fk_atlas_proto_rawDescData)
	})
	return file_fk_atlas_proto_rawDescData
}

var file_fk_atlas_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_fk_atlas_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_fk_atlas_proto_goTypes = []interface{}{
	(SensorType)(0),                 // 0: fk_atlas.SensorType
	(QueryType)(0),                  // 1: fk_atlas.QueryType
	(CalibrationOperation)(0),       // 2: fk_atlas.CalibrationOperation
	(TempCalibrations)(0),           // 3: fk_atlas.TempCalibrations
	(TempCalibrateCommand)(0),       // 4: fk_atlas.TempCalibrateCommand
	(DoCalibrations)(0),             // 5: fk_atlas.DoCalibrations
	(DoCalibrateCommand)(0),         // 6: fk_atlas.DoCalibrateCommand
	(PhCalibrations)(0),             // 7: fk_atlas.PhCalibrations
	(PhCalibrateCommand)(0),         // 8: fk_atlas.PhCalibrateCommand
	(EcCalibrations)(0),             // 9: fk_atlas.EcCalibrations
	(EcCalibrateCommand)(0),         // 10: fk_atlas.EcCalibrateCommand
	(OrpCalibrations)(0),            // 11: fk_atlas.OrpCalibrations
	(OrpCalibrateCommand)(0),        // 12: fk_atlas.OrpCalibrateCommand
	(ReplyType)(0),                  // 13: fk_atlas.ReplyType
	(ErrorType)(0),                  // 14: fk_atlas.ErrorType
	(*AtlasCalibrationCommand)(nil), // 15: fk_atlas.AtlasCalibrationCommand
	(*TwoWireQuery)(nil),            // 16: fk_atlas.TwoWireQuery
	(*Compensations)(nil),           // 17: fk_atlas.Compensations
	(*WireAtlasQuery)(nil),          // 18: fk_atlas.WireAtlasQuery
	(*AtlasCalibrationStatus)(nil),  // 19: fk_atlas.AtlasCalibrationStatus
	(*TwoWireReply)(nil),            // 20: fk_atlas.TwoWireReply
	(*Error)(nil),                   // 21: fk_atlas.Error
	(*WireAtlasReply)(nil),          // 22: fk_atlas.WireAtlasReply
}
var file_fk_atlas_proto_depIdxs = []int32{
	2,  // 0: fk_atlas.AtlasCalibrationCommand.operation:type_name -> fk_atlas.CalibrationOperation
	3,  // 1: fk_atlas.AtlasCalibrationCommand.temp:type_name -> fk_atlas.TempCalibrations
	5,  // 2: fk_atlas.AtlasCalibrationCommand.dissolvedOxygen:type_name -> fk_atlas.DoCalibrations
	7,  // 3: fk_atlas.AtlasCalibrationCommand.ph:type_name -> fk_atlas.PhCalibrations
	9,  // 4: fk_atlas.AtlasCalibrationCommand.ec:type_name -> fk_atlas.EcCalibrations
	11, // 5: fk_atlas.AtlasCalibrationCommand.orp:type_name -> fk_atlas.OrpCalibrations
	1,  // 6: fk_atlas.WireAtlasQuery.type:type_name -> fk_atlas.QueryType
	15, // 7: fk_atlas.WireAtlasQuery.calibration:type_name -> fk_atlas.AtlasCalibrationCommand
	17, // 8: fk_atlas.WireAtlasQuery.compensations:type_name -> fk_atlas.Compensations
	16, // 9: fk_atlas.WireAtlasQuery.wire:type_name -> fk_atlas.TwoWireQuery
	0,  // 10: fk_atlas.AtlasCalibrationStatus.type:type_name -> fk_atlas.SensorType
	3,  // 11: fk_atlas.AtlasCalibrationStatus.temp:type_name -> fk_atlas.TempCalibrations
	5,  // 12: fk_atlas.AtlasCalibrationStatus.dissolvedOxygen:type_name -> fk_atlas.DoCalibrations
	7,  // 13: fk_atlas.AtlasCalibrationStatus.ph:type_name -> fk_atlas.PhCalibrations
	9,  // 14: fk_atlas.AtlasCalibrationStatus.ec:type_name -> fk_atlas.EcCalibrations
	11, // 15: fk_atlas.AtlasCalibrationStatus.orp:type_name -> fk_atlas.OrpCalibrations
	14, // 16: fk_atlas.Error.type:type_name -> fk_atlas.ErrorType
	13, // 17: fk_atlas.WireAtlasReply.type:type_name -> fk_atlas.ReplyType
	21, // 18: fk_atlas.WireAtlasReply.errors:type_name -> fk_atlas.Error
	19, // 19: fk_atlas.WireAtlasReply.calibration:type_name -> fk_atlas.AtlasCalibrationStatus
	20, // 20: fk_atlas.WireAtlasReply.wire:type_name -> fk_atlas.TwoWireReply
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_fk_atlas_proto_init() }
func file_fk_atlas_proto_init() {
	if File_fk_atlas_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fk_atlas_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtlasCalibrationCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_atlas_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoWireQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_atlas_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compensations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_atlas_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireAtlasQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_atlas_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtlasCalibrationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_atlas_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwoWireReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_atlas_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_atlas_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireAtlasReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fk_atlas_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fk_atlas_proto_goTypes,
		DependencyIndexes: file_fk_atlas_proto_depIdxs,
		EnumInfos:         file_fk_atlas_proto_enumTypes,
		MessageInfos:      file_fk_atlas_proto_msgTypes,
	}.Build()
	File_fk_atlas_proto = out.File
	file_fk_atlas_proto_rawDesc = nil
	file_fk_atlas_proto_goTypes = nil
	file_fk_atlas_proto_depIdxs = nil
}
