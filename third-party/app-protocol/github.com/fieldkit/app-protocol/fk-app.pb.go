// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.2
// source: fk-app.proto

package app_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryFlags int32

const (
	QueryFlags_QUERY_FLAGS_NONE QueryFlags = 0
	QueryFlags_QUERY_FLAGS_LOGS QueryFlags = 1
)

// Enum value maps for QueryFlags.
var (
	QueryFlags_name = map[int32]string{
		0: "QUERY_FLAGS_NONE",
		1: "QUERY_FLAGS_LOGS",
	}
	QueryFlags_value = map[string]int32{
		"QUERY_FLAGS_NONE": 0,
		"QUERY_FLAGS_LOGS": 1,
	}
)

func (x QueryFlags) Enum() *QueryFlags {
	p := new(QueryFlags)
	*p = x
	return p
}

func (x QueryFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[0].Descriptor()
}

func (QueryFlags) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[0]
}

func (x QueryFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryFlags.Descriptor instead.
func (QueryFlags) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{0}
}

type QueryType int32

const (
	QueryType_QUERY_NONE                       QueryType = 0
	QueryType_QUERY_CAPABILITIES               QueryType = 1
	QueryType_QUERY_CONFIGURE_SENSOR           QueryType = 2
	QueryType_QUERY_LIVE_DATA_POLL             QueryType = 7
	QueryType_QUERY_SCHEDULES                  QueryType = 8
	QueryType_QUERY_CONFIGURE_SCHEDULES        QueryType = 9
	QueryType_QUERY_FILES_SD                   QueryType = 10
	QueryType_QUERY_DOWNLOAD_FILE              QueryType = 11
	QueryType_QUERY_ERASE_FILE                 QueryType = 12
	QueryType_QUERY_RESET                      QueryType = 13
	QueryType_QUERY_NETWORK_SETTINGS           QueryType = 14
	QueryType_QUERY_CONFIGURE_NETWORK_SETTINGS QueryType = 15
	QueryType_QUERY_SCAN_MODULES               QueryType = 16
	QueryType_QUERY_CONFIGURE_IDENTITY         QueryType = 17
	QueryType_QUERY_STATUS                     QueryType = 18
	QueryType_QUERY_MODULE                     QueryType = 19
	QueryType_QUERY_METADATA                   QueryType = 20
	QueryType_QUERY_FORMAT                     QueryType = 21
	QueryType_QUERY_GET_READINGS               QueryType = 22
	QueryType_QUERY_TAKE_READINGS              QueryType = 23
	QueryType_QUERY_RECORDING_CONTROL          QueryType = 24
	QueryType_QUERY_CONFIGURE                  QueryType = 25
	QueryType_QUERY_SCAN_NETWORKS              QueryType = 26
	QueryType_QUERY_FILES_SPI                  QueryType = 27
	QueryType_QUERY_FILES_QSPI                 QueryType = 28
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0:  "QUERY_NONE",
		1:  "QUERY_CAPABILITIES",
		2:  "QUERY_CONFIGURE_SENSOR",
		7:  "QUERY_LIVE_DATA_POLL",
		8:  "QUERY_SCHEDULES",
		9:  "QUERY_CONFIGURE_SCHEDULES",
		10: "QUERY_FILES_SD",
		11: "QUERY_DOWNLOAD_FILE",
		12: "QUERY_ERASE_FILE",
		13: "QUERY_RESET",
		14: "QUERY_NETWORK_SETTINGS",
		15: "QUERY_CONFIGURE_NETWORK_SETTINGS",
		16: "QUERY_SCAN_MODULES",
		17: "QUERY_CONFIGURE_IDENTITY",
		18: "QUERY_STATUS",
		19: "QUERY_MODULE",
		20: "QUERY_METADATA",
		21: "QUERY_FORMAT",
		22: "QUERY_GET_READINGS",
		23: "QUERY_TAKE_READINGS",
		24: "QUERY_RECORDING_CONTROL",
		25: "QUERY_CONFIGURE",
		26: "QUERY_SCAN_NETWORKS",
		27: "QUERY_FILES_SPI",
		28: "QUERY_FILES_QSPI",
	}
	QueryType_value = map[string]int32{
		"QUERY_NONE":                       0,
		"QUERY_CAPABILITIES":               1,
		"QUERY_CONFIGURE_SENSOR":           2,
		"QUERY_LIVE_DATA_POLL":             7,
		"QUERY_SCHEDULES":                  8,
		"QUERY_CONFIGURE_SCHEDULES":        9,
		"QUERY_FILES_SD":                   10,
		"QUERY_DOWNLOAD_FILE":              11,
		"QUERY_ERASE_FILE":                 12,
		"QUERY_RESET":                      13,
		"QUERY_NETWORK_SETTINGS":           14,
		"QUERY_CONFIGURE_NETWORK_SETTINGS": 15,
		"QUERY_SCAN_MODULES":               16,
		"QUERY_CONFIGURE_IDENTITY":         17,
		"QUERY_STATUS":                     18,
		"QUERY_MODULE":                     19,
		"QUERY_METADATA":                   20,
		"QUERY_FORMAT":                     21,
		"QUERY_GET_READINGS":               22,
		"QUERY_TAKE_READINGS":              23,
		"QUERY_RECORDING_CONTROL":          24,
		"QUERY_CONFIGURE":                  25,
		"QUERY_SCAN_NETWORKS":              26,
		"QUERY_FILES_SPI":                  27,
		"QUERY_FILES_QSPI":                 28,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[1].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[1]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{1}
}

type ReplyType int32

const (
	ReplyType_REPLY_NONE             ReplyType = 0
	ReplyType_REPLY_SUCCESS          ReplyType = 1
	ReplyType_REPLY_BUSY             ReplyType = 2
	ReplyType_REPLY_ERROR            ReplyType = 3
	ReplyType_REPLY_CAPABILITIES     ReplyType = 4
	ReplyType_REPLY_LIVE_DATA_POLL   ReplyType = 8
	ReplyType_REPLY_SCHEDULES        ReplyType = 9
	ReplyType_REPLY_FILES            ReplyType = 10
	ReplyType_REPLY_DOWNLOAD_FILE    ReplyType = 11
	ReplyType_REPLY_RESET            ReplyType = 12
	ReplyType_REPLY_NETWORK_SETTINGS ReplyType = 13
	ReplyType_REPLY_IDENTITY         ReplyType = 14
	ReplyType_REPLY_STATUS           ReplyType = 15
	ReplyType_REPLY_MODULE           ReplyType = 16
	ReplyType_REPLY_METADATA         ReplyType = 17
	ReplyType_REPLY_READINGS         ReplyType = 18
	ReplyType_REPLY_NETWORKS         ReplyType = 19
)

// Enum value maps for ReplyType.
var (
	ReplyType_name = map[int32]string{
		0:  "REPLY_NONE",
		1:  "REPLY_SUCCESS",
		2:  "REPLY_BUSY",
		3:  "REPLY_ERROR",
		4:  "REPLY_CAPABILITIES",
		8:  "REPLY_LIVE_DATA_POLL",
		9:  "REPLY_SCHEDULES",
		10: "REPLY_FILES",
		11: "REPLY_DOWNLOAD_FILE",
		12: "REPLY_RESET",
		13: "REPLY_NETWORK_SETTINGS",
		14: "REPLY_IDENTITY",
		15: "REPLY_STATUS",
		16: "REPLY_MODULE",
		17: "REPLY_METADATA",
		18: "REPLY_READINGS",
		19: "REPLY_NETWORKS",
	}
	ReplyType_value = map[string]int32{
		"REPLY_NONE":             0,
		"REPLY_SUCCESS":          1,
		"REPLY_BUSY":             2,
		"REPLY_ERROR":            3,
		"REPLY_CAPABILITIES":     4,
		"REPLY_LIVE_DATA_POLL":   8,
		"REPLY_SCHEDULES":        9,
		"REPLY_FILES":            10,
		"REPLY_DOWNLOAD_FILE":    11,
		"REPLY_RESET":            12,
		"REPLY_NETWORK_SETTINGS": 13,
		"REPLY_IDENTITY":         14,
		"REPLY_STATUS":           15,
		"REPLY_MODULE":           16,
		"REPLY_METADATA":         17,
		"REPLY_READINGS":         18,
		"REPLY_NETWORKS":         19,
	}
)

func (x ReplyType) Enum() *ReplyType {
	p := new(ReplyType)
	*p = x
	return p
}

func (x ReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[2].Descriptor()
}

func (ReplyType) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[2]
}

func (x ReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplyType.Descriptor instead.
func (ReplyType) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{2}
}

type DownloadFlags int32

const (
	DownloadFlags_DOWNLOAD_FLAG_NONE             DownloadFlags = 0
	DownloadFlags_DOWNLOAD_FLAG_METADATA_PREPEND DownloadFlags = 1
	DownloadFlags_DOWNLOAD_FLAG_METADATA_ONLY    DownloadFlags = 2
)

// Enum value maps for DownloadFlags.
var (
	DownloadFlags_name = map[int32]string{
		0: "DOWNLOAD_FLAG_NONE",
		1: "DOWNLOAD_FLAG_METADATA_PREPEND",
		2: "DOWNLOAD_FLAG_METADATA_ONLY",
	}
	DownloadFlags_value = map[string]int32{
		"DOWNLOAD_FLAG_NONE":             0,
		"DOWNLOAD_FLAG_METADATA_PREPEND": 1,
		"DOWNLOAD_FLAG_METADATA_ONLY":    2,
	}
)

func (x DownloadFlags) Enum() *DownloadFlags {
	p := new(DownloadFlags)
	*p = x
	return p
}

func (x DownloadFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[3].Descriptor()
}

func (DownloadFlags) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[3]
}

func (x DownloadFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadFlags.Descriptor instead.
func (DownloadFlags) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{3}
}

type ModuleFlags int32

const (
	ModuleFlags_MODULE_FLAG_NONE     ModuleFlags = 0
	ModuleFlags_MODULE_FLAG_INTERNAL ModuleFlags = 1
)

// Enum value maps for ModuleFlags.
var (
	ModuleFlags_name = map[int32]string{
		0: "MODULE_FLAG_NONE",
		1: "MODULE_FLAG_INTERNAL",
	}
	ModuleFlags_value = map[string]int32{
		"MODULE_FLAG_NONE":     0,
		"MODULE_FLAG_INTERNAL": 1,
	}
)

func (x ModuleFlags) Enum() *ModuleFlags {
	p := new(ModuleFlags)
	*p = x
	return p
}

func (x ModuleFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[4].Descriptor()
}

func (ModuleFlags) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[4]
}

func (x ModuleFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleFlags.Descriptor instead.
func (ModuleFlags) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{4}
}

type SensorFlags int32

const (
	SensorFlags_SENSOR_FLAG_NONE SensorFlags = 0
)

// Enum value maps for SensorFlags.
var (
	SensorFlags_name = map[int32]string{
		0: "SENSOR_FLAG_NONE",
	}
	SensorFlags_value = map[string]int32{
		"SENSOR_FLAG_NONE": 0,
	}
)

func (x SensorFlags) Enum() *SensorFlags {
	p := new(SensorFlags)
	*p = x
	return p
}

func (x SensorFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[5].Descriptor()
}

func (SensorFlags) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[5]
}

func (x SensorFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorFlags.Descriptor instead.
func (SensorFlags) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{5}
}

type ModuleQueryType int32

const (
	ModuleQueryType_MODULE_QUERY_NONE      ModuleQueryType = 0
	ModuleQueryType_MODULE_QUERY_STATUS    ModuleQueryType = 1
	ModuleQueryType_MODULE_QUERY_CONFIGURE ModuleQueryType = 2
	ModuleQueryType_MODULE_QUERY_RESET     ModuleQueryType = 3
)

// Enum value maps for ModuleQueryType.
var (
	ModuleQueryType_name = map[int32]string{
		0: "MODULE_QUERY_NONE",
		1: "MODULE_QUERY_STATUS",
		2: "MODULE_QUERY_CONFIGURE",
		3: "MODULE_QUERY_RESET",
	}
	ModuleQueryType_value = map[string]int32{
		"MODULE_QUERY_NONE":      0,
		"MODULE_QUERY_STATUS":    1,
		"MODULE_QUERY_CONFIGURE": 2,
		"MODULE_QUERY_RESET":     3,
	}
)

func (x ModuleQueryType) Enum() *ModuleQueryType {
	p := new(ModuleQueryType)
	*p = x
	return p
}

func (x ModuleQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[6].Descriptor()
}

func (ModuleQueryType) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[6]
}

func (x ModuleQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleQueryType.Descriptor instead.
func (ModuleQueryType) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{6}
}

type ModuleReplyType int32

const (
	ModuleReplyType_MODULE_REPLY_NONE    ModuleReplyType = 0
	ModuleReplyType_MODULE_REPLY_SUCCESS ModuleReplyType = 1
	ModuleReplyType_MODULE_REPLY_BUSY    ModuleReplyType = 2
	ModuleReplyType_MODULE_REPLY_ERROR   ModuleReplyType = 3
)

// Enum value maps for ModuleReplyType.
var (
	ModuleReplyType_name = map[int32]string{
		0: "MODULE_REPLY_NONE",
		1: "MODULE_REPLY_SUCCESS",
		2: "MODULE_REPLY_BUSY",
		3: "MODULE_REPLY_ERROR",
	}
	ModuleReplyType_value = map[string]int32{
		"MODULE_REPLY_NONE":    0,
		"MODULE_REPLY_SUCCESS": 1,
		"MODULE_REPLY_BUSY":    2,
		"MODULE_REPLY_ERROR":   3,
	}
)

func (x ModuleReplyType) Enum() *ModuleReplyType {
	p := new(ModuleReplyType)
	*p = x
	return p
}

func (x ModuleReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[7].Descriptor()
}

func (ModuleReplyType) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[7]
}

func (x ModuleReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleReplyType.Descriptor instead.
func (ModuleReplyType) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{7}
}

type UdpStatus int32

const (
	UdpStatus_UDP_STATUS_ONLINE UdpStatus = 0
	UdpStatus_UDP_STATUS_BYE    UdpStatus = 1
)

// Enum value maps for UdpStatus.
var (
	UdpStatus_name = map[int32]string{
		0: "UDP_STATUS_ONLINE",
		1: "UDP_STATUS_BYE",
	}
	UdpStatus_value = map[string]int32{
		"UDP_STATUS_ONLINE": 0,
		"UDP_STATUS_BYE":    1,
	}
)

func (x UdpStatus) Enum() *UdpStatus {
	p := new(UdpStatus)
	*p = x
	return p
}

func (x UdpStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UdpStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fk_app_proto_enumTypes[8].Descriptor()
}

func (UdpStatus) Type() protoreflect.EnumType {
	return &file_fk_app_proto_enumTypes[8]
}

func (x UdpStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UdpStatus.Descriptor instead.
func (UdpStatus) EnumDescriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{8}
}

type QueryCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	CallerTime uint32 `protobuf:"varint,2,opt,name=callerTime,proto3" json:"callerTime,omitempty"`
}

func (x *QueryCapabilities) Reset() {
	*x = QueryCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCapabilities) ProtoMessage() {}

func (x *QueryCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCapabilities.ProtoReflect.Descriptor instead.
func (*QueryCapabilities) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{0}
}

func (x *QueryCapabilities) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *QueryCapabilities) GetCallerTime() uint32 {
	if x != nil {
		return x.CallerTime
	}
	return 0
}

type LiveValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid        bool    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Value        float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Uncalibrated float32 `protobuf:"fixed32,3,opt,name=uncalibrated,proto3" json:"uncalibrated,omitempty"`
}

func (x *LiveValue) Reset() {
	*x = LiveValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveValue) ProtoMessage() {}

func (x *LiveValue) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveValue.ProtoReflect.Descriptor instead.
func (*LiveValue) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{1}
}

func (x *LiveValue) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *LiveValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LiveValue) GetUncalibrated() float32 {
	if x != nil {
		return x.Uncalibrated
	}
	return 0
}

type SensorCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number        uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Module        uint32 `protobuf:"varint,2,opt,name=module,proto3" json:"module,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Frequency     uint32 `protobuf:"varint,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	UnitOfMeasure string `protobuf:"bytes,5,opt,name=unitOfMeasure,proto3" json:"unitOfMeasure,omitempty"`
	// v2
	Path  string     `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	Flags uint32     `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	Value *LiveValue `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SensorCapabilities) Reset() {
	*x = SensorCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorCapabilities) ProtoMessage() {}

func (x *SensorCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorCapabilities.ProtoReflect.Descriptor instead.
func (*SensorCapabilities) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{2}
}

func (x *SensorCapabilities) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SensorCapabilities) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *SensorCapabilities) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SensorCapabilities) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *SensorCapabilities) GetUnitOfMeasure() string {
	if x != nil {
		return x.UnitOfMeasure
	}
	return ""
}

func (x *SensorCapabilities) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SensorCapabilities) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SensorCapabilities) GetValue() *LiveValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type ModuleHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manufacturer uint32 `protobuf:"varint,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Kind         uint32 `protobuf:"varint,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Version      uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ModuleHeader) Reset() {
	*x = ModuleHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleHeader) ProtoMessage() {}

func (x *ModuleHeader) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleHeader.ProtoReflect.Descriptor instead.
func (*ModuleHeader) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{3}
}

func (x *ModuleHeader) GetManufacturer() uint32 {
	if x != nil {
		return x.Manufacturer
	}
	return 0
}

func (x *ModuleHeader) GetKind() uint32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *ModuleHeader) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ModuleCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position uint32                `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Name     string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sensors  []*SensorCapabilities `protobuf:"bytes,3,rep,name=sensors,proto3" json:"sensors,omitempty"`
	// v2
	Path          string        `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Flags         uint32        `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	Id            []byte        `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Header        *ModuleHeader `protobuf:"bytes,7,opt,name=header,proto3" json:"header,omitempty"`
	Configuration []byte        `protobuf:"bytes,8,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ModuleCapabilities) Reset() {
	*x = ModuleCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCapabilities) ProtoMessage() {}

func (x *ModuleCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCapabilities.ProtoReflect.Descriptor instead.
func (*ModuleCapabilities) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{4}
}

func (x *ModuleCapabilities) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ModuleCapabilities) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleCapabilities) GetSensors() []*SensorCapabilities {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *ModuleCapabilities) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ModuleCapabilities) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ModuleCapabilities) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ModuleCapabilities) GetHeader() *ModuleHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ModuleCapabilities) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  uint32                `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	DeviceId []byte                `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Name     string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Modules  []*ModuleCapabilities `protobuf:"bytes,4,rep,name=modules,proto3" json:"modules,omitempty"`
	Sensors  []*SensorCapabilities `protobuf:"bytes,5,rep,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{5}
}

func (x *Capabilities) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Capabilities) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *Capabilities) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Capabilities) GetModules() []*ModuleCapabilities {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Capabilities) GetSensors() []*SensorCapabilities {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid      string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Create    bool   `protobuf:"varint,3,opt,name=create,proto3" json:"create,omitempty"`
	Preferred bool   `protobuf:"varint,4,opt,name=preferred,proto3" json:"preferred,omitempty"`
	Keeping   bool   `protobuf:"varint,5,opt,name=keeping,proto3" json:"keeping,omitempty"`
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkInfo) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *NetworkInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NetworkInfo) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *NetworkInfo) GetPreferred() bool {
	if x != nil {
		return x.Preferred
	}
	return false
}

func (x *NetworkInfo) GetKeeping() bool {
	if x != nil {
		return x.Keeping
	}
	return false
}

type NetworkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateAccessPoint int32          `protobuf:"varint,1,opt,name=createAccessPoint,proto3" json:"createAccessPoint,omitempty"`
	Connected         *NetworkInfo   `protobuf:"bytes,3,opt,name=connected,proto3" json:"connected,omitempty"`
	MacAddress        string         `protobuf:"bytes,4,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	Modifying         bool           `protobuf:"varint,5,opt,name=modifying,proto3" json:"modifying,omitempty"`
	Networks          []*NetworkInfo `protobuf:"bytes,2,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *NetworkSettings) Reset() {
	*x = NetworkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSettings) ProtoMessage() {}

func (x *NetworkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSettings.ProtoReflect.Descriptor instead.
func (*NetworkSettings) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkSettings) GetCreateAccessPoint() int32 {
	if x != nil {
		return x.CreateAccessPoint
	}
	return 0
}

func (x *NetworkSettings) GetConnected() *NetworkInfo {
	if x != nil {
		return x.Connected
	}
	return nil
}

func (x *NetworkSettings) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkSettings) GetModifying() bool {
	if x != nil {
		return x.Modifying
	}
	return false
}

func (x *NetworkSettings) GetNetworks() []*NetworkInfo {
	if x != nil {
		return x.Networks
	}
	return nil
}

type Firmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Build          string `protobuf:"bytes,2,opt,name=build,proto3" json:"build,omitempty"`
	Number         string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	Timestamp      uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hash           string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	LogicalAddress uint64 `protobuf:"varint,6,opt,name=logical_address,json=logicalAddress,proto3" json:"logical_address,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Firmware) Reset() {
	*x = Firmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firmware) ProtoMessage() {}

func (x *Firmware) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firmware.ProtoReflect.Descriptor instead.
func (*Firmware) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{8}
}

func (x *Firmware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Firmware) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Firmware) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Firmware) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Firmware) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Firmware) GetLogicalAddress() uint64 {
	if x != nil {
		return x.LogicalAddress
	}
	return 0
}

func (x *Firmware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device   string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Stream   string `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	DeviceId []byte `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Firmware string `protobuf:"bytes,4,opt,name=firmware,proto3" json:"firmware,omitempty"`
	Build    string `protobuf:"bytes,5,opt,name=build,proto3" json:"build,omitempty"`
	Number   string `protobuf:"bytes,8,opt,name=number,proto3" json:"number,omitempty"`
	// v2
	Name         string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	GenerationId []byte `protobuf:"bytes,7,opt,name=generationId,proto3" json:"generationId,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{9}
}

func (x *Identity) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Identity) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *Identity) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *Identity) GetFirmware() string {
	if x != nil {
		return x.Firmware
	}
	return ""
}

func (x *Identity) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Identity) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identity) GetGenerationId() []byte {
	if x != nil {
		return x.GenerationId
	}
	return nil
}

type ConfigureSensorQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *ConfigureSensorQuery) Reset() {
	*x = ConfigureSensorQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureSensorQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSensorQuery) ProtoMessage() {}

func (x *ConfigureSensorQuery) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSensorQuery.ProtoReflect.Descriptor instead.
func (*ConfigureSensorQuery) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{10}
}

func (x *ConfigureSensorQuery) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigureSensorQuery) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type LiveDataPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval uint32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *LiveDataPoll) Reset() {
	*x = LiveDataPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDataPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDataPoll) ProtoMessage() {}

func (x *LiveDataPoll) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDataPoll.ProtoReflect.Descriptor instead.
func (*LiveDataPoll) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{11}
}

func (x *LiveDataPoll) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type LiveDataSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensor uint32  `protobuf:"varint,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	Time   uint64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Value  float32 `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LiveDataSample) Reset() {
	*x = LiveDataSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDataSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDataSample) ProtoMessage() {}

func (x *LiveDataSample) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDataSample.ProtoReflect.Descriptor instead.
func (*LiveDataSample) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{12}
}

func (x *LiveDataSample) GetSensor() uint32 {
	if x != nil {
		return x.Sensor
	}
	return 0
}

func (x *LiveDataSample) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LiveDataSample) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type LiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples []*LiveDataSample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *LiveData) Reset() {
	*x = LiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveData) ProtoMessage() {}

func (x *LiveData) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveData.ProtoReflect.Descriptor instead.
func (*LiveData) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{13}
}

func (x *LiveData) GetSamples() []*LiveDataSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time    uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Size    uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Name    string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Maximum uint64 `protobuf:"varint,6,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{14}
}

func (x *File) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *File) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *File) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetMaximum() uint64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

type Files struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *Files) Reset() {
	*x = Files{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Files) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Files) ProtoMessage() {}

func (x *Files) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Files.ProtoReflect.Descriptor instead.
func (*Files) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{15}
}

func (x *Files) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type DownloadFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Flags  uint32 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *DownloadFile) Reset() {
	*x = DownloadFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFile) ProtoMessage() {}

func (x *DownloadFile) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFile.ProtoReflect.Descriptor instead.
func (*DownloadFile) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{16}
}

func (x *DownloadFile) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DownloadFile) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DownloadFile) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *DownloadFile) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type EraseFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EraseFile) Reset() {
	*x = EraseFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraseFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraseFile) ProtoMessage() {}

func (x *EraseFile) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EraseFile.ProtoReflect.Descriptor instead.
func (*EraseFile) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{17}
}

func (x *EraseFile) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset  uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Size    uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Hash    uint32 `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Version uint32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Id      uint32 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FileData) Reset() {
	*x = FileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{18}
}

func (x *FileData) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileData) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *FileData) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FileData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uptime            uint32  `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	BatteryPercentage float32 `protobuf:"fixed32,2,opt,name=batteryPercentage,proto3" json:"batteryPercentage,omitempty"`
	BatteryVoltage    float32 `protobuf:"fixed32,3,opt,name=batteryVoltage,proto3" json:"batteryVoltage,omitempty"`
	GpsHasFix         uint32  `protobuf:"varint,4,opt,name=gpsHasFix,proto3" json:"gpsHasFix,omitempty"`
	GpsSatellites     uint32  `protobuf:"varint,5,opt,name=gpsSatellites,proto3" json:"gpsSatellites,omitempty"`
}

func (x *DeviceStatus) Reset() {
	*x = DeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatus) ProtoMessage() {}

func (x *DeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatus.ProtoReflect.Descriptor instead.
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceStatus) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *DeviceStatus) GetBatteryPercentage() float32 {
	if x != nil {
		return x.BatteryPercentage
	}
	return 0
}

func (x *DeviceStatus) GetBatteryVoltage() float32 {
	if x != nil {
		return x.BatteryVoltage
	}
	return 0
}

func (x *DeviceStatus) GetGpsHasFix() uint32 {
	if x != nil {
		return x.GpsHasFix
	}
	return 0
}

func (x *DeviceStatus) GetGpsSatellites() uint32 {
	if x != nil {
		return x.GpsSatellites
	}
	return 0
}

type QueryModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address uint32 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueryModule) Reset() {
	*x = QueryModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryModule) ProtoMessage() {}

func (x *QueryModule) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryModule.ProtoReflect.Descriptor instead.
func (*QueryModule) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{20}
}

func (x *QueryModule) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryModule) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *QueryModule) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type ModuleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address uint32 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ModuleReply) Reset() {
	*x = ModuleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleReply) ProtoMessage() {}

func (x *ModuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleReply.ProtoReflect.Descriptor instead.
func (*ModuleReply) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{21}
}

func (x *ModuleReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModuleReply) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *ModuleReply) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type WireMessageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              QueryType             `protobuf:"varint,1,opt,name=type,proto3,enum=fk_app.QueryType" json:"type,omitempty"`
	QueryCapabilities *QueryCapabilities    `protobuf:"bytes,2,opt,name=queryCapabilities,proto3" json:"queryCapabilities,omitempty"`
	ConfigureSensor   *ConfigureSensorQuery `protobuf:"bytes,3,opt,name=configureSensor,proto3" json:"configureSensor,omitempty"`
	LiveDataPoll      *LiveDataPoll         `protobuf:"bytes,8,opt,name=liveDataPoll,proto3" json:"liveDataPoll,omitempty"`
	DownloadFile      *DownloadFile         `protobuf:"bytes,10,opt,name=downloadFile,proto3" json:"downloadFile,omitempty"`
	EraseFile         *EraseFile            `protobuf:"bytes,11,opt,name=eraseFile,proto3" json:"eraseFile,omitempty"`
	NetworkSettings   *NetworkSettings      `protobuf:"bytes,12,opt,name=networkSettings,proto3" json:"networkSettings,omitempty"`
	Identity          *Identity             `protobuf:"bytes,13,opt,name=identity,proto3" json:"identity,omitempty"`
	Module            *QueryModule          `protobuf:"bytes,14,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *WireMessageQuery) Reset() {
	*x = WireMessageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireMessageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireMessageQuery) ProtoMessage() {}

func (x *WireMessageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireMessageQuery.ProtoReflect.Descriptor instead.
func (*WireMessageQuery) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{22}
}

func (x *WireMessageQuery) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_QUERY_NONE
}

func (x *WireMessageQuery) GetQueryCapabilities() *QueryCapabilities {
	if x != nil {
		return x.QueryCapabilities
	}
	return nil
}

func (x *WireMessageQuery) GetConfigureSensor() *ConfigureSensorQuery {
	if x != nil {
		return x.ConfigureSensor
	}
	return nil
}

func (x *WireMessageQuery) GetLiveDataPoll() *LiveDataPoll {
	if x != nil {
		return x.LiveDataPoll
	}
	return nil
}

func (x *WireMessageQuery) GetDownloadFile() *DownloadFile {
	if x != nil {
		return x.DownloadFile
	}
	return nil
}

func (x *WireMessageQuery) GetEraseFile() *EraseFile {
	if x != nil {
		return x.EraseFile
	}
	return nil
}

func (x *WireMessageQuery) GetNetworkSettings() *NetworkSettings {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *WireMessageQuery) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *WireMessageQuery) GetModule() *QueryModule {
	if x != nil {
		return x.Module
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Delay   uint32 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{23}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type WireMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            ReplyType        `protobuf:"varint,1,opt,name=type,proto3,enum=fk_app.ReplyType" json:"type,omitempty"`
	Errors          []*Error         `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Capabilities    *Capabilities    `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	LiveData        *LiveData        `protobuf:"bytes,6,opt,name=liveData,proto3" json:"liveData,omitempty"`
	Files           *Files           `protobuf:"bytes,8,opt,name=files,proto3" json:"files,omitempty"`
	FileData        *FileData        `protobuf:"bytes,9,opt,name=fileData,proto3" json:"fileData,omitempty"`
	NetworkSettings *NetworkSettings `protobuf:"bytes,10,opt,name=networkSettings,proto3" json:"networkSettings,omitempty"`
	Identity        *Identity        `protobuf:"bytes,11,opt,name=identity,proto3" json:"identity,omitempty"`
	Status          *DeviceStatus    `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	Module          *ModuleReply     `protobuf:"bytes,13,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *WireMessageReply) Reset() {
	*x = WireMessageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireMessageReply) ProtoMessage() {}

func (x *WireMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireMessageReply.ProtoReflect.Descriptor instead.
func (*WireMessageReply) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{24}
}

func (x *WireMessageReply) GetType() ReplyType {
	if x != nil {
		return x.Type
	}
	return ReplyType_REPLY_NONE
}

func (x *WireMessageReply) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *WireMessageReply) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *WireMessageReply) GetLiveData() *LiveData {
	if x != nil {
		return x.LiveData
	}
	return nil
}

func (x *WireMessageReply) GetFiles() *Files {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *WireMessageReply) GetFileData() *FileData {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *WireMessageReply) GetNetworkSettings() *NetworkSettings {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *WireMessageReply) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *WireMessageReply) GetStatus() *DeviceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WireMessageReply) GetModule() *ModuleReply {
	if x != nil {
		return x.Module
	}
	return nil
}

type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End      uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Interval uint32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Interval) Reset() {
	*x = Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{25}
}

func (x *Interval) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Interval) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Interval) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cron      []byte      `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
	Interval  uint32      `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Repeated  uint32      `protobuf:"varint,3,opt,name=repeated,proto3" json:"repeated,omitempty"`
	Duration  uint32      `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Jitter    uint32      `protobuf:"varint,5,opt,name=jitter,proto3" json:"jitter,omitempty"`
	Intervals []*Interval `protobuf:"bytes,6,rep,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{26}
}

func (x *Schedule) GetCron() []byte {
	if x != nil {
		return x.Cron
	}
	return nil
}

func (x *Schedule) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Schedule) GetRepeated() uint32 {
	if x != nil {
		return x.Repeated
	}
	return 0
}

func (x *Schedule) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Schedule) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *Schedule) GetIntervals() []*Interval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type Schedules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modifying bool      `protobuf:"varint,1,opt,name=modifying,proto3" json:"modifying,omitempty"`
	Readings  *Schedule `protobuf:"bytes,2,opt,name=readings,proto3" json:"readings,omitempty"`
	Lora      *Schedule `protobuf:"bytes,3,opt,name=lora,proto3" json:"lora,omitempty"`
	Network   *Schedule `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	Gps       *Schedule `protobuf:"bytes,5,opt,name=gps,proto3" json:"gps,omitempty"`
}

func (x *Schedules) Reset() {
	*x = Schedules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedules) ProtoMessage() {}

func (x *Schedules) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedules.ProtoReflect.Descriptor instead.
func (*Schedules) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{27}
}

func (x *Schedules) GetModifying() bool {
	if x != nil {
		return x.Modifying
	}
	return false
}

func (x *Schedules) GetReadings() *Schedule {
	if x != nil {
		return x.Readings
	}
	return nil
}

func (x *Schedules) GetLora() *Schedule {
	if x != nil {
		return x.Lora
	}
	return nil
}

func (x *Schedules) GetNetwork() *Schedule {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Schedules) GetGps() *Schedule {
	if x != nil {
		return x.Gps
	}
	return nil
}

type HardwareStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HardwareStatus) Reset() {
	*x = HardwareStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareStatus) ProtoMessage() {}

func (x *HardwareStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareStatus.ProtoReflect.Descriptor instead.
func (*HardwareStatus) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{28}
}

type GpsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    uint32  `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Fix        uint32  `protobuf:"varint,1,opt,name=fix,proto3" json:"fix,omitempty"`
	Time       uint64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Satellites uint32  `protobuf:"varint,3,opt,name=satellites,proto3" json:"satellites,omitempty"`
	Longitude  float32 `protobuf:"fixed32,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude   float32 `protobuf:"fixed32,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Altitude   float32 `protobuf:"fixed32,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *GpsStatus) Reset() {
	*x = GpsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsStatus) ProtoMessage() {}

func (x *GpsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsStatus.ProtoReflect.Descriptor instead.
func (*GpsStatus) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{29}
}

func (x *GpsStatus) GetEnabled() uint32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *GpsStatus) GetFix() uint32 {
	if x != nil {
		return x.Fix
	}
	return 0
}

func (x *GpsStatus) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GpsStatus) GetSatellites() uint32 {
	if x != nil {
		return x.Satellites
	}
	return 0
}

func (x *GpsStatus) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GpsStatus) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GpsStatus) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

type MemoryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SramAvailable           uint32      `protobuf:"varint,1,opt,name=sramAvailable,proto3" json:"sramAvailable,omitempty"`
	ProgramFlashAvailable   uint32      `protobuf:"varint,2,opt,name=programFlashAvailable,proto3" json:"programFlashAvailable,omitempty"`
	ExtendedMemoryAvailable uint32      `protobuf:"varint,3,opt,name=extendedMemoryAvailable,proto3" json:"extendedMemoryAvailable,omitempty"`
	DataMemoryInstalled     uint32      `protobuf:"varint,4,opt,name=dataMemoryInstalled,proto3" json:"dataMemoryInstalled,omitempty"`
	DataMemoryUsed          uint32      `protobuf:"varint,5,opt,name=dataMemoryUsed,proto3" json:"dataMemoryUsed,omitempty"`
	DataMemoryConsumption   float32     `protobuf:"fixed32,6,opt,name=dataMemoryConsumption,proto3" json:"dataMemoryConsumption,omitempty"`
	Firmware                []*Firmware `protobuf:"bytes,7,rep,name=firmware,proto3" json:"firmware,omitempty"`
}

func (x *MemoryStatus) Reset() {
	*x = MemoryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStatus) ProtoMessage() {}

func (x *MemoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStatus.ProtoReflect.Descriptor instead.
func (*MemoryStatus) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{30}
}

func (x *MemoryStatus) GetSramAvailable() uint32 {
	if x != nil {
		return x.SramAvailable
	}
	return 0
}

func (x *MemoryStatus) GetProgramFlashAvailable() uint32 {
	if x != nil {
		return x.ProgramFlashAvailable
	}
	return 0
}

func (x *MemoryStatus) GetExtendedMemoryAvailable() uint32 {
	if x != nil {
		return x.ExtendedMemoryAvailable
	}
	return 0
}

func (x *MemoryStatus) GetDataMemoryInstalled() uint32 {
	if x != nil {
		return x.DataMemoryInstalled
	}
	return 0
}

func (x *MemoryStatus) GetDataMemoryUsed() uint32 {
	if x != nil {
		return x.DataMemoryUsed
	}
	return 0
}

func (x *MemoryStatus) GetDataMemoryConsumption() float32 {
	if x != nil {
		return x.DataMemoryConsumption
	}
	return 0
}

func (x *MemoryStatus) GetFirmware() []*Firmware {
	if x != nil {
		return x.Firmware
	}
	return nil
}

type BatteryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage    uint32 `protobuf:"varint,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Percentage uint32 `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *BatteryStatus) Reset() {
	*x = BatteryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryStatus) ProtoMessage() {}

func (x *BatteryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryStatus.ProtoReflect.Descriptor instead.
func (*BatteryStatus) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{31}
}

func (x *BatteryStatus) GetVoltage() uint32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BatteryStatus) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type SolarStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage uint32 `protobuf:"varint,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *SolarStatus) Reset() {
	*x = SolarStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarStatus) ProtoMessage() {}

func (x *SolarStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarStatus.ProtoReflect.Descriptor instead.
func (*SolarStatus) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{32}
}

func (x *SolarStatus) GetVoltage() uint32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type PowerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Battery *BatteryStatus `protobuf:"bytes,1,opt,name=battery,proto3" json:"battery,omitempty"`
	Solar   *SolarStatus   `protobuf:"bytes,2,opt,name=solar,proto3" json:"solar,omitempty"`
}

func (x *PowerStatus) Reset() {
	*x = PowerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerStatus) ProtoMessage() {}

func (x *PowerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerStatus.ProtoReflect.Descriptor instead.
func (*PowerStatus) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{33}
}

func (x *PowerStatus) GetBattery() *BatteryStatus {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *PowerStatus) GetSolar() *SolarStatus {
	if x != nil {
		return x.Solar
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   uint32           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Uptime    uint32           `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Identity  *Identity        `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Hardware  *HardwareStatus  `protobuf:"bytes,4,opt,name=hardware,proto3" json:"hardware,omitempty"`
	Power     *PowerStatus     `protobuf:"bytes,5,opt,name=power,proto3" json:"power,omitempty"`
	Memory    *MemoryStatus    `protobuf:"bytes,6,opt,name=memory,proto3" json:"memory,omitempty"`
	Gps       *GpsStatus       `protobuf:"bytes,7,opt,name=gps,proto3" json:"gps,omitempty"`
	Schedules *Schedules       `protobuf:"bytes,8,opt,name=schedules,proto3" json:"schedules,omitempty"`
	Recording *Recording       `protobuf:"bytes,9,opt,name=recording,proto3" json:"recording,omitempty"`
	Network   *NetworkSettings `protobuf:"bytes,10,opt,name=network,proto3" json:"network,omitempty"`
	Time      uint64           `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"`
	Firmware  *Firmware        `protobuf:"bytes,12,opt,name=firmware,proto3" json:"firmware,omitempty"`
	Logs      string           `protobuf:"bytes,13,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{34}
}

func (x *Status) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Status) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Status) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Status) GetHardware() *HardwareStatus {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *Status) GetPower() *PowerStatus {
	if x != nil {
		return x.Power
	}
	return nil
}

func (x *Status) GetMemory() *MemoryStatus {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Status) GetGps() *GpsStatus {
	if x != nil {
		return x.Gps
	}
	return nil
}

func (x *Status) GetSchedules() *Schedules {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *Status) GetRecording() *Recording {
	if x != nil {
		return x.Recording
	}
	return nil
}

func (x *Status) GetNetwork() *NetworkSettings {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Status) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Status) GetFirmware() *Firmware {
	if x != nil {
		return x.Firmware
	}
	return nil
}

func (x *Status) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{35}
}

func (x *Range) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Range) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type DownloadQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream uint32   `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Ranges []*Range `protobuf:"bytes,3,rep,name=ranges,proto3" json:"ranges,omitempty"`
	Blocks []uint32 `protobuf:"varint,4,rep,packed,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *DownloadQuery) Reset() {
	*x = DownloadQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadQuery) ProtoMessage() {}

func (x *DownloadQuery) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadQuery.ProtoReflect.Descriptor instead.
func (*DownloadQuery) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{36}
}

func (x *DownloadQuery) GetStream() uint32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

func (x *DownloadQuery) GetRanges() []*Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *DownloadQuery) GetBlocks() []uint32 {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Recording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modifying   bool      `protobuf:"varint,1,opt,name=modifying,proto3" json:"modifying,omitempty"`
	Enabled     bool      `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StartedTime uint64    `protobuf:"varint,3,opt,name=startedTime,proto3" json:"startedTime,omitempty"`
	Location    *Location `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Recording) Reset() {
	*x = Recording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording) ProtoMessage() {}

func (x *Recording) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording.ProtoReflect.Descriptor instead.
func (*Recording) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{37}
}

func (x *Recording) GetModifying() bool {
	if x != nil {
		return x.Modifying
	}
	return false
}

func (x *Recording) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Recording) GetStartedTime() uint64 {
	if x != nil {
		return x.StartedTime
	}
	return 0
}

func (x *Recording) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type LoraSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available         bool   `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Modifying         bool   `protobuf:"varint,2,opt,name=modifying,proto3" json:"modifying,omitempty"`
	Clearing          bool   `protobuf:"varint,3,opt,name=clearing,proto3" json:"clearing,omitempty"`
	FrequencyBand     uint32 `protobuf:"varint,4,opt,name=frequencyBand,proto3" json:"frequencyBand,omitempty"`
	DeviceEui         []byte `protobuf:"bytes,5,opt,name=deviceEui,proto3" json:"deviceEui,omitempty"`
	AppKey            []byte `protobuf:"bytes,6,opt,name=appKey,proto3" json:"appKey,omitempty"`
	JoinEui           []byte `protobuf:"bytes,7,opt,name=joinEui,proto3" json:"joinEui,omitempty"`
	DeviceAddress     []byte `protobuf:"bytes,8,opt,name=deviceAddress,proto3" json:"deviceAddress,omitempty"`
	NetworkSessionKey []byte `protobuf:"bytes,9,opt,name=networkSessionKey,proto3" json:"networkSessionKey,omitempty"`
	AppSessionKey     []byte `protobuf:"bytes,10,opt,name=appSessionKey,proto3" json:"appSessionKey,omitempty"`
}

func (x *LoraSettings) Reset() {
	*x = LoraSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraSettings) ProtoMessage() {}

func (x *LoraSettings) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraSettings.ProtoReflect.Descriptor instead.
func (*LoraSettings) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{38}
}

func (x *LoraSettings) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *LoraSettings) GetModifying() bool {
	if x != nil {
		return x.Modifying
	}
	return false
}

func (x *LoraSettings) GetClearing() bool {
	if x != nil {
		return x.Clearing
	}
	return false
}

func (x *LoraSettings) GetFrequencyBand() uint32 {
	if x != nil {
		return x.FrequencyBand
	}
	return 0
}

func (x *LoraSettings) GetDeviceEui() []byte {
	if x != nil {
		return x.DeviceEui
	}
	return nil
}

func (x *LoraSettings) GetAppKey() []byte {
	if x != nil {
		return x.AppKey
	}
	return nil
}

func (x *LoraSettings) GetJoinEui() []byte {
	if x != nil {
		return x.JoinEui
	}
	return nil
}

func (x *LoraSettings) GetDeviceAddress() []byte {
	if x != nil {
		return x.DeviceAddress
	}
	return nil
}

func (x *LoraSettings) GetNetworkSessionKey() []byte {
	if x != nil {
		return x.NetworkSessionKey
	}
	return nil
}

func (x *LoraSettings) GetAppSessionKey() []byte {
	if x != nil {
		return x.AppSessionKey
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modifying bool    `protobuf:"varint,1,opt,name=modifying,proto3" json:"modifying,omitempty"`
	Longitude float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude  float32 `protobuf:"fixed32,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Time      uint64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{39}
}

func (x *Location) GetModifying() bool {
	if x != nil {
		return x.Modifying
	}
	return false
}

func (x *Location) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type WifiTransmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modifying bool   `protobuf:"varint,1,opt,name=modifying,proto3" json:"modifying,omitempty"`
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Enabled   bool   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *WifiTransmission) Reset() {
	*x = WifiTransmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiTransmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiTransmission) ProtoMessage() {}

func (x *WifiTransmission) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiTransmission.ProtoReflect.Descriptor instead.
func (*WifiTransmission) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{40}
}

func (x *WifiTransmission) GetModifying() bool {
	if x != nil {
		return x.Modifying
	}
	return false
}

func (x *WifiTransmission) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WifiTransmission) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WifiTransmission) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Transmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wifi *WifiTransmission `protobuf:"bytes,1,opt,name=wifi,proto3" json:"wifi,omitempty"`
}

func (x *Transmission) Reset() {
	*x = Transmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transmission) ProtoMessage() {}

func (x *Transmission) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transmission.ProtoReflect.Descriptor instead.
func (*Transmission) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{41}
}

func (x *Transmission) GetWifi() *WifiTransmission {
	if x != nil {
		return x.Wifi
	}
	return nil
}

type ListDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListDirectory) Reset() {
	*x = ListDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectory) ProtoMessage() {}

func (x *ListDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectory.ProtoReflect.Descriptor instead.
func (*ListDirectory) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{42}
}

func (x *ListDirectory) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ListDirectory) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type HttpQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            QueryType        `protobuf:"varint,1,opt,name=type,proto3,enum=fk_app.QueryType" json:"type,omitempty"`
	Identity        *Identity        `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Recording       *Recording       `protobuf:"bytes,3,opt,name=recording,proto3" json:"recording,omitempty"`
	Schedules       *Schedules       `protobuf:"bytes,4,opt,name=schedules,proto3" json:"schedules,omitempty"`
	NetworkSettings *NetworkSettings `protobuf:"bytes,6,opt,name=networkSettings,proto3" json:"networkSettings,omitempty"`
	LoraSettings    *LoraSettings    `protobuf:"bytes,7,opt,name=loraSettings,proto3" json:"loraSettings,omitempty"`
	Locate          *Location        `protobuf:"bytes,9,opt,name=locate,proto3" json:"locate,omitempty"`
	Transmission    *Transmission    `protobuf:"bytes,10,opt,name=transmission,proto3" json:"transmission,omitempty"`
	Directory       *ListDirectory   `protobuf:"bytes,11,opt,name=directory,proto3" json:"directory,omitempty"`
	Flags           uint32           `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	Time            uint64           `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *HttpQuery) Reset() {
	*x = HttpQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpQuery) ProtoMessage() {}

func (x *HttpQuery) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpQuery.ProtoReflect.Descriptor instead.
func (*HttpQuery) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{43}
}

func (x *HttpQuery) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_QUERY_NONE
}

func (x *HttpQuery) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *HttpQuery) GetRecording() *Recording {
	if x != nil {
		return x.Recording
	}
	return nil
}

func (x *HttpQuery) GetSchedules() *Schedules {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *HttpQuery) GetNetworkSettings() *NetworkSettings {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *HttpQuery) GetLoraSettings() *LoraSettings {
	if x != nil {
		return x.LoraSettings
	}
	return nil
}

func (x *HttpQuery) GetLocate() *Location {
	if x != nil {
		return x.Locate
	}
	return nil
}

func (x *HttpQuery) GetTransmission() *Transmission {
	if x != nil {
		return x.Transmission
	}
	return nil
}

func (x *HttpQuery) GetDirectory() *ListDirectory {
	if x != nil {
		return x.Directory
	}
	return nil
}

func (x *HttpQuery) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *HttpQuery) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type DataStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time    uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Size    uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Block   uint64 `protobuf:"varint,5,opt,name=block,proto3" json:"block,omitempty"`
	Hash    []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	Name    string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Path    string `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DataStream) Reset() {
	*x = DataStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStream) ProtoMessage() {}

func (x *DataStream) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStream.ProtoReflect.Descriptor instead.
func (*DataStream) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{44}
}

func (x *DataStream) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataStream) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DataStream) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DataStream) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DataStream) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *DataStream) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *DataStream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataStream) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type LiveSensorReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensor       *SensorCapabilities `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	Value        float32             `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Uncalibrated float32             `protobuf:"fixed32,3,opt,name=uncalibrated,proto3" json:"uncalibrated,omitempty"`
	Factory      float32             `protobuf:"fixed32,4,opt,name=factory,proto3" json:"factory,omitempty"`
}

func (x *LiveSensorReading) Reset() {
	*x = LiveSensorReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSensorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSensorReading) ProtoMessage() {}

func (x *LiveSensorReading) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSensorReading.ProtoReflect.Descriptor instead.
func (*LiveSensorReading) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{45}
}

func (x *LiveSensorReading) GetSensor() *SensorCapabilities {
	if x != nil {
		return x.Sensor
	}
	return nil
}

func (x *LiveSensorReading) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LiveSensorReading) GetUncalibrated() float32 {
	if x != nil {
		return x.Uncalibrated
	}
	return 0
}

func (x *LiveSensorReading) GetFactory() float32 {
	if x != nil {
		return x.Factory
	}
	return 0
}

type LiveModuleReadings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module   *ModuleCapabilities  `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Readings []*LiveSensorReading `protobuf:"bytes,2,rep,name=readings,proto3" json:"readings,omitempty"`
}

func (x *LiveModuleReadings) Reset() {
	*x = LiveModuleReadings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveModuleReadings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveModuleReadings) ProtoMessage() {}

func (x *LiveModuleReadings) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveModuleReadings.ProtoReflect.Descriptor instead.
func (*LiveModuleReadings) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{46}
}

func (x *LiveModuleReadings) GetModule() *ModuleCapabilities {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *LiveModuleReadings) GetReadings() []*LiveSensorReading {
	if x != nil {
		return x.Readings
	}
	return nil
}

type LiveReadings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    uint64                `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Modules []*LiveModuleReadings `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *LiveReadings) Reset() {
	*x = LiveReadings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveReadings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveReadings) ProtoMessage() {}

func (x *LiveReadings) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveReadings.ProtoReflect.Descriptor instead.
func (*LiveReadings) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{47}
}

func (x *LiveReadings) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LiveReadings) GetModules() []*LiveModuleReadings {
	if x != nil {
		return x.Modules
	}
	return nil
}

type DirectoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path      string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Size      uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Directory bool   `protobuf:"varint,4,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *DirectoryEntry) Reset() {
	*x = DirectoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryEntry) ProtoMessage() {}

func (x *DirectoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryEntry.ProtoReflect.Descriptor instead.
func (*DirectoryEntry) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{48}
}

func (x *DirectoryEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DirectoryEntry) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DirectoryEntry) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DirectoryEntry) GetDirectory() bool {
	if x != nil {
		return x.Directory
	}
	return false
}

type DirectoryListing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string            `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	TotalEntries uint32            `protobuf:"varint,3,opt,name=totalEntries,proto3" json:"totalEntries,omitempty"`
	Entries      []*DirectoryEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *DirectoryListing) Reset() {
	*x = DirectoryListing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryListing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryListing) ProtoMessage() {}

func (x *DirectoryListing) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryListing.ProtoReflect.Descriptor instead.
func (*DirectoryListing) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{49}
}

func (x *DirectoryListing) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DirectoryListing) GetTotalEntries() uint32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *DirectoryListing) GetEntries() []*DirectoryEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type NearbyNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
}

func (x *NearbyNetwork) Reset() {
	*x = NearbyNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearbyNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearbyNetwork) ProtoMessage() {}

func (x *NearbyNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearbyNetwork.ProtoReflect.Descriptor instead.
func (*NearbyNetwork) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{50}
}

func (x *NearbyNetwork) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

type NearbyNetworks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*NearbyNetwork `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *NearbyNetworks) Reset() {
	*x = NearbyNetworks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearbyNetworks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearbyNetworks) ProtoMessage() {}

func (x *NearbyNetworks) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearbyNetworks.ProtoReflect.Descriptor instead.
func (*NearbyNetworks) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{51}
}

func (x *NearbyNetworks) GetNetworks() []*NearbyNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

type Fault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Code        uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Debug       []byte `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *Fault) Reset() {
	*x = Fault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fault) ProtoMessage() {}

func (x *Fault) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fault.ProtoReflect.Descriptor instead.
func (*Fault) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{52}
}

func (x *Fault) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Fault) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Fault) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Fault) GetDebug() []byte {
	if x != nil {
		return x.Debug
	}
	return nil
}

type HttpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            ReplyType             `protobuf:"varint,1,opt,name=type,proto3,enum=fk_app.ReplyType" json:"type,omitempty"`
	Errors          []*Error              `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Status          *Status               `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	NetworkSettings *NetworkSettings      `protobuf:"bytes,4,opt,name=networkSettings,proto3" json:"networkSettings,omitempty"`
	LoraSettings    *LoraSettings         `protobuf:"bytes,8,opt,name=loraSettings,proto3" json:"loraSettings,omitempty"`
	Modules         []*ModuleCapabilities `protobuf:"bytes,5,rep,name=modules,proto3" json:"modules,omitempty"`
	Streams         []*DataStream         `protobuf:"bytes,6,rep,name=streams,proto3" json:"streams,omitempty"`
	LiveReadings    []*LiveReadings       `protobuf:"bytes,7,rep,name=liveReadings,proto3" json:"liveReadings,omitempty"`
	Schedules       *Schedules            `protobuf:"bytes,9,opt,name=schedules,proto3" json:"schedules,omitempty"`
	Transmission    *Transmission         `protobuf:"bytes,10,opt,name=transmission,proto3" json:"transmission,omitempty"`
	Listing         *DirectoryListing     `protobuf:"bytes,11,opt,name=listing,proto3" json:"listing,omitempty"`
	NearbyNetworks  *NearbyNetworks       `protobuf:"bytes,12,opt,name=nearbyNetworks,proto3" json:"nearbyNetworks,omitempty"`
	Faults          []*Fault              `protobuf:"bytes,13,rep,name=faults,proto3" json:"faults,omitempty"`
}

func (x *HttpReply) Reset() {
	*x = HttpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpReply) ProtoMessage() {}

func (x *HttpReply) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpReply.ProtoReflect.Descriptor instead.
func (*HttpReply) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{53}
}

func (x *HttpReply) GetType() ReplyType {
	if x != nil {
		return x.Type
	}
	return ReplyType_REPLY_NONE
}

func (x *HttpReply) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *HttpReply) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HttpReply) GetNetworkSettings() *NetworkSettings {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *HttpReply) GetLoraSettings() *LoraSettings {
	if x != nil {
		return x.LoraSettings
	}
	return nil
}

func (x *HttpReply) GetModules() []*ModuleCapabilities {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *HttpReply) GetStreams() []*DataStream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *HttpReply) GetLiveReadings() []*LiveReadings {
	if x != nil {
		return x.LiveReadings
	}
	return nil
}

func (x *HttpReply) GetSchedules() *Schedules {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *HttpReply) GetTransmission() *Transmission {
	if x != nil {
		return x.Transmission
	}
	return nil
}

func (x *HttpReply) GetListing() *DirectoryListing {
	if x != nil {
		return x.Listing
	}
	return nil
}

func (x *HttpReply) GetNearbyNetworks() *NearbyNetworks {
	if x != nil {
		return x.NearbyNetworks
	}
	return nil
}

func (x *HttpReply) GetFaults() []*Fault {
	if x != nil {
		return x.Faults
	}
	return nil
}

type ModuleHttpQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          ModuleQueryType `protobuf:"varint,1,opt,name=type,proto3,enum=fk_app.ModuleQueryType" json:"type,omitempty"`
	Errors        []*Error        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Configuration []byte          `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ModuleHttpQuery) Reset() {
	*x = ModuleHttpQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleHttpQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleHttpQuery) ProtoMessage() {}

func (x *ModuleHttpQuery) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleHttpQuery.ProtoReflect.Descriptor instead.
func (*ModuleHttpQuery) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{54}
}

func (x *ModuleHttpQuery) GetType() ModuleQueryType {
	if x != nil {
		return x.Type
	}
	return ModuleQueryType_MODULE_QUERY_NONE
}

func (x *ModuleHttpQuery) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ModuleHttpQuery) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type ModuleHttpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          ModuleReplyType `protobuf:"varint,1,opt,name=type,proto3,enum=fk_app.ModuleReplyType" json:"type,omitempty"`
	Errors        []*Error        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Configuration []byte          `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ModuleHttpReply) Reset() {
	*x = ModuleHttpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleHttpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleHttpReply) ProtoMessage() {}

func (x *ModuleHttpReply) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleHttpReply.ProtoReflect.Descriptor instead.
func (*ModuleHttpReply) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{55}
}

func (x *ModuleHttpReply) GetType() ModuleReplyType {
	if x != nil {
		return x.Type
	}
	return ModuleReplyType_MODULE_REPLY_NONE
}

func (x *ModuleHttpReply) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ModuleHttpReply) GetConfiguration() []byte {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type UdpMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId []byte    `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Status   UdpStatus `protobuf:"varint,2,opt,name=status,proto3,enum=fk_app.UdpStatus" json:"status,omitempty"`
	Counter  uint32    `protobuf:"varint,3,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *UdpMessage) Reset() {
	*x = UdpMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fk_app_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdpMessage) ProtoMessage() {}

func (x *UdpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fk_app_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdpMessage.ProtoReflect.Descriptor instead.
func (*UdpMessage) Descriptor() ([]byte, []int) {
	return file_fk_app_proto_rawDescGZIP(), []int{56}
}

func (x *UdpMessage) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *UdpMessage) GetStatus() UdpStatus {
	if x != nil {
		return x.Status
	}
	return UdpStatus_UDP_STATUS_ONLINE
}

func (x *UdpMessage) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

var File_fk_app_proto protoreflect.FileDescriptor

var file_fk_app_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x6b, 0x2d, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x22, 0x4d, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x09, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f,
	0x61, 0x70, 0x70, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0xc1, 0x01, 0x0a,
	0x08, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xd8, 0x01, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x2a, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6c,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x52, 0x0a,
	0x0e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3c, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22,
	0x86, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x2b, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x1b, 0x0a, 0x09, 0x45,
	0x72, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x70, 0x73, 0x48, 0x61, 0x73, 0x46, 0x69, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x70, 0x73, 0x48, 0x61, 0x73, 0x46, 0x69, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x04, 0x0a,
	0x10, 0x57, 0x69, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6b, 0x5f,
	0x61, 0x70, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x61,
	0x70, 0x70, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x65, 0x72, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x09, 0x65, 0x72, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x41,
	0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xe7, 0x03, 0x0a, 0x10, 0x57, 0x69, 0x72, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70,
	0x70, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66,
	0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70,
	0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22,
	0x4e, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0xba, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xcd, 0x01, 0x0a,
	0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f,
	0x61, 0x70, 0x70, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x12, 0x2a, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x03, 0x67, 0x70, 0x73, 0x22, 0x10, 0x0a, 0x0e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x09, 0x47, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x72, 0x61, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x72, 0x61, 0x6d,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x38, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x61, 0x74,
	0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b,
	0x5f, 0x61, 0x70, 0x70, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x08, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x0b, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6b,
	0x5f, 0x61, 0x70, 0x70, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6b, 0x5f,
	0x61, 0x70, 0x70, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x22, 0x85, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x32, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b,
	0x5f, 0x61, 0x70, 0x70, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x03,
	0x67, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x2f,
	0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22,
	0x66, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70,
	0x70, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x02,
	0x0a, 0x0c, 0x4c, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x75, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x75, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x76, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x72,
	0x0a, 0x10, 0x57, 0x69, 0x66, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x77, 0x69, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x77, 0x69, 0x66, 0x69,
	0x22, 0x37, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x82, 0x04, 0x0a, 0x09, 0x48, 0x74,
	0x74, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70,
	0x2e, 0x4c, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c,
	0x6f, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6b,
	0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b,
	0x5f, 0x61, 0x70, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb0,
	0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x75, 0x6e, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x7f, 0x0a, 0x12, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6b,
	0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x58, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x0e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x7c, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0e, 0x4e, 0x65, 0x61,
	0x72, 0x62, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x67,
	0x0a, 0x05, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xa2, 0x05, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66,
	0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38,
	0x0a, 0x0c, 0x6c, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x6f,
	0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x72, 0x61,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6b, 0x5f, 0x61,
	0x70, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0c,
	0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61,
	0x70, 0x70, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x0e, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x8b, 0x01, 0x0a,
	0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66,
	0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6b,
	0x5f, 0x61, 0x70, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x0a, 0x55, 0x64, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x55, 0x64, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2a, 0x38, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10,
	0x01, 0x2a, 0xda, 0x04, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x56,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x53,
	0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x10,
	0x09, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53,
	0x5f, 0x53, 0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10,
	0x0e, 0x12, 0x24, 0x0a, 0x20, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x10, 0x12,
	0x1c, 0x0a, 0x18, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x11, 0x12, 0x10, 0x0a,
	0x0c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x12, 0x12,
	0x10, 0x0a, 0x0c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x13, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x16, 0x12,
	0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x53, 0x5f, 0x53, 0x50, 0x49, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x51, 0x53, 0x50, 0x49, 0x10, 0x1c, 0x2a, 0xe1,
	0x02, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4f, 0x4c, 0x4c,
	0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x0d, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x12, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x10, 0x13, 0x2a, 0x6c, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02,
	0x2a, 0x3d, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x2a,
	0x23, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x2a, 0x75, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x0f, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x36,
	0x0a, 0x09, 0x55, 0x64, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x44, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x44, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x59, 0x45, 0x10, 0x01, 0x42, 0x42, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x66, 0x79, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6b, 0x69,
	0x74, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x62, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70,
	0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_fk_app_proto_rawDescOnce sync.Once
	file_fk_app_proto_rawDescData = file_fk_app_proto_rawDesc
)

func file_fk_app_proto_rawDescGZIP() []byte {
	file_fk_app_proto_rawDescOnce.Do(func() {
		file_fk_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_fk_app_proto_rawDescData)
	})
	return file_fk_app_proto_rawDescData
}

var file_fk_app_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_fk_app_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_fk_app_proto_goTypes = []interface{}{
	(QueryFlags)(0),              // 0: fk_app.QueryFlags
	(QueryType)(0),               // 1: fk_app.QueryType
	(ReplyType)(0),               // 2: fk_app.ReplyType
	(DownloadFlags)(0),           // 3: fk_app.DownloadFlags
	(ModuleFlags)(0),             // 4: fk_app.ModuleFlags
	(SensorFlags)(0),             // 5: fk_app.SensorFlags
	(ModuleQueryType)(0),         // 6: fk_app.ModuleQueryType
	(ModuleReplyType)(0),         // 7: fk_app.ModuleReplyType
	(UdpStatus)(0),               // 8: fk_app.UdpStatus
	(*QueryCapabilities)(nil),    // 9: fk_app.QueryCapabilities
	(*LiveValue)(nil),            // 10: fk_app.LiveValue
	(*SensorCapabilities)(nil),   // 11: fk_app.SensorCapabilities
	(*ModuleHeader)(nil),         // 12: fk_app.ModuleHeader
	(*ModuleCapabilities)(nil),   // 13: fk_app.ModuleCapabilities
	(*Capabilities)(nil),         // 14: fk_app.Capabilities
	(*NetworkInfo)(nil),          // 15: fk_app.NetworkInfo
	(*NetworkSettings)(nil),      // 16: fk_app.NetworkSettings
	(*Firmware)(nil),             // 17: fk_app.Firmware
	(*Identity)(nil),             // 18: fk_app.Identity
	(*ConfigureSensorQuery)(nil), // 19: fk_app.ConfigureSensorQuery
	(*LiveDataPoll)(nil),         // 20: fk_app.LiveDataPoll
	(*LiveDataSample)(nil),       // 21: fk_app.LiveDataSample
	(*LiveData)(nil),             // 22: fk_app.LiveData
	(*File)(nil),                 // 23: fk_app.File
	(*Files)(nil),                // 24: fk_app.Files
	(*DownloadFile)(nil),         // 25: fk_app.DownloadFile
	(*EraseFile)(nil),            // 26: fk_app.EraseFile
	(*FileData)(nil),             // 27: fk_app.FileData
	(*DeviceStatus)(nil),         // 28: fk_app.DeviceStatus
	(*QueryModule)(nil),          // 29: fk_app.QueryModule
	(*ModuleReply)(nil),          // 30: fk_app.ModuleReply
	(*WireMessageQuery)(nil),     // 31: fk_app.WireMessageQuery
	(*Error)(nil),                // 32: fk_app.Error
	(*WireMessageReply)(nil),     // 33: fk_app.WireMessageReply
	(*Interval)(nil),             // 34: fk_app.Interval
	(*Schedule)(nil),             // 35: fk_app.Schedule
	(*Schedules)(nil),            // 36: fk_app.Schedules
	(*HardwareStatus)(nil),       // 37: fk_app.HardwareStatus
	(*GpsStatus)(nil),            // 38: fk_app.GpsStatus
	(*MemoryStatus)(nil),         // 39: fk_app.MemoryStatus
	(*BatteryStatus)(nil),        // 40: fk_app.BatteryStatus
	(*SolarStatus)(nil),          // 41: fk_app.SolarStatus
	(*PowerStatus)(nil),          // 42: fk_app.PowerStatus
	(*Status)(nil),               // 43: fk_app.Status
	(*Range)(nil),                // 44: fk_app.Range
	(*DownloadQuery)(nil),        // 45: fk_app.DownloadQuery
	(*Recording)(nil),            // 46: fk_app.Recording
	(*LoraSettings)(nil),         // 47: fk_app.LoraSettings
	(*Location)(nil),             // 48: fk_app.Location
	(*WifiTransmission)(nil),     // 49: fk_app.WifiTransmission
	(*Transmission)(nil),         // 50: fk_app.Transmission
	(*ListDirectory)(nil),        // 51: fk_app.ListDirectory
	(*HttpQuery)(nil),            // 52: fk_app.HttpQuery
	(*DataStream)(nil),           // 53: fk_app.DataStream
	(*LiveSensorReading)(nil),    // 54: fk_app.LiveSensorReading
	(*LiveModuleReadings)(nil),   // 55: fk_app.LiveModuleReadings
	(*LiveReadings)(nil),         // 56: fk_app.LiveReadings
	(*DirectoryEntry)(nil),       // 57: fk_app.DirectoryEntry
	(*DirectoryListing)(nil),     // 58: fk_app.DirectoryListing
	(*NearbyNetwork)(nil),        // 59: fk_app.NearbyNetwork
	(*NearbyNetworks)(nil),       // 60: fk_app.NearbyNetworks
	(*Fault)(nil),                // 61: fk_app.Fault
	(*HttpReply)(nil),            // 62: fk_app.HttpReply
	(*ModuleHttpQuery)(nil),      // 63: fk_app.ModuleHttpQuery
	(*ModuleHttpReply)(nil),      // 64: fk_app.ModuleHttpReply
	(*UdpMessage)(nil),           // 65: fk_app.UdpMessage
}
var file_fk_app_proto_depIdxs = []int32{
	10, // 0: fk_app.SensorCapabilities.value:type_name -> fk_app.LiveValue
	11, // 1: fk_app.ModuleCapabilities.sensors:type_name -> fk_app.SensorCapabilities
	12, // 2: fk_app.ModuleCapabilities.header:type_name -> fk_app.ModuleHeader
	13, // 3: fk_app.Capabilities.modules:type_name -> fk_app.ModuleCapabilities
	11, // 4: fk_app.Capabilities.sensors:type_name -> fk_app.SensorCapabilities
	15, // 5: fk_app.NetworkSettings.connected:type_name -> fk_app.NetworkInfo
	15, // 6: fk_app.NetworkSettings.networks:type_name -> fk_app.NetworkInfo
	21, // 7: fk_app.LiveData.samples:type_name -> fk_app.LiveDataSample
	23, // 8: fk_app.Files.files:type_name -> fk_app.File
	1,  // 9: fk_app.WireMessageQuery.type:type_name -> fk_app.QueryType
	9,  // 10: fk_app.WireMessageQuery.queryCapabilities:type_name -> fk_app.QueryCapabilities
	19, // 11: fk_app.WireMessageQuery.configureSensor:type_name -> fk_app.ConfigureSensorQuery
	20, // 12: fk_app.WireMessageQuery.liveDataPoll:type_name -> fk_app.LiveDataPoll
	25, // 13: fk_app.WireMessageQuery.downloadFile:type_name -> fk_app.DownloadFile
	26, // 14: fk_app.WireMessageQuery.eraseFile:type_name -> fk_app.EraseFile
	16, // 15: fk_app.WireMessageQuery.networkSettings:type_name -> fk_app.NetworkSettings
	18, // 16: fk_app.WireMessageQuery.identity:type_name -> fk_app.Identity
	29, // 17: fk_app.WireMessageQuery.module:type_name -> fk_app.QueryModule
	2,  // 18: fk_app.WireMessageReply.type:type_name -> fk_app.ReplyType
	32, // 19: fk_app.WireMessageReply.errors:type_name -> fk_app.Error
	14, // 20: fk_app.WireMessageReply.capabilities:type_name -> fk_app.Capabilities
	22, // 21: fk_app.WireMessageReply.liveData:type_name -> fk_app.LiveData
	24, // 22: fk_app.WireMessageReply.files:type_name -> fk_app.Files
	27, // 23: fk_app.WireMessageReply.fileData:type_name -> fk_app.FileData
	16, // 24: fk_app.WireMessageReply.networkSettings:type_name -> fk_app.NetworkSettings
	18, // 25: fk_app.WireMessageReply.identity:type_name -> fk_app.Identity
	28, // 26: fk_app.WireMessageReply.status:type_name -> fk_app.DeviceStatus
	30, // 27: fk_app.WireMessageReply.module:type_name -> fk_app.ModuleReply
	34, // 28: fk_app.Schedule.intervals:type_name -> fk_app.Interval
	35, // 29: fk_app.Schedules.readings:type_name -> fk_app.Schedule
	35, // 30: fk_app.Schedules.lora:type_name -> fk_app.Schedule
	35, // 31: fk_app.Schedules.network:type_name -> fk_app.Schedule
	35, // 32: fk_app.Schedules.gps:type_name -> fk_app.Schedule
	17, // 33: fk_app.MemoryStatus.firmware:type_name -> fk_app.Firmware
	40, // 34: fk_app.PowerStatus.battery:type_name -> fk_app.BatteryStatus
	41, // 35: fk_app.PowerStatus.solar:type_name -> fk_app.SolarStatus
	18, // 36: fk_app.Status.identity:type_name -> fk_app.Identity
	37, // 37: fk_app.Status.hardware:type_name -> fk_app.HardwareStatus
	42, // 38: fk_app.Status.power:type_name -> fk_app.PowerStatus
	39, // 39: fk_app.Status.memory:type_name -> fk_app.MemoryStatus
	38, // 40: fk_app.Status.gps:type_name -> fk_app.GpsStatus
	36, // 41: fk_app.Status.schedules:type_name -> fk_app.Schedules
	46, // 42: fk_app.Status.recording:type_name -> fk_app.Recording
	16, // 43: fk_app.Status.network:type_name -> fk_app.NetworkSettings
	17, // 44: fk_app.Status.firmware:type_name -> fk_app.Firmware
	44, // 45: fk_app.DownloadQuery.ranges:type_name -> fk_app.Range
	48, // 46: fk_app.Recording.location:type_name -> fk_app.Location
	49, // 47: fk_app.Transmission.wifi:type_name -> fk_app.WifiTransmission
	1,  // 48: fk_app.HttpQuery.type:type_name -> fk_app.QueryType
	18, // 49: fk_app.HttpQuery.identity:type_name -> fk_app.Identity
	46, // 50: fk_app.HttpQuery.recording:type_name -> fk_app.Recording
	36, // 51: fk_app.HttpQuery.schedules:type_name -> fk_app.Schedules
	16, // 52: fk_app.HttpQuery.networkSettings:type_name -> fk_app.NetworkSettings
	47, // 53: fk_app.HttpQuery.loraSettings:type_name -> fk_app.LoraSettings
	48, // 54: fk_app.HttpQuery.locate:type_name -> fk_app.Location
	50, // 55: fk_app.HttpQuery.transmission:type_name -> fk_app.Transmission
	51, // 56: fk_app.HttpQuery.directory:type_name -> fk_app.ListDirectory
	11, // 57: fk_app.LiveSensorReading.sensor:type_name -> fk_app.SensorCapabilities
	13, // 58: fk_app.LiveModuleReadings.module:type_name -> fk_app.ModuleCapabilities
	54, // 59: fk_app.LiveModuleReadings.readings:type_name -> fk_app.LiveSensorReading
	55, // 60: fk_app.LiveReadings.modules:type_name -> fk_app.LiveModuleReadings
	57, // 61: fk_app.DirectoryListing.entries:type_name -> fk_app.DirectoryEntry
	59, // 62: fk_app.NearbyNetworks.networks:type_name -> fk_app.NearbyNetwork
	2,  // 63: fk_app.HttpReply.type:type_name -> fk_app.ReplyType
	32, // 64: fk_app.HttpReply.errors:type_name -> fk_app.Error
	43, // 65: fk_app.HttpReply.status:type_name -> fk_app.Status
	16, // 66: fk_app.HttpReply.networkSettings:type_name -> fk_app.NetworkSettings
	47, // 67: fk_app.HttpReply.loraSettings:type_name -> fk_app.LoraSettings
	13, // 68: fk_app.HttpReply.modules:type_name -> fk_app.ModuleCapabilities
	53, // 69: fk_app.HttpReply.streams:type_name -> fk_app.DataStream
	56, // 70: fk_app.HttpReply.liveReadings:type_name -> fk_app.LiveReadings
	36, // 71: fk_app.HttpReply.schedules:type_name -> fk_app.Schedules
	50, // 72: fk_app.HttpReply.transmission:type_name -> fk_app.Transmission
	58, // 73: fk_app.HttpReply.listing:type_name -> fk_app.DirectoryListing
	60, // 74: fk_app.HttpReply.nearbyNetworks:type_name -> fk_app.NearbyNetworks
	61, // 75: fk_app.HttpReply.faults:type_name -> fk_app.Fault
	6,  // 76: fk_app.ModuleHttpQuery.type:type_name -> fk_app.ModuleQueryType
	32, // 77: fk_app.ModuleHttpQuery.errors:type_name -> fk_app.Error
	7,  // 78: fk_app.ModuleHttpReply.type:type_name -> fk_app.ModuleReplyType
	32, // 79: fk_app.ModuleHttpReply.errors:type_name -> fk_app.Error
	8,  // 80: fk_app.UdpMessage.status:type_name -> fk_app.UdpStatus
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_fk_app_proto_init() }
func file_fk_app_proto_init() {
	if File_fk_app_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fk_app_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureSensorQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDataPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDataSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Files); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraseFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireMessageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireMessageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiTransmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSensorReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveModuleReadings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveReadings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryListing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearbyNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearbyNetworks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleHttpQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleHttpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fk_app_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdpMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fk_app_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fk_app_proto_goTypes,
		DependencyIndexes: file_fk_app_proto_depIdxs,
		EnumInfos:         file_fk_app_proto_enumTypes,
		MessageInfos:      file_fk_app_proto_msgTypes,
	}.Build()
	File_fk_app_proto = out.File
	file_fk_app_proto_rawDesc = nil
	file_fk_app_proto_goTypes = nil
	file_fk_app_proto_depIdxs = nil
}
